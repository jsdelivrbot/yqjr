package com.yqjr.fin.mkmm.sales.rest;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.TeamReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.TeamWorkCondition;
import com.yqjr.fin.mkmm.sales.entity.PersonTeam;
import com.yqjr.fin.mkmm.sales.entity.TeamHis;
import com.yqjr.fin.mkmm.sales.entity.TeamReview;
import com.yqjr.fin.mkmm.sales.model.TeamReviewWork;
import com.yqjr.fin.mkmm.sales.services.TeamReviewService;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonTeamVo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.jwt.JwtConfig;
import com.yqjr.scfw.common.mapper.mapperhelper.EntityHelper;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "teamReviews")
@RestController
@RequestMapping(value = "/teamReviews")
public class TeamReviewRest extends BaseRest<TeamReviewService, TeamReview> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    TeamReviewService teamReviewService;

    @Autowired
    JwtConfig jwtConfig;

    @ApiOperation(value = "分页查询团队审核表（参数：实体对象属性、pageNum、pageSize）", tags = "团队审核表信息：TeamReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<TeamReview> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            TeamReviewCondition condition) {

        List<TeamReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<TeamReview> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "团队审核进度处理列表", tags = "团队审核表信息：TeamReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<TeamReview> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            TeamReviewCondition condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCreator(Long.parseLong(userContext.getId()));
//        condition.setCompany(userContext.getComCode());  //添加公司作为筛选条件
//        //判断人员权限
//        if (UserRoleHelp.isAdmin()||UserRoleHelp.isMarketingManager()||UserRoleHelp.isMarketingWorkers()){
//            if (condition.getAreaCode() == null || "".equals(condition.getAreaCode())){
//                condition.setAreaCode(null);
//            }
//        }else {
//            condition.setAreaCode(userContext.getAreaCode());
//        }

        List<TeamReview> list = teamReviewService.selectProcessList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<TeamReview> pageList = new PageInfo<>(list);
        JQGridJsonResult<TeamReview> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }
    @ApiOperation(value = "团队审核列表", tags = "团队审核表信息：TeamReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGridWork", method = RequestMethod.GET)
    public JQGridJsonResult<TeamReviewWork> pageByJqGridWork(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            TeamWorkCondition condition) {

        condition.setModType("02");//团队
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCompany(userContext.getComCode());  //添加公司作为筛选条件
        if (UserRoleHelp.isAdmin()){
            condition.setReviewLevel(null);
            condition.setAreaCode(null);
            condition.setFounderLevel("03");
        }else {
            if (UserRoleHelp.isMarketingManager()){
                condition.setAreaCode(null);
                condition.setReviewLevel("2");
                condition.setFounderLevel("03");
            }else if (UserRoleHelp.isMarketingWorkers()){
                condition.setAreaCode(null);
                condition.setReviewLevel("1");
                condition.setFounderLevel("03");
            }else if (UserRoleHelp.isRegionalLeaders()){
                condition.setAreaCode(userContext.getAreaCode());
                condition.setReviewLevel("1");
                condition.setFounderLevel("02");
            }else {
                condition.setAreaCode(userContext.getAreaCode());
                condition.setReviewLevel("0");
                condition.setFounderLevel("01");
            }
        }
        List<TeamReviewWork> list = teamReviewService.queryWorkFlow(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<TeamReviewWork> pageList = new PageInfo<TeamReviewWork>(list);
        JQGridJsonResult<TeamReviewWork> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //创建团队
    @ApiOperation(value = "新增记录（参数：实体对象属性）", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ObjectResultResponse<TeamReview> create(@RequestBody TeamReview teamReview, Errors errors) {
        if (UserRoleHelp.isAdmin() || UserRoleHelp.isMarketingManager() || UserRoleHelp.isMarketingWorkers()){
            teamReview.setFounderLevel("03");
        }else if (UserRoleHelp.isRegionalLeaders()){
            teamReview.setFounderLevel("02");
        }else if (UserRoleHelp.isSalesManager()){
            teamReview.setFounderLevel("01");
        }
        teamReviewService.insert(teamReview);
        return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_ADD_SUCCESS+"!,您的团队代码为："+teamReview.getTeamCode(), teamReview);
    }
    //修改团队
    @ApiOperation(value = "修改记录（参数：实体对象属性）根据主键更新属性不为null的值", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/edit/{id}", method = RequestMethod.PATCH)
    @ResponseBody
    public ObjectResultResponse<TeamReview> update(@PathVariable("id") Long id,
                                               @RequestBody TeamReview teamReview, Errors errors) {
        EntityHelper.setId(teamReview, id);
       String result = teamReviewService.patchReviewById(teamReview);
        //return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_PUT_SUCCESS, null);
       if(result=="error"){
           return ObjectResultResponse.createByErrorMessage("该信息已经提交审核，请勿再次提交");
       }
       return ObjectResultResponse.createBySuccessMessage(Const.MSG_PUT_SUCCESS);
    }
    //审核中
    @ApiOperation(value = "修改记录为审核中", tags = "")
    @RequestMapping(value = "/reviewing", method = RequestMethod.GET)
    @ResponseBody
    public ObjectResultResponse<TeamReview> reviewing( @RequestParam(value = "id") Long id,
                                                       @RequestParam(value = "workeid") Long workeid) {
        try {
            TeamReview teamReview = teamReviewService.reviewIng(id,workeid);
            return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, teamReview);
        }catch (Exception e){
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_FAILURE, "该条数据已经被占用!", null);
        }
    }

    /**
     * 团队审核
     * @param
     * @return
     */
    @RequestMapping(value = "/submit", method = RequestMethod.PATCH)
    @ResponseBody
    public ObjectResultResponse<TeamReview> reviewTeamSubmit(@RequestParam("id") Long teamId,
                                                             @RequestParam("workeid") Long workeId,
                                                             @RequestBody TeamReviewWork teamReviewWork){
        teamReviewService.teamWorkSumit(teamId,workeId,teamReviewWork.getReviewStatus(),teamReviewWork.getOpinion(),teamReviewWork.getCompany(),teamReviewWork.getModifierName());
        return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_REVIEW_SUCCESS, null);
    }



    /**
     * 团队新增页面团队名称唯一性校验
     * @param teamName
     * @return
     * creat by liufang 2018/05/29
     */
    @RequestMapping(value = "selectByCheckUniquen",method = RequestMethod.GET)
    public ObjectResultResponse selectByCheckUniquen(String teamName){
        UserContext context = SessionHolder.getUserContext();
        String company = context.getComCode();
        Integer count = teamReviewService.selectByCheckUniquen(teamName,company);
        if(count > 0){
            return ObjectResultResponse.createByError();
        }
        return ObjectResultResponse.createBySuccessMessage(Const.CODE_SUCCESS);
    }

    //驳回后修改重新提交
    @ApiOperation(value = "修改记录（参数：实体对象属性）根据主键更新属性不为null的值", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/queryEdit/{id}", method = RequestMethod.PATCH)
    @ResponseBody
    public ObjectResultResponse<TeamReview> updateQuery(@PathVariable("id") Long id,
                                                        @RequestParam("type") String type,
                                                        @RequestBody TeamReview teamReview, Errors errors) {
        EntityHelper.setId(teamReview, id);
        UserContext userContext=SessionHolder.getUserContext();
        String companyCode = userContext.getComCode();
        teamReview.setCompany(companyCode);
        teamReviewService.patchReviewQueryById(teamReview,type);
        return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_PUT_SUCCESS, null);
    }

    //综合查询，查reviewde的数据
    @ApiOperation(value = "根据teamCode查询reviewde的数据", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/teamReviewQuery", method = RequestMethod.GET)
    @ResponseBody
    public ResultMsg<List<TeamReview>> queryTeamReview(@RequestParam(value = "teamCode") String teamCode,
                                                    @RequestParam(value = "reviewStatus") String reviewStatus) {
        try{
            List<TeamReview> teamHiss = teamReviewService.queryTeamReviewByCode(teamCode,reviewStatus);
            return new ResultMsg<>( Const.CODE_SUCCESS, null ,Const.SUCCESS, teamHiss);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<List<TeamReview>>( Const.CODE_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<List<TeamReview>>( Const.CODE_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    //综合查询，查历史记录
    @ApiOperation(value = "查询历史记录", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/teamHisQuery", method = RequestMethod.GET)
    @ResponseBody
    public ResultMsg<TeamHis> teamHisQuery(@RequestParam(value = "flowId") Long flowId) {
        try{
            TeamHis teamHis = teamReviewService.queryTeamHisByReviewId(flowId);
            return new ResultMsg<TeamHis>( Const.CODE_SUCCESS, null ,Const.SUCCESS, teamHis);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<TeamHis>( Const.CODE_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<TeamHis>( Const.CODE_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    //查看审核
    @ApiOperation(value = "查看审核", tags = "查看审核")
    @RequestMapping(value = "/teamReviewWatch", method = RequestMethod.GET)
    @ResponseBody
    public ObjectResultResponse<TeamReviewWork> teamReviewWatch( @RequestParam(value = "id") Long id,
                                                                 @RequestParam(value = "workeid") Long workeid) {
        TeamReviewWork teamReviewWork = teamReviewService.teamReviewWatch(id, workeid);
        ObjectResultResponse<TeamReviewWork> objectResultResponse = new ObjectResultResponse<TeamReviewWork>();
        objectResultResponse.setResult(teamReviewWork);
        objectResultResponse.setIsSuccess(Const.SUCCESS);
        objectResultResponse.setCode(Const.CODE_SUCCESS);
        return objectResultResponse;
    }


}