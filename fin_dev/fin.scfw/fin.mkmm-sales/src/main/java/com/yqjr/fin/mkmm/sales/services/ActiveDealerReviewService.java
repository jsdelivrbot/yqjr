package com.yqjr.fin.mkmm.sales.services;

import com.google.common.util.concurrent.ListeningExecutorService;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.ActiveDealerReview;
import com.yqjr.fin.mkmm.sales.mapper.ActiveDealerReviewMapper;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Service
@Transactional(readOnly = true)
public class ActiveDealerReviewService extends BaseService<ActiveDealerReviewMapper, ActiveDealerReview, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    /**
     * 解析上传供销商的模板文件
     * @param inputStream
     * @return
     * @throws Exception
     */
    public List<ActiveDealerReview> analysisExecL(InputStream inputStream)throws Exception {
        Workbook book = Workbook.getWorkbook(inputStream);
        Sheet sheet=book.getSheet(0);
        //读取行数
        int rows = sheet.getRows();
        //列数
//        int clos = sheet.getColumns();
        List<ActiveDealerReview> activeDealerReviewList=new ArrayList<ActiveDealerReview>();
        ActiveDealerReview activeDealerReview=null;
        for(int i=1;i<rows;i++){
            Cell[] cells=sheet.getRow(i);
            int clos = cells.length > 3 ? 3 : cells.length;
            activeDealerReview=new ActiveDealerReview();
            if(null!=cells){
               for(int c=0;c<clos;c++){
                   Cell cell=cells[c];
                   if(cell!=null){

                       String contents=cell.getContents();
                       if(c==0){ //获得第一列数据
                           activeDealerReview.setDealerCode(contents);
                       }else if(c==1){//获得第二列数据
                           activeDealerReview.setDealerName(contents);
                       }else if(c==2){//获得第三列数据
                           if(!"".equals(contents)&&null!=contents) {
                               activeDealerReview.setActiveNumber(Long.parseLong(contents));
                           }else{

                           }
                       }
                   }
               }
                activeDealerReviewList.add(activeDealerReview);
            }
        }
        book.close();
        return activeDealerReviewList;
    }

    //下载经销商Excel模板
    public void dealerTempletDownload(HttpServletResponse response) throws IOException {
        HSSFWorkbook workbook = new HSSFWorkbook();
        //表头
        String [] cellValues = {"经销商代码","经销商名称","活动上限/辆"};
        String [] sheetNames = {"经销商"};
        createSheet(workbook, cellValues, sheetNames);
        //拼装blobName
        String fileName = "dealerTemplate.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());
    }

    /***
     * 创建Sheet页
     * @param workbook
     * @param sheetNames sheet页名称
     * @param cellValues
     */
    private void createSheet(HSSFWorkbook workbook,String [] cellValues, String... sheetNames ) {
        for(int i= 0; i< sheetNames.length; i++) {
            HSSFSheet sheet = workbook.createSheet(sheetNames[i]);
            createTitle(sheet,cellValues);
        }
    }

    /**
     * 创建表头
     * @param sheet
     * @param cellValues
     */
    private void createTitle(HSSFSheet sheet, String [] cellValues) {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 20*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }
}