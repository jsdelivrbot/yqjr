package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;
import javax.validation.Valid;

import com.yqjr.fin.mkmm.sales.rest.vo.MaterialInVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.MaterialIn;
import com.yqjr.fin.mkmm.sales.condition.MaterialInCondition;
import com.yqjr.fin.mkmm.sales.services.MaterialInService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "materialIns")
@RestController
@RequestMapping(value = "/materialIns")
public class MaterialInRest extends BaseRest<MaterialInService, MaterialIn> {

    //region generated by CodeRobot
    @Autowired
    MaterialInService materialInService;
    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询素材上传表（参数：实体对象属性、pageNum、pageSize）", tags = "素材上传表信息：MaterialInRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<MaterialIn> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            MaterialInCondition condition) {

        List<MaterialIn> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<MaterialIn> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询素材上传表信息（参数：实体对象属性、pageNum、pageSize）", tags = "素材上传表信息：MaterialInRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<MaterialIn> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            MaterialInCondition condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCompany(userContext.getComCode());
        List<MaterialIn> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<MaterialIn> pageList = new PageInfo<>(list);
        JQGridJsonResult<MaterialIn> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }

    /**
     * 销管二期
     * 删除素材时查询该素材是否已被使用
     * create by lf
     * 2018/9/3
     * @param materialCode
     * @return
     */
    @ApiOperation(value = "分页查询素材上传表信息", tags = "素材上传表信息：MaterialInRest")
    @RequestMapping(value = "/selectByMaterialCode", method = RequestMethod.GET)
    public ObjectResultResponse selectByMaterialCode(
            @RequestParam(value = "materialCode") String materialCode) {
        try{
        List<MaterialIn> materialIns = materialInService.selectByMaterialCode(materialCode);
        return ObjectResultResponse.createBySuccess(materialIns);
        }catch(ValidationException e){
            e.printStackTrace();
            return ObjectResultResponse.createByErrorCodeMessage(Const.CODE_FAILURE,"操作失败");
        }catch(Exception e){
            e.printStackTrace();
            return ObjectResultResponse.createByErrorCodeMessage(Const.CODE_FAILURE,"操作失败");
        }
    }

    /**
     * 销管二期
     * 素材上传页面接口
     * create by lf
     * 2018/9/3
     * @param materialInCondition
     * @return
     */
    @ApiOperation(value = "素材上传", tags = "素材上传：MaterialInRest")
    @RequestMapping(value = "/materialUpload", method = RequestMethod.POST)
    @ResponseBody
    public ObjectResultResponse materialUpload(@RequestBody MaterialInCondition materialInCondition) {
        try{
            MaterialIn materialIn = new MaterialIn();
            Long id = materialInService.materialUpload(materialInCondition);
            materialIn.setId(id);
            return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,Const.MSG_UPLOAD_SUCCESS,materialIn);
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,"操作失败",null);
        }catch(Exception e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }

    /**
     * 销管二期
     * 素材推送页面查询
     * create by lf
     * 2018/9/4
     * @param id
     * @return
     */
    @ApiOperation(value = "素材推送页面信息查询", tags = "素材推送页面信息查询：MaterialInRest")
    @RequestMapping(value = "/materialOut", method = RequestMethod.GET)
    public ObjectResultResponse<MaterialIn> pageByJqGrid(@RequestParam(value = "id", required = true) Long id) {
        try{
            MaterialIn materialIn = materialInService.selectMessage(id);
            return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,Const.MSG_CHECK_SUCCESS,materialIn);
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,"操作失败",null);
        }catch(Exception e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }


    /**
     * 素材库页面查询
     * 2018/9/10
     * create by lf
     * @param pageNum
     * @param pageSize
     * @param condition
     * @return
     */
    @ApiOperation(value = "分页查询素材上传表信息（参数：实体对象属性、pageNum、pageSize）", tags = "素材上传表信息：MaterialInRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGridAddTime", method = RequestMethod.POST)
    @ResponseBody
    public JQGridJsonResult<MaterialIn> pageByJqGridAddTime(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestBody MaterialInVo condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCompany(userContext.getComCode());
        List<MaterialIn> list = materialInService.selectDataList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<MaterialIn> pageList = new PageInfo<>(list);
        JQGridJsonResult<MaterialIn> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }

}