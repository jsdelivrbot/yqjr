package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.TimeUtil;
import com.yqjr.fin.mkmm.sales.condition.*;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.*;
import com.yqjr.fin.mkmm.sales.model.PersonDetail;
import com.yqjr.fin.mkmm.sales.rest.vo.PersonMainAndTeam;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import com.yqjr.scfw.common.utils.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
@Transactional(readOnly = true)
public class PersonMainService extends BaseService<PersonMainMapper, PersonMain, Long> {

    @Autowired
    private PersonMainMapper personMainMapper;
    @Autowired
    private PersonTeamReviewService personTeamReviewService;
    @Autowired
    private PersonMainReviewService personMainReviewService;
    @Autowired
    private PersonMainReviewMapper personMainReviewMapper;
    @Autowired
    private PersonCityReviewMapper personCityReviewMapper;
    @Autowired
    private PersonBrandReviewMapper personBrandReviewMapper;
    @Autowired
    private PersonTeamService personTeamService;
    @Autowired
    private WorkFlowService workFlowService;
    @Autowired
    private PersonTeamMapper personTeamMapper;
    @Autowired
    private PersonCityReviewService personCityReviewService;
    @Autowired
    private PersonBrandReviewService personBrandReviewService;

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public int patchByPersonCode(PersonMain personMain){
        return personMainMapper.patchByPersonCode(personMain);
    }
    /**
     * 模糊查询
     * @param personMainAndTeam
     * @return
     */
    public List<PersonMain> queryPersonMainList(PersonMainAndTeam personMainAndTeam){
        return personMainMapper.queryPersonMainList(personMainAndTeam);
    }


    public List<PersonMain> selectAllNoStatus(){
       return personMainMapper.selectAllNoStatus();

    }

    /**
     * 人员维护列表
     * @param condition
     * @param pageBounds
     * @return
     */
    public List<PersonMainVo> getPersonMainList(PersonWorkCondition condition, PageBounds... pageBounds){
        List<PersonMainVo> list = personMainMapper.selectPersonMainTable(condition,pageBounds);
        /*int size = 0;
        if(list!=null && list.size()>0){
            size = list.size();
        }
        int start = (pageNum-1)*pageSize;
        int end = pageNum*pageSize>=size?size:pageNum*pageSize;
        List<PersonMainVo> result = new ArrayList<>(list.subList(start,end));*/
        return list;
    }

    /**
     * 修改人员生效状态
     */
    public void  modifyPersonStatus(){
        personTeamMapper.updatePersonStatus();
    }

    /**
     * 修改人员列表
     * @param id
     * @return
     * update by lzc  2018/6/8
     */
    public PersonMainVo getPersonMainById(String id){
        PersonMainVo personMainVo=personMainMapper.selectPersonMainById(Long.parseLong(id));
        TimeUtil timeUtil =new TimeUtil();
        if (personMainVo.getPersonBirth()!=null){
            personMainVo.setPersonAge(timeUtil.getTime(personMainVo.getPersonBirth()));//年龄
        }
        if (personMainVo.getPersonFirstworktime()!=null){
            personMainVo.setPersonWorktime(timeUtil.getTime(personMainVo.getPersonFirstworktime()));//工龄
        }
        return personMainVo;
    }


    /**
     * 人员基本信息变更明细列表
     * @param flowId
     * @return
     * update by lzc  2018/6/23   人员基本信息变更明细列表
     */
    public PersonMainVo selectPersonMainByflowId(Long flowId){
        PersonMainVo personMainVo=personMainMapper.selectPersonMainByflowId(flowId);
        TimeUtil timeUtil =new TimeUtil();
        if (personMainVo.getPersonBirth()!=null){
            personMainVo.setPersonAge(timeUtil.getTime(personMainVo.getPersonBirth()));//年龄
        }
        if (personMainVo.getPersonFirstworktime()!=null){
            personMainVo.setPersonWorktime(timeUtil.getTime(personMainVo.getPersonFirstworktime()));//工龄
        }
        return personMainVo;
    }



    /**
     * 修改销售人员
     * @param personDetail
     */
    @Transactional
    public void modifyPerson(PersonDetail personDetail) {
        UserContext uc = SessionHolder.getUserContext();
        String companyCode =uc.getComCode();//通过token 获取公司代码
        String createName=uc.getName();//创建人
        //根据人员编码查询是否有修改的数据
        PersonTeamReviewCondition personTeamReviewCondition=new PersonTeamReviewCondition();
        personTeamReviewCondition.setPersonCode(personDetail.getPersonCode());
        personTeamReviewCondition.setFlag("1");
        Long count=personTeamReviewService.selectCount(personTeamReviewCondition);
        if(count>0){
            throw new ValidationException("人员编码为："+personDetail.getPersonCode()+"正在审核操作中！不允许修改。");
        }else {
            WorkFlow workFlow=new WorkFlow();
            workFlow.setReviewId(personDetail.getPersonCode());//人员编码
            workFlow.setReviewLevel("1");//一级审核
            workFlow.setType("02");//修改
            workFlow.setModType("01");//人员
            workFlow.setReviewStatus("01");//提交审核
            workFlowService.insert(workFlow);
            workFlow.setReviewStatus("02");//同时增加待审核数据
            workFlowService.insert(workFlow);
            PersonTeamReview personTeamReview = new PersonTeamReview();
            //设置数据为待审核状态
            personTeamReview.setTeamCode(personDetail.getTeamCode());
            personTeamReview.setTeamName(personDetail.getTeamName());
            personTeamReview.setAreaName(personDetail.getAreaName());
            personTeamReview.setAreaCode(personDetail.getAreaCode());
            personTeamReview.setSearchPerson(personDetail.getSearchPerson());
            personTeamReview.setPersonCheckStart(personDetail.getPersonCheckStart());
            personTeamReview.setPersonCode(personDetail.getPersonCode());
            personTeamReview.setPersonCorrectime(personDetail.getPersonCorrectime());
            personTeamReview.setPersonJointime(personDetail.getPersonJointime());
            personTeamReview.setPersonLevel(personDetail.getPersonLevel());
            personTeamReview.setPersonNature(personDetail.getPersonNature());
            personTeamReview.setPersonTryEndtime(personDetail.getPersonTryEndtime());
            personTeamReview.setPersonTryStartime(personDetail.getPersonTryStartime());
            personTeamReview.setPersonUptime(personDetail.getPersonUptime());
            personTeamReview.setStartTime(personDetail.getStartTime());
            //   personTeamReview.setModifier();
            personTeamReview.setModifyTime(new Date());
            personTeamReview.setRemark(personDetail.getRemark());
            personTeamReview.setPersonStatus(personDetail.getPersonStatus());//人员状态无效
            personTeamReview.setReviewStatus("02");//待审核
            personTeamReview.setFlag("1");//有效状态
            personTeamReview.setReviewType("02");//修改
            personTeamReview.setFlowId(workFlow.getId());
            personTeamReview.setCompany(companyCode);//公司代码
            personTeamReview.setCreateName(createName);
            personTeamReviewService.insert(personTeamReview);
            //设置人员状态为无效
//            PersonTeamCondition personTeamCondition = new PersonTeamCondition();
//            personTeamCondition.setPersonCode(personDetail.getPersonCode());
//            PersonTeam personTeam = personTeamService.selectOne(personTeamCondition);
//            personTeam.setPersonStatus("0");
//            personTeamService.patchById(personTeam);
            //新增销售人员基本信息到审核表
//            PersonMainReviewCondition personMainReviewCondition=new PersonMainReviewCondition();
//            personMainReviewCondition.setPersonCode(personDetail.getPersonCode());
//            PersonMainReview personMainReview = personMainReviewMapper.selectOne(personMainReviewCondition);
            PersonMainReview personMainReview =new PersonMainReview();
            personMainReview.setPersonTeamReviewId(personTeamReview.getId());
            personMainReview.setPersonAddress(personDetail.getPersonAddress());
            personMainReview.setPersonAge(personDetail.getPersonAge());
            personMainReview.setPersonBirth(personDetail.getPersonBirth());
            personMainReview.setPersonCode(personDetail.getPersonCode());
            personMainReview.setPersonEdu(personDetail.getPersonEdu());
            personMainReview.setPersonEdulevel(personDetail.getPersonEdulevel());
            personMainReview.setPersonEmail(personDetail.getPersonEmail());
            personMainReview.setStartTime(personDetail.getStartTime());
            personMainReview.setPersonEthnic(personDetail.getPersonEthnic());
            personMainReview.setPersonFirstworktime(personDetail.getPersonFirstworktime());
            personMainReview.setPersonHomephone(personDetail.getPersonHomephone());
            personMainReview.setPersonIdcard(personDetail.getPersonIdcard());
            personMainReview.setPersonMarr(personDetail.getPersonMarr());
            personMainReview.setPersonName(personDetail.getPersonName());
            personMainReview.setPersonPhone(personDetail.getPersonPhone());
            personMainReview.setPersonSchool(personDetail.getPersonSchool());
            personMainReview.setPersonSubject(personDetail.getPersonSubject());
            personMainReview.setPersonWorkphone(personDetail.getPersonWorkphone());
            personMainReview.setPersonWorktime(personDetail.getPersonWorktime());
            personMainReview.setModifyTime(personTeamReview.getModifyTime());
            personMainReview.setRemark(personDetail.getRemark());
            //  personMainReview.setModifier();
            personMainReview.setPersonTeamReviewId(personTeamReview.getId());
            personMainReviewService.insert(personMainReview);
            //新增销售人员负责城市到审核表
            PersonCityReview personCityReview = new PersonCityReview();
            personCityReview.setPersonCode(personDetail.getPersonCode());
            personCityReview.setPersonTeamReviewId(personTeamReview.getId());
            personCityReview.setProvinceCode(StringUtils.join(personDetail.getProvinces(), ","));
            personCityReview.setCityCode(StringUtils.join(personDetail.getCities(), ","));
            personCityReview.setModifyTime(personTeamReview.getModifyTime());
            personCityReview.setCompany(companyCode);//公司代码
            //personCityReview.setModifier(personTeamReview.getModifier());
            personCityReviewService.insert(personCityReview);
            //新增销售人员负责品牌到审核表
            PersonBrandReview personBrandReview = new PersonBrandReview();
            personBrandReview.setPersonTeamReviewId(personTeamReview.getId());
            personBrandReview.setBrandCode(StringUtils.join(personDetail.getBrands(), ","));
            personBrandReview.setPersonCode(personDetail.getPersonCode());
            personBrandReview.setModifyTime(personTeamReview.getModifyTime());
            personBrandReview.setCompany(companyCode);//公司代码
             //personBrandReview.setModifier(personTeamReview.getModifier());
            personBrandReviewService.insert(personBrandReview);



        }
    }

    //endregion

    public boolean selectByCode(String personCode){
        List<PersonMain> personMains = personMainMapper.selectByCode(personCode);
        if(personMains.size()==0){
            return false;
        }
        return true;
    }

    public List<PersonMain> selectPersonMainByCode(PersonMain personMain){
        List<PersonMain> personMains = personMainMapper.selectPersonMainByCode(personMain);
        return personMains;
    }

}