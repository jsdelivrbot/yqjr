package com.yqjr.fin.mkmm.sales.services;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.yqjr.fin.mkmm.sales.common.BeanUtil;
import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.condition.PersonMainCondition;
import com.yqjr.fin.mkmm.sales.condition.PersonTeamCondition;
import com.yqjr.fin.mkmm.sales.entity.PersonMain;
import com.yqjr.fin.mkmm.sales.entity.PersonTeam;
import com.yqjr.fin.mkmm.sales.mapper.PersonMainMapper;
import com.yqjr.fin.mkmm.sales.mapper.PersonTeamMapper;
import com.yqjr.fin.mkmm.sales.model.DataView;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.fin.mkmm.sales.services.gateway.MetaGateway;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.BasicBussiness;
import com.yqjr.fin.mkmm.sales.mapper.BasicBussinessMapper;
import com.yqjr.scfw.common.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Service
@Transactional(readOnly = true)
public class BasicBussinessService extends BaseService<BasicBussinessMapper, BasicBussiness, Long> {


    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion
    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    BasicBussinessMapper basicBussinessMapper;

    @Autowired
    PersonTeamMapper personTeamMapper;

    @Autowired
    PersonMainMapper personMainMapper;

    @Autowired
    MetaGateway metaGatewayService;



    /**
     * 转换业务视图中数据为我方基础业务数据
     * @param nowDate
     */
    public void transDataFormBussinessView(Date nowDate) throws Exception{
        logger.info("transDataFormBussinessView start ,nowDate="+nowDate);
        // 根据日期从视图中查询数据
        List<BasicBussiness> basicBussinessList = basicBussinessMapper.selectSaleViewByDate(nowDate);
        logger.info("transDataFormBussinessView basicBussinessList size = " + basicBussinessList.size());
        if (null != basicBussinessList && basicBussinessList.size()>0) {
            //获取每笔数据的人员和团队信息
            for(BasicBussiness basicBussiness:basicBussinessList){
                basicBussiness = getPersonAndTeam(basicBussiness);
                basicBussiness.setFlag("1");
                insert(basicBussiness);
            }
        }
        logger.info("transDataFormBussinessView end");
    }



    /**
     * @Description: 通过放款日期查询业务数据
     * @Param: dfactstartDate
     */
    public List<BasicBussiness> selectByDfactatartDate(String dfactstartDate) {
        return basicBussinessMapper.selectByDfactatartDate(dfactstartDate);
    }

    /**
     * @Description: 通过年、月、人员编码、品牌查询业务数据
     * @Param: basicBussiness
     */
    public List<BasicBussiness> selectByPlanInfo(Map<String,Object> paramMap) {
        return  basicBussinessMapper.selectByPlanInfo(paramMap);
    }

    /**
     *  通过人员编码查询人员信息表
     */
    private PersonTeam selectPTByPersonCode(String personCode) {
        logger.info("getPersonTeamByCode start,personCode = " + personCode);
        PersonTeamCondition personTeamCondition = new PersonTeamCondition();
        personTeamCondition.setPersonCode(personCode);
        List<PersonTeam> list = personTeamMapper.select(personTeamCondition);
        PersonTeam personTeam = null;
        if(null != list && list.size()>0){
            personTeam = list.get(0);
        }
        return personTeam;

    }

    /**
     *  通过登陆名称查询人员信息表
     */
    private PersonMain selectPMByLoginName(String loginName) {
        logger.info("selectPMByLoginName start,loginName = " + loginName);
        PersonMainCondition personMainCondition = new PersonMainCondition();
        personMainCondition.setLoginName(loginName);
        List<PersonMain> list = personMainMapper.select(personMainCondition);
        PersonMain personMain = null;
        if(null != list && list.size()>0){
            personMain = list.get(0);
        }
        return personMain;
    }


    /**
     *  获得人员和团队信息
     */
    private BasicBussiness getPersonAndTeam(BasicBussiness basicBussiness) throws Exception{
        logger.info("getPersonAndTeam start,dealerCode = " + basicBussiness.getDistributorCode());
        // 通过经销商和公司 查询经销商人员关系表 获取登陆名
        Map<String,String> paramMap = new HashMap<>();
        paramMap.put("dealerCode",basicBussiness.getDistributorCode());
        paramMap.put("company",basicBussiness.getCompany());
        Map<String,Object> map = basicBussinessMapper.selectPersonByDealer(paramMap);
        logger.info("getPersonAndTeam,map = " + map);
        if(null != map && map.containsKey("LOGIN_NAME")){
            PersonMain personMain = selectPMByLoginName(map.get("LOGIN_NAME").toString());
            if(null != personMain){
                basicBussiness.setPersonCode(personMain.getPersonCode());
                basicBussiness.setPersonName(personMain.getPersonName());
            }
            logger.info("getPersonAndTeam,personMain = " + JSONObject.toJSONString(personMain));
            if(null != personMain && StringUtils.isNotBlank(personMain.getPersonCode())){
                PersonTeam personTeam = selectPTByPersonCode(personMain.getPersonCode());
                if(null != personTeam){
                    basicBussiness.setTeamCode(personTeam.getTeamCode());
                    basicBussiness.setTeamName(personTeam.getTeamName());
                }
            }
        }
        logger.info("getPersonAndTeam end" );
        return basicBussiness;
    }


    /*private BasicBussiness getName(BasicBussiness basicBussiness){
        //获取区域名称
        List<SelectCodeVo> areaNameList = metaGatewayService.transCode("Zone",basicBussiness.getLargeAreaCode());
        if(null != areaNameList && areaNameList.size()>0){
            basicBussiness.setLargeAreaName(areaNameList.get(0).getLabel());
        }
        return basicBussiness;

    }*/

}