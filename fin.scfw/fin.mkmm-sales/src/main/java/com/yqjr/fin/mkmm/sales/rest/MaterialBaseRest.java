package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;
import com.yqjr.fin.mkmm.sales.entity.MaterialIn;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectProductCodeVo;
import com.yqjr.fin.mkmm.sales.services.MaterialInService;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.results.ListResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.MaterialBase;
import com.yqjr.fin.mkmm.sales.condition.MaterialBaseCondition;
import com.yqjr.fin.mkmm.sales.services.MaterialBaseService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "materialBases")
@RestController
@RequestMapping(value = "/materialBases")
public class MaterialBaseRest extends BaseRest<MaterialBaseService, MaterialBase> {

    //region generated by CodeRobot

    @Autowired
    MaterialInService materialInService;
    @Autowired
    MaterialBaseService materialBaseService;
    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询素材基础表（参数：实体对象属性、pageNum、pageSize）", tags = "素材基础表信息：MaterialBaseRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<MaterialBase> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            MaterialBaseCondition condition) {

        List<MaterialBase> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<MaterialBase> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询素材基础表信息（参数：实体对象属性、pageNum、pageSize）", tags = "素材基础表信息：MaterialBaseRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<MaterialBase> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            MaterialBaseCondition condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCompany(userContext.getComCode());
        List<MaterialBase> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<MaterialBase> pageList = new PageInfo<>(list);
        JQGridJsonResult<MaterialBase> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    /**
     * 销管二期 素材新增
     * create by lf
     * 2018/9/3
     * @param condition
     * @return
     */
    @ApiOperation(value = "素材新增", tags = "素材基础表新增信息：MaterialBaseRest")
    @RequestMapping(value = "/insert", method = RequestMethod.POST)
    @ResponseBody
    public ObjectResultResponse<MaterialBase> insert(@RequestBody MaterialBase condition) {
        try{
            materialBaseService.insertMsg(condition);
            return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,Const.MSG_ADD_SUCCESS,null);
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,e.getMessage(),null);
        }catch(Exception e){
            logger.error("系统错误", e);
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }

    /**
     * 销管二期 素材删除
     * create by lf
     * 2018/9/3
     * @param id
     * @return
     */
    @ApiOperation(value = "素材删除", tags = "素材基础表删除信息：MaterialBaseRest")
    @RequestMapping(value = "/delete", method = RequestMethod.GET)
    public ObjectResultResponse<MaterialBase> delete(@RequestParam(value = "id", required = true) Long id) {
        try{
            MaterialBase condition1 = materialBaseService.selectById(id);
            String materialCode = condition1.getMaterialCode();
            MaterialBase condition = new MaterialBase();
            UserContext userContext = SessionHolder.getUserContext();
            condition.setId(id);
            condition.setMaterialCode(materialCode);
            condition.setCompany(userContext.getComCode());
            List<MaterialIn> materialIns = materialInService.selectByMaterialCode(materialCode);
            if(materialIns.size() == 0){
                MaterialBase materialBase = materialBaseService.selectById(condition.getId());
                materialBaseService.insertToHis(materialBase);
                baseService.delete(condition);
                return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,Const.MSG_DEL_SUCCESS,null);
            }else {
                return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,"该素材已经被使用，请勿删除",null);
            }
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,Const.MSG_DEL_FAILURES,null);
        }catch(Exception e){
            logger.error("系统错误", e);
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }

    /**
     * 查询所有素材
     * @return
     */
    @ApiOperation(value = "查询所有素材", tags = "素材基础表信息：MaterialBaseRest")
    @RequestMapping(value = "/selectMaterialBase", method = RequestMethod.GET)
    @ResponseBody
    public ListResultResponse<SelectCodeVo> selectMaterialBaseAll() {

        List<SelectCodeVo> selectCodeVos = materialBaseService.selectMaterialBaseAll();

        ListResultResponse<SelectCodeVo> listResult = new ListResultResponse<SelectCodeVo>();
        listResult.setResult(selectCodeVos);
        listResult.setCode("0000");
        listResult.setIsSuccess(true);
        listResult.setMsg("查询成功");

        return listResult;
    }


}