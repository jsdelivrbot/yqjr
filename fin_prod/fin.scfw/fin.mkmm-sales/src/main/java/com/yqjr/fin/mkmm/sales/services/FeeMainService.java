package com.yqjr.fin.mkmm.sales.services;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.yqjr.fin.mkmm.sales.common.BeanUtil;
import com.yqjr.fin.mkmm.sales.condition.ActiveMatchMainCondition;
import com.yqjr.fin.mkmm.sales.condition.FeeMainCondition;
import com.yqjr.fin.mkmm.sales.entity.ActiveMatchMain;
import com.yqjr.fin.mkmm.sales.entity.FeeMainHis;
import com.yqjr.fin.mkmm.sales.mapper.ActiveMatchMainMapper;
import com.yqjr.fin.mkmm.sales.mapper.FeeMainHisMapper;
import com.yqjr.fin.scfw.isomer.api.CommonStatusEnum;
import com.yqjr.fin.scfw.isomer.api.response.BillStatusResDetailModel;
import com.yqjr.fin.scfw.isomer.api.response.ResponseModel;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.FeeMain;
import com.yqjr.fin.mkmm.sales.mapper.FeeMainMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.jar.JarEntry;

@Service
@Transactional(readOnly = true)
public class FeeMainService extends BaseService<FeeMainMapper, FeeMain, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    FeeMainMapper feeMainMapper;

    @Autowired
    FeeSendToGXService feeSendToGXService;

    @Autowired
    FeeMainHisMapper feeMainHisMapper;

    @Autowired
    ActiveMatchMainMapper activeMatchMainMapper;



    public void saveObj(FeeMain feeMain) {
        feeMainMapper.saveObj(feeMain);
    }

    /**
     * 查询已发送共享和动支中状态的数据
     */
    public List<FeeMain> selectSendGxBill() {
        logger.info("selectSendGxBill start");
        FeeMainCondition feeMainCondition = new FeeMainCondition();
        feeMainCondition.setBillStatus("02");
        feeMainCondition.setIsSendGx("02");
       return feeMainMapper.select(feeMainCondition);
    }

    /**
     * 已发送共享和动支中的数据账单状态查询
     */
    public void billStatusQuery(List<FeeMain> list){
        logger.info("billStatusQuery start");
        for (FeeMain feeMain:list){
            try {
                //调用异构查询
                logger.info("billStatusQuery feeMain = " + JSONObject.toJSONString(feeMain, SerializerFeature.WriteMapNullValue));
                ResponseModel response = feeSendToGXService.billStatusQuery(feeMain);
                updateFeeMain(feeMain,response);
            }catch (Exception e){
                logger.info("账单状态查询异常，msg = " + e.getMessage(),e);
            }
        }
        logger.info("billStatusQuery end");
    }

    /**
     * 根据异构返回值 处理费用相关 中间状态不处理
     */
    @Transactional
    public void updateFeeMain(FeeMain feeMain,ResponseModel response) {
        logger.info("updateFeeMain start,response = " + JSONObject.toJSONString(response));
        if(null == response){
            logger.info("返回值为空");
            return;
        }
        if(CommonStatusEnum.SUCCESS.getCode().equals(response.getReqCode())){
            BillStatusResDetailModel resDetailModel = JSONObject.parseObject(JSONObject.toJSONString(response.getData()),BillStatusResDetailModel.class);
            //BillStatusResDetailModel resDetailModel = (BillStatusResDetailModel) response.getData();
            String billStatus = resDetailModel.getBillStatus();
            // 异构返回值为已动支 更新费用表结算状态为已动支
            if (CommonStatusEnum.DYNAMIC_BILL_END.getCode().equals(billStatus)){
                updateFeeMainStatus(feeMain);
            }else if(CommonStatusEnum.RETURN_HANDEL.getCode().equals(billStatus)){
                // 费用表该条记录 添加到轨迹表后删除 活动匹配主表 匹配状态更改为未匹配
                deleteFeeMain(feeMain);
                updateActiveMatchStatus(feeMain);
            }
        }
        logger.info("updateFeeMain end");
    }

    /** 
     * 更新费用表结算状态为已动支
     */ 
    private void updateFeeMainStatus(FeeMain feeMain){
        logger.info("updateFeeMainStatus start,feeMainId = " + feeMain.getId());
        //FeeMain updateFeeMain = new FeeMain();
        feeMain.setBillStatus("03");
        //feeMain.setId(feeMain.getId());
        feeMainMapper.updateById(feeMain);
        logger.info("updateFeeMainStatus end");
    }

    /**
     * 当异构返回结果为 打回处理时 删除feemain表记录  添加到轨迹表
     */
    private void deleteFeeMain(FeeMain feeMain) {
        logger.info("deleteFeeMain start,feeMainId = " + feeMain.getId());
        FeeMainHis feeMainHis = new FeeMainHis();
        BeanUtil.copyProperties(feeMainHis,feeMain);
        feeMainHis.setBillStatus("04");//打回处理标识
        feeMainHis.setCreateTime(null);
        feeMainHis.setModifyTime(null);
        feeMainHisMapper.insert(feeMainHis);
        feeMainMapper.deleteById(feeMain.getId());
        logger.info("deleteFeeMain end");
    }

    /**
     * 当异构返回结果为 打回处理时 更新活动匹配表状态为未匹配
     */
    private void updateActiveMatchStatus(FeeMain feeMain) {
        logger.info("updateActiveMatchStatus start,feeMainId = " + feeMain.getId());
        ActiveMatchMainCondition activeMatchMainCondition = new ActiveMatchMainCondition();
        activeMatchMainCondition.setBusinessCode(feeMain.getBusinessCode());
        List<ActiveMatchMain> list = activeMatchMainMapper.select(activeMatchMainCondition);
        if(null != list && list.size()>0){
            ActiveMatchMain activeMatchMain = list.get(0);
            activeMatchMain.setIsSettlement("01");
            activeMatchMainMapper.patchById(activeMatchMain);
        }
        logger.info("updateActiveMatchStatus end");
    }

    /*private ResponseModel responseTest(){
        FeeMain feeMain = new FeeMain();
        feeMain.setId(1L);
        ResponseModel responseModel = new ResponseModel();
        responseModel.setReqCode(CommonStatusEnum.SUCCESS.getCode());
        responseModel.setReqMsg(CommonStatusEnum.SUCCESS.getMessage());
        BillStatusResDetailModel billStatusResDetailModel = new BillStatusResDetailModel();
        billStatusResDetailModel.setBillStatus(CommonStatusEnum.RETURN_HANDEL.getCode());
        responseModel.setData(billStatusResDetailModel);
        return responseModel;
    }*/

}
