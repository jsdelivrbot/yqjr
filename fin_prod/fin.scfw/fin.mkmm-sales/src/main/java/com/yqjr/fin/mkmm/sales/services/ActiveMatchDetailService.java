package com.yqjr.fin.mkmm.sales.services;

import com.netflix.discovery.converters.Auto;
import com.yqjr.fin.mkmm.sales.condition.ActiveMatchDetailVoCondition;
import com.yqjr.fin.mkmm.sales.entity.FeeDetailReview;
import com.yqjr.fin.mkmm.sales.entity.FeeMainReview;
import com.yqjr.fin.mkmm.sales.vo.domin.ActiveMatchVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonTrackVo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.ActiveMatchDetail;
import com.yqjr.fin.mkmm.sales.mapper.ActiveMatchDetailMapper;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;

import java.io.File;
import java.io.IOException;
import java.util.List;

@Service
@Transactional(readOnly = true)
public class ActiveMatchDetailService extends BaseService<ActiveMatchDetailMapper, ActiveMatchDetail, Long> {
    

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion
    @Autowired
    ActiveMatchDetailMapper activeMatchDetailMapper;

    /**
     * 查询活动向下全部计算费用的业务明细
     * @param businessCode
     * @param isSettle
     * @return
     */
    @Transactional
    public List<ActiveMatchDetail> selectInfoBySettle(String businessCode, String isSettle,String company) {

        return activeMatchDetailMapper.selectInfoBySettle(businessCode,isSettle,company);
    }

    //促销活动业务明细查询
    public List<ActiveMatchVo> queryActiveDetil(ActiveMatchDetailVoCondition condition, PageBounds... pageBounds){
        List<ActiveMatchVo> activeMatchVos = null;
        activeMatchVos=activeMatchDetailMapper.queryActiveDetil(condition,pageBounds);
        return activeMatchVos;
    }

    //导出的数据
    @Transactional
    public void drownLoadDetail(ActiveMatchVo activeMatchVo , HttpServletResponse response) throws IOException, WriteException {
        List<ActiveMatchVo> activeMatchVos = activeMatchDetailMapper.selectActiveDetil(activeMatchVo);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        HSSFWorkbook workbook = new HSSFWorkbook();
        //表头
        String [] cellValues = {"活动代码","活动名称","活动区域","活动经销商","活动品牌","活动子品牌","活动车型","贷款金额","放款日期","营销活动","金融产品","业务模式","信贷产品"};
        String [] sheetNames = {"活动业务明细"};
        HSSFSheet sheet = workbook.createSheet(sheetNames[0]);
        createTitle(sheet,cellValues);
        int i = 1;
        if (!activeMatchVos.isEmpty()) {
            for (ActiveMatchVo amv : activeMatchVos) {
                HSSFRow row =  sheet.createRow(i);
                row.createCell(0).setCellValue(amv.getBusinessCode());
                row.createCell(1).setCellValue(amv.getBusinessName());
                row.createCell(2).setCellValue(amv.getLargeAreaName());
                row.createCell(3).setCellValue(amv.getDistributorName());
                row.createCell(4).setCellValue(amv.getBrandsName());
                row.createCell(5).setCellValue(amv.getSeriesName());
                row.createCell(6).setCellValue(amv.getCarBrandTypeName());
                row.createCell(7).setCellValue(amv.getNloanMoney()+"");
                if (amv.getDfactstartDate() != null){
                    row.createCell(8).setCellValue(sdf.format(amv.getDfactstartDate())+"");
                }else {
                    row.createCell(8).setCellValue("");
                }
                row.createCell(9).setCellValue(amv.getNactivitiesName());
                row.createCell(10).setCellValue(amv.getNdlrbizTypeName());
                row.createCell(11).setCellValue(amv.getNbizTypeName());
                row.createCell(12).setCellValue(amv.getNgetinterestTypeName());
                i++;
            }
        }
        //拼装blobName
        String fileName = "activeBusinessDetail.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());
//        List<ActiveMatchVo> activeMatchVos = activeMatchDetailMapper.selectActiveDetil(activeMatchVo);
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//        WritableWorkbook wwb = null;
//        File writeFile = new File(path);
//        //检查文件是否已存在，存在则删除
//        if (writeFile.exists()) {
//            writeFile.delete();
//        }
//        //建立新的文件
//        writeFile.createNewFile();
//        //整理数据流
//        wwb = Workbook.createWorkbook(writeFile);
//        //第一页
//        WritableSheet sheet = wwb.createSheet("活动业务明细", 0);
//        //表头
////        reateTitle(sheet);
//        int i = 1;
//        if (!activeMatchVos.isEmpty()) {
//            for (ActiveMatchVo amv : activeMatchVos) {
//                sheet.addCell(new Label(0, i, amv.getBusinessCode()));
//                sheet.addCell(new Label(1, i, amv.getBusinessName()));
//                sheet.addCell(new Label(2, i, amv.getLargeAreaName()));
//                sheet.addCell(new Label(3, i, amv.getDistributorName()));
//                sheet.addCell(new Label(4, i, amv.getBrandsName()));
//                sheet.addCell(new Label(5, i, amv.getSeriesName()));
//                sheet.addCell(new Label(6, i, amv.getCarBrandTypeName()));
//                sheet.addCell(new Label(7, i, amv.getNloanMoney()+""));
//                if (amv.getDfactstartDate() != null){
//                    sheet.addCell(new Label(8, i, sdf.format(amv.getDfactstartDate())+""));
//                }else {
//                    sheet.addCell(new Label(8, i, ""));
//                }
//                sheet.addCell(new Label(9, i, amv.getNactivitiesName()));
//                sheet.addCell(new Label(10, i, amv.getNdlrbizTypeName()));
//                sheet.addCell(new Label(11, i, amv.getNbizTypeName()));
//                sheet.addCell(new Label(12, i, amv.getNgetinterestTypeName()));
//                i++;
//            }
//        }
//        //PUSH当前内容到XLS文件中
//        wwb.write();
//        wwb.close();
    }

    /**
     * 费用--下载明细
     * @param
     * @param
     */
    @Transactional
    public void selectActiveMatchByCode( String activeCode,HttpServletResponse response,String company) throws IOException, WriteException {
        List<ActiveMatchDetail> activeMatchDetails= activeMatchDetailMapper.selectActiveMatchByCode(activeCode,company);

        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("业务明细");
        String [] cellValues = {"活动代码","活动名称","区域","经销商","品牌","车系","车型","贷款金额","贷款期限","放款日期","营销活动","金融产品","业务模式","信贷产品"};
        createTitle(sheet,cellValues);
        writeData(sheet,activeMatchDetails);
        String fileName = "activeMatchDetail.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());

    }
    public void writeData(HSSFSheet sheet,List<ActiveMatchDetail> activeMatchDetails){
        int i = 1;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        for(ActiveMatchDetail activeMatchDetail :activeMatchDetails) {
            HSSFRow row =  sheet.createRow(i);
            row.createCell(0).setCellValue(activeMatchDetail.getBusinessCode());
            row.createCell(1).setCellValue(activeMatchDetail.getBusinessName());
            row.createCell(2).setCellValue(activeMatchDetail.getLargeAreaName());
            row.createCell(3).setCellValue(activeMatchDetail.getDistributorName());
            row.createCell(4).setCellValue(activeMatchDetail.getBrandsName());
            row.createCell(5).setCellValue(activeMatchDetail.getSeriesName());
            row.createCell(6).setCellValue(activeMatchDetail.getCarBrandTypeName());
            row.createCell(7).setCellValue(activeMatchDetail.getNloanMoney()+"");
            row.createCell(8).setCellValue(activeMatchDetail.getTimeLimit());
            row.createCell(9).setCellValue(sdf.format(activeMatchDetail.getDfactstartDate()));
            row.createCell(10).setCellValue(activeMatchDetail.getNactivitiesName());
            row.createCell(11).setCellValue(activeMatchDetail.getNdlrbizTypeName());
            row.createCell(12).setCellValue(activeMatchDetail.getNbizTypeName());
            row.createCell(13).setCellValue(activeMatchDetail.getNgetinterestTypeName());
            i++;
        }
    }

    /***
     * 创建表头2
     * @param sheet
     */
    private void createTitle(HSSFSheet sheet, String [] cellValues) {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 12*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }

    //转换字段
    public ActiveMatchVo exchangeVo(String activeCode, String largeAreaName, String distributorName, String brandsCode, String seriesCode, String carBrandType){
        ActiveMatchVo activeMatchVo = new ActiveMatchVo();
        if(activeCode !=null && !"".equals(activeCode) ) {
            activeMatchVo.setActiveCode(activeCode);
        }
        if(largeAreaName !=null && !"".equals(largeAreaName) ) {
            activeMatchVo.setLargeAreaName(largeAreaName);
        }
        if(distributorName !=null && !"".equals(distributorName)) {
            activeMatchVo.setDistributorName(distributorName);
        }
        if(brandsCode !=null && !"".equals(brandsCode) && !"00".equals(brandsCode)) {
            activeMatchVo.setBrandsCode(brandsCode);
        }
        if(seriesCode !=null && !"".equals(seriesCode) && !"00".equals(seriesCode)) {
            activeMatchVo.setSeriesCode(seriesCode);
        }
        if(carBrandType !=null && !"".equals(carBrandType) && !"00".equals(carBrandType)) {
            activeMatchVo.setCarBrandType(carBrandType);
        }
        return activeMatchVo;
    }

    //创建表头
    public void reateTitles(WritableSheet sheet) throws WriteException {
        sheet.addCell(new Label(0,0,"活动代码"));
        sheet.addCell(new Label(1,0,"活动名称"));
        sheet.addCell(new Label(2,0,"区域"));
        sheet.addCell(new Label(3,0,"活动经销商"));
        sheet.addCell(new Label(4,0,"活动品牌"));
        sheet.addCell(new Label(5,0,"子品牌"));
        sheet.addCell(new Label(6,0,"车型"));
        sheet.addCell(new Label(7,0,"贷款金额"));
        sheet.addCell(new Label(8,0,"贷款期限"));
        sheet.addCell(new Label(9,0,"放款日期"));
        sheet.addCell(new Label(10,0,"营销活动"));
        sheet.addCell(new Label(11,0,"金融产品"));
        sheet.addCell(new Label(12,0,"业务模式"));
        sheet.addCell(new Label(13,0,"信贷产品"));
    }

    /***
     * 创建Sheet页
     * @param workbook
     * @param sheetNames sheet页名称
     * @param cellValues
     */
    private void createSheet(HSSFWorkbook workbook,String [] cellValues, String... sheetNames ) {
        for(int i= 0; i< sheetNames.length; i++) {
            HSSFSheet sheet = workbook.createSheet(sheetNames[i]);
            createTitle(sheet,cellValues);
        }
    }

}