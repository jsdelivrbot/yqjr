package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.condition.ActiveMainProcessCondition;
import com.yqjr.fin.mkmm.sales.condition.ActiveMainReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.ActiveReviewListCondition;
import com.yqjr.fin.mkmm.sales.rest.vo.ActiveMainProcessReviewVo;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.ActiveMainReview;
import com.yqjr.fin.mkmm.sales.mapper.ActiveMainReviewMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional(readOnly = true)
public class ActiveMainReviewService extends BaseService<ActiveMainReviewMapper, ActiveMainReview, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //endregion
    @Autowired
    private ActiveMainReviewMapper activeMainReviewMapper;

    @Autowired
    private SelectCodeService selectCodeService;

    /**
     * 模糊查询
     * @param activeMainReviewCondition
     * @return
     */
    public int queryActiveMainReviewCount(ActiveMainReviewCondition activeMainReviewCondition){
        return activeMainReviewMapper.queryActiveMainReviewCount(activeMainReviewCondition);
    }

    /**
     * 查询最大ID
     * @param likeID
     * @return
     */
    public String queryMaxID(String likeID){
        String maxID="";
        maxID=activeMainReviewMapper.queryMaxID(likeID);
        return maxID;
    }

    /**
     * 查询活动审核列表
     * @param condition
     * @param of
     * @return
     */
    public List<ActiveMainReview> selectReviewList(ActiveReviewListCondition condition, PageBounds... pageBounds) {
        return activeMainReviewMapper.selectReviewList(condition,pageBounds);
    }

    /**
     * 查询活动审核进度
     * @param condition
     * @param of
     * @return
     */
    public List<ActiveMainProcessReviewVo> selectProcessReviewList(ActiveMainProcessCondition condition, PageBounds... pageBounds) {
        List<ActiveMainProcessReviewVo> list = activeMainReviewMapper.selectProcessReviewList(condition,pageBounds);
        //根据Code查询对应名字
//        for (int i = 0; i <list.size() ; i++){
//            if (list.get(i).getActiveCarReview() != null){
//                if (list.get(i).getActiveCarReview().getBrandsCode() != null){
//                    List<SelectCodeVo> brands = selectCodeService.translateCode("CarBrand", list.get(i).getActiveCarReview().getBrandsCode());
//                    String brandsName = "";
//                    for (SelectCodeVo brand : brands){
//                        if (!"".equals(brandsName)){
//                            brandsName += "，";
//                        }
//                        brandsName += brand.getLabel();
//                    }
//                    list.get(i).getActiveCarReview().setBrandsName(brandsName);
//                }
//            }
//            if (list.get(i).getActiveAreaReview() != null){
//                if (list.get(i).getActiveAreaReview().getAreaCode() != null){
//                    List<SelectCodeVo> areas = selectCodeService.translateCode("Zone", list.get(i).getActiveAreaReview().getAreaCode());
//                    String areaName = "";
//                    for (SelectCodeVo area : areas){
//                        if (!"".equals(areaName)){
//                            areaName += "，";
//                        }
//                        areaName += area.getLabel();
//                    }
//                    list.get(i).getActiveAreaReview().setAreaName(areaName);
//                }
//            }
//        }
        return list;
    }

    /**
     * 设置旧数据的Flag为0
     * @param mid
     */
    public void updateFlagById(Long mid) {
        activeMainReviewMapper.updateFlagById(mid);
    }

    public void updateStatusById(String status, Long id, Long modifier) {
        activeMainReviewMapper.updateStatusById(status,id,modifier);
    }
}