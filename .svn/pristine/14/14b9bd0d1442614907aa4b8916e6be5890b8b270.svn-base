package com.yqjr.fin.mkmm.sales.rest;

import com.yqjr.fin.mkmm.sales.common.ExcelUtils;
import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.PersonPlanCondition;
import com.yqjr.fin.mkmm.sales.entity.PersonPlan;
import com.yqjr.fin.mkmm.sales.services.PersonPlanService;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonPlanVo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.PageResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "personPlans")
@RestController
@RequestMapping(value = "/personPlans")
public class PersonPlanRest extends BaseRest<PersonPlanService, PersonPlan> {

    //region generated by CodeRobot
    @Autowired
    private PersonPlanService personPlanService;

    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询人员销售计划表（参数：实体对象属性、pageNum、pageSize）", tags = "人员销售计划表信息：PersonPlanRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<PersonPlan> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            PersonPlanCondition condition) {

        List<PersonPlan> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<PersonPlan> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询人员销售计划表信息（参数：实体对象属性、pageNum、pageSize）", tags = "人员销售计划表信息：PersonPlanRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PersonPlanVo> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            PersonPlanCondition condition) {
//        List<PersonPlan> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        condition.setCompany(company);
        List<PersonPlanVo> personPlanVos =  personPlanService.queryPersonPlan(condition);

        PageInfo<PersonPlanVo> pageList = new PageInfo<>(personPlanVos);
        JQGridJsonResult<PersonPlanVo> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(personPlanVos);

        return jqGridJson;
    }

    //下载模板
    @RequestMapping(value="/createTemplate")
    public void downloadExl(HttpServletResponse response){
        try{
            personPlanService.downloadExl(response);
        } catch (Exception e) {
            logger.error("下载模板失败！", e);
        }
    }

    //上传excel
    @RequestMapping(value = "/fileUpload", method = RequestMethod.POST)
    @Transactional
    public ResultMsg fileUpload(@RequestParam("fileName") MultipartFile file, HttpServletRequest req) {
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        InputStream inputStream = null;
        try {
            //上传表格
            inputStream = file.getInputStream();
            //解析表格
            personPlanService.readPlanExl(inputStream,company);
            return new ResultMsg(Const.MSG_UPLOAD_SUCCESS, Const.CODE_SUCCESS,Const.SUCCESS ,null);
        } catch (ValidationException e) {
            logger.error("人员校验异常！", e);
            return new ResultMsg(Const.MSG_UPLOAD_FAILURE, e.getMessage() ,Const.FAILURE ,null);
        } catch (Exception e) {
            logger.error("上传失败！", e);
            return new ResultMsg(Const.MSG_UPLOAD_FAILURE, e.getMessage() ,Const.FAILURE ,null);
        } finally {
            if(inputStream!=null){
                try {
                    inputStream.close();
                } catch (IOException e) {
                    return new ResultMsg(Const.MSG_UPLOAD_FAILURE, e.getMessage() ,Const.FAILURE ,null);
                }
            }
        }
    }

    //导出ecxel
    @RequestMapping(value="/createPlanExcel")
    @Transactional
    public void createPlanExcel(String year, HttpServletResponse response) {
        //生成表格
        try {
            UserContext userContext=SessionHolder.getUserContext();
            String company = userContext.getComCode();//公司
            personPlanService.exportPlan(response, year,company);
        } catch (Exception e) {
            logger.error("导出ecxel失败！", e);
        }

    }
}