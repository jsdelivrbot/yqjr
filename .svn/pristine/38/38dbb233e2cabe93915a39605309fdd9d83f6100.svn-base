package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;
import javax.validation.Valid;

import com.netflix.discovery.converters.Auto;
import com.yqjr.fin.mkmm.sales.services.EventTeamService;
import com.yqjr.fin.mkmm.sales.services.TeamPersonAndEvent;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.EventPerson;
import com.yqjr.fin.mkmm.sales.condition.EventPersonCondition;
import com.yqjr.fin.mkmm.sales.services.EventPersonService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "eventPersons")
@RestController
@RequestMapping(value = "/eventPersons")
public class EventPersonRest extends BaseRest<EventPersonService, EventPerson> {

    //region generated by CodeRobot


    @Autowired
    private TeamPersonAndEvent teamPersonAndEvent;
    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询重大事件表（参数：实体对象属性、pageNo、pageSize）", tags = "重大事件表信息：EventPersonRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<EventPerson> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            EventPersonCondition condition) {

        List<EventPerson> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<EventPerson> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询重大事件表信息（参数：实体对象属性、pageNum、pageSize）", tags = "重大事件表信息：EventPersonRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<EventPerson> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            EventPersonCondition condition) {


        /*******
         * 加入登录用户区域限制
         * **/
        UserContext userContext=SessionHolder.getUserContext();
        condition.setAreaCode(userContext.getAreaCode());

        List<EventPerson> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<EventPerson> pageList = new PageInfo<>(list);
        JQGridJsonResult<EventPerson> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    @ApiOperation(value = "分页查询重大事件表信息（参数：实体对象属性、pageNum、pageSize）", tags = "重大事件表信息：EventPersonRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGridList", method = RequestMethod.GET)
    public JQGridJsonResult<EventPerson> pageByJqGridList(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            EventPersonCondition condition) {


        List<EventPerson> list = eventPersonService.queryEventPerson(condition,PageBounds.of(pageNum,pageSize));

        PageInfo<EventPerson> pageList = new PageInfo<EventPerson>(list);
        JQGridJsonResult<EventPerson> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }



    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    @Autowired
    private EventPersonService eventPersonService;


    //endregion
    @ApiOperation(value = "分页查询重大事件表信息（参数：实体对象属性、pageNo、pageSize）", tags = "重大事件表信息：EventPersonRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByIdJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<EventPerson> pageByIdJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            EventPersonCondition condition) {
        List<EventPerson> list =teamPersonAndEvent .select(condition);

        PageInfo<EventPerson> pageList = new PageInfo<>(list);
        JQGridJsonResult<EventPerson> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }

    /**
     * 人员重大事项查询语句
     * @param id
     * @return
     */
    @RequestMapping(value = "/selectById",method = RequestMethod.GET)
    public ObjectResultResponse<EventPerson> selectById(Long id){
        EventPerson eventPerson = teamPersonAndEvent.selectById(id);
        return ObjectResultResponse.createBySuccess(eventPerson);
    }


    /**
     * 人员重大事项秀修改语句
     * @param eventPerson
     * @param errors
     * @return
     */
    @RequestMapping(value = "/updateById",method = RequestMethod.POST)
    public ObjectResultResponse updateById(@RequestBody EventPerson eventPerson, Errors errors){
        teamPersonAndEvent.updateById(eventPerson);
        return ObjectResultResponse.createBySuccessMessage(Const.MSG_PUT_SUCCESS);
    }

    /**
     * 人员重大事项插入语句
     * @param eventPerson
     * @param errors
     * @return
     */
    @RequestMapping(value = "/insertById",method = RequestMethod.POST)
    public ObjectResultResponse insertById(@RequestBody EventPerson eventPerson, Errors errors){
        teamPersonAndEvent.insertById(eventPerson);
        return ObjectResultResponse.createBySuccessMessage(Const.MSG_ADD_SUCCESS);
    }



}