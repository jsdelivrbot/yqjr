package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;
import javax.validation.Valid;

import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectMenuVo;
import com.yqjr.scfw.common.exception.ValidationException;

import com.yqjr.fin.mkmm.sales.condition.CommodityAcceptanceCondition;
import com.yqjr.fin.mkmm.sales.entity.CommodityAcceptance;
import com.yqjr.fin.mkmm.sales.services.CommodityAcceptanceService;
import com.yqjr.scfw.common.results.ListResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.CommodityBase;
import com.yqjr.fin.mkmm.sales.condition.CommodityBaseCondition;
import com.yqjr.fin.mkmm.sales.services.CommodityBaseService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "commodityBases")
@RestController
@RequestMapping(value = "/commodityBases")
public class CommodityBaseRest extends BaseRest<CommodityBaseService, CommodityBase> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private CommodityBaseService commodityBaseService;

    @ApiOperation(value = "分页查询物料基础表（参数：实体对象属性、pageNum、pageSize）", tags = "物料基础表信息：CommodityBaseRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<CommodityBase> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            CommodityBaseCondition condition) {

        List<CommodityBase> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<CommodityBase> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询物料基础表信息（参数：实体对象属性、pageNum、pageSize）", tags = "物料基础表信息：CommodityBaseRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<CommodityBase> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            CommodityBaseCondition condition) {

        UserContext userContext = SessionHolder.getUserContext();
        condition.setCompany(userContext.getComCode());
        List<CommodityBase> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<CommodityBase> pageList = new PageInfo<>(list);
        JQGridJsonResult<CommodityBase> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    /**
     * 销管二期开发
     * 物料维护--新增功能
     * create by fannaian on 20180903
     * @param commodityBase
     * @param errors
     * @return
     */
    @ApiOperation(value = "分页查询物料基础表信息（参数：实体对象属性）", tags = "物料基础表信息：CommodityBaseRest")
    @RequestMapping(value = "/commodityAdd", method = RequestMethod.POST)
    @ResponseBody
    public ObjectResultResponse<CommodityBase> create(@RequestBody CommodityBase commodityBase, Errors errors) {
        try {
            commodityBaseService.insertCommodity(commodityBase);
            return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, "物料"+commodityBase.getCommodityName()+"添加成功！", null);
        } catch (ValidationException ve) {
            logger.error("添加异常", ve);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_SUCCESS, ve.getMessage(), null);
        } catch (Exception e) {
            logger.error("添加异常", e);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_FAILURE, Const.SYSTEM_ERROR, null);
        }
    }

    /**
     * 销管二期开发
     * 物料维护--删除功能
     * create by fannaian on 20180903
     * @param id
     * @return
     */
    @ApiOperation(value = "分页查询物料基础表信息（参数：实体对象属性）", tags = "物料基础表信息：CommodityBaseRest")
    @RequestMapping(value = "/commodityDel", method = RequestMethod.GET)
    @ResponseBody
    public ObjectResultResponse<CommodityBase> delete(@RequestParam("id") Long id) {

        try {
            commodityBaseService.deleteCommodity(id);
            return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, "物料删除成功！", null);
        } catch (ValidationException ve) {
            logger.error("删除异常", ve);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_SUCCESS, ve.getMessage(), null);
        } catch (Exception e) {
            logger.error("系统异常", e);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_FAILURE, Const.SYSTEM_ERROR, null);
        }
    }

    /**
     * 查询所有物料
     * @return
     */
    @ApiOperation(value = "查询所有物料", tags = "物料基础表信息：CommodityBaseRest")
    @RequestMapping(value = "/selectCommodityBase", method = RequestMethod.GET)
    @ResponseBody
    public ListResultResponse<SelectCodeVo> selectMaterialBaseAll(@RequestParam("code") String code) {

        List<SelectCodeVo> selectCodeVos = commodityBaseService.selectCommodityBaseAll(code);

        ListResultResponse<SelectCodeVo> listResult = new ListResultResponse<SelectCodeVo>();
        listResult.setResult(selectCodeVos);
        listResult.setCode("0000");
        listResult.setIsSuccess(true);
        listResult.setMsg("查询成功");

        return listResult;
    }

    /**
     * 菜单查询物料
     * @return
     */
    @ApiOperation(value = "菜单查询物料")
    @RequestMapping(value = "/selectCommodityMenu", method = RequestMethod.GET)
    @ResponseBody
    public ListResultResponse<SelectMenuVo> selectCommodityMenu() {

        List<SelectMenuVo> selectMenuVos = commodityBaseService.selectCommodityMenu();

        ListResultResponse listResultResponse = new ListResultResponse();
        listResultResponse.setResult(selectMenuVos);
        listResultResponse.setMsg("查询成功！");
        listResultResponse.setIsSuccess(true);
        listResultResponse.setCode("0000");
        return listResultResponse;
    }

}