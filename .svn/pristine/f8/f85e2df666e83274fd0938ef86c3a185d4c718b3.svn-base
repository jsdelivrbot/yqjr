package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.condition.ActiveMainAllListCondition;
import com.yqjr.fin.mkmm.sales.condition.ActiveMainCondition;
import com.yqjr.fin.mkmm.sales.condition.ActiveMainListCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.rest.vo.ActiveMainVo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.mapper.ActiveMainMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
@Transactional(readOnly = true)
public class ActiveMainService extends BaseService<ActiveMainMapper, ActiveMain, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private ActiveMainMapper activeMainMapper;

    public List<ActiveMain> selectByLoanEndTime(String loanEndTime){
       //return  activeMainMapper.selectAll();
       return activeMainMapper.selectByLoanEndTime(loanEndTime);
    }

    public List<Map<String,Object>> getActiveMatchData(Long activeId){
        return  activeMainMapper.getActiveMatchData(activeId);
    }



    /**
     * 根据code查活动主表
     * create by fanna 20180604
     * @param activeCode
     * @return
     */
    public List<ActiveMain>  selectActiveMainByCode(String activeCode,String company){

        return activeMainMapper.selectActiveMainByCode(activeCode,company);
    }

    /**
     * 根据条件查询活动制定
     * @param condition
     * @param of
     * @return
     */
    public List<ActiveMainVo> selectMainActives(ActiveMainListCondition condition, PageBounds of) {
        List<ActiveMainVo> activeMainVos =  activeMainMapper.selectMainActives(condition,of);
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String systemTime = format.format(new Date());
        for (int i = 0 ; i < activeMainVos.size() ; i++){
            activeMainVos.get(i).setSystemTime(systemTime);
        }
        return activeMainVos;
    }


    /**
     * 根据条件查询综合活动信息
     * @param condition
     * @param of
     * @return
     */
    public List<ActiveMainVo> selectMainAllActives(ActiveMainAllListCondition condition, PageBounds of) {
        List<ActiveMainVo> activeMainVos =  activeMainMapper.selectMainAllActives(condition,of);
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String systemTime = format.format(new Date());
        for (int i = 0 ; i < activeMainVos.size() ; i++){
            if (activeMainVos.get(i).getBillStatus() == null || "".equals(activeMainVos.get(i).getBillStatus())){
                activeMainVos.get(i).setBillStatus("00");
            }
            activeMainVos.get(i).setSystemTime(systemTime);
        }
        return activeMainVos;
    }





    /**
     * 活动附加贷表实体转换
     * @param activeAdditionReview
     * @return
     */
    public ActiveAddition reviewToActiveAddition(ActiveAdditionReview activeAdditionReview){
        ActiveAddition activeAddition = new ActiveAddition();
        if (activeAdditionReview != null) {
            activeAddition.setId(activeAdditionReview.getId());
            //activeReviewId;
            activeAddition.setActiveCode(activeAdditionReview.getActiveCode());
            activeAddition.setAdditionalCode(activeAdditionReview.getAdditionalCode());
            activeAddition.setAdditionalName(activeAdditionReview.getAdditionalName());
            activeAddition.setStartTime(activeAdditionReview.getStartTime());
            activeAddition.setCreateTime(activeAdditionReview.getCreateTime());
            activeAddition.setModifyTime(activeAdditionReview.getModifyTime());
            activeAddition.setCreator(activeAdditionReview.getCreator());
            activeAddition.setModifier(activeAdditionReview.getModifier());
            activeAddition.setCompany(activeAdditionReview.getCompany());
        }
        return activeAddition;
    }

    /**
     * 活动区域表实体转换
     * @param activeAreaReview
     * @return
     */
    public ActiveArea reviewToActiveArea(ActiveAreaReview activeAreaReview){
        ActiveArea activeArea = new ActiveArea();
        if (activeAreaReview != null) {
            activeArea.setId(activeAreaReview.getId());
            //activeReviewId
            activeArea.setActiveCode(activeAreaReview.getActiveCode());
            activeArea.setSerialNo(activeAreaReview.getSerialNo());
            activeArea.setAreaCode(activeAreaReview.getAreaCode());
            activeArea.setAreaName(activeAreaReview.getAreaName());
            activeArea.setProvinceCode(activeAreaReview.getProvinceCode());
            activeArea.setProvinceName(activeAreaReview.getProvinceName());
            activeArea.setCityCode(activeAreaReview.getCityCode());
            activeArea.setCityName(activeAreaReview.getCityName());
            activeArea.setStartTime(activeAreaReview.getStartTime());
            activeArea.setCreateTime(activeAreaReview.getCreateTime());
            activeArea.setModifyTime(activeAreaReview.getModifyTime());
            activeArea.setCreator(activeAreaReview.getCreator());
            activeArea.setModifier(activeAreaReview.getModifier());
            activeArea.setCompany(activeAreaReview.getCompany());
        }
        return activeArea;
    }

    /**
     * 活动业务实体转换
     * @param activeBusinessReview
     * @return
     */
    public ActiveBusiness reviewToActiveBusiness(ActiveBusinessReview activeBusinessReview){
        ActiveBusiness activeBusiness = new ActiveBusiness();
        if (activeBusinessReview != null){
            activeBusiness.setId(activeBusinessReview.getId());
            //activeReviewId
            activeBusiness.setActiveCode(activeBusinessReview.getActiveCode());
            activeBusiness.setBusinessCode(activeBusinessReview.getBusinessCode());
            activeBusiness.setBusinessName(activeBusinessReview.getBusinessName());
            activeBusiness.setStartTime(activeBusinessReview.getStartTime());
            activeBusiness.setCreateTime(activeBusinessReview.getCreateTime());
            activeBusiness.setModifyTime(activeBusinessReview.getModifyTime());
            activeBusiness.setCreator(activeBusinessReview.getCreator());
            activeBusiness.setModifier(activeBusinessReview.getModifier());
            activeBusiness.setCompany(activeBusinessReview.getCompany());
        }
        return activeBusiness;
    }

    /**
     * 活动品牌实体转换
     * @param activeCarReview
     * @return
     */
    public ActiveCar reviewToActiveCar(ActiveCarReview activeCarReview){
        ActiveCar activeCar = new ActiveCar();
        if (activeCarReview != null){
            activeCar.setId(activeCarReview.getId());
            //activeReviewId;
            activeCar.setActiveCode(activeCarReview.getActiveCode());
            activeCar.setSerialNo(activeCarReview.getSerialNo());
            activeCar.setBrandsCode(activeCarReview.getBrandsCode());
            activeCar.setBrandsName(activeCarReview.getBrandsName());
            activeCar.setSeriesCode(activeCarReview.getSeriesCode());
            activeCar.setSeriesName(activeCarReview.getSeriesName());
            activeCar.setModerCode(activeCarReview.getModerCode());
            activeCar.setModerName(activeCarReview.getModerName());
            activeCar.setStartTime(activeCarReview.getStartTime());
            activeCar.setCreateTime(activeCarReview.getCreateTime());
            activeCar.setModifyTime(activeCarReview.getModifyTime());
            activeCar.setCreator(activeCarReview.getCreator());
            activeCar.setModifier(activeCarReview.getModifier());
            activeCar.setCompany(activeCarReview.getCompany());
        }
        return activeCar;
    }

    /**
     * 活动经销商实体转换
     * @param activeDealerReview
     * @return
     */
    public ActiveDealer reviewToActiveDealer(ActiveDealerReview activeDealerReview){
        ActiveDealer activeDealer = new ActiveDealer();
        if (activeDealerReview != null) {
            activeDealer.setId(activeDealerReview.getId());
            //activeReviewId;
            activeDealer.setActiveCode(activeDealerReview.getActiveCode());
            activeDealer.setDealerCode(activeDealerReview.getDealerCode());
            activeDealer.setDealerName(activeDealerReview.getDealerName());
            activeDealer.setActiveNumber(activeDealerReview.getActiveNumber());
            activeDealer.setStartTime(activeDealerReview.getStartTime());
            activeDealer.setCreateTime(activeDealerReview.getCreateTime());
            activeDealer.setModifyTime(activeDealerReview.getModifyTime());
            activeDealer.setCreator(activeDealerReview.getCreator());
            activeDealer.setModifier(activeDealerReview.getModifier());
            activeDealer.setCompany(activeDealerReview.getCompany());
        }
        return activeDealer;
    }

    /**
     * 活动主表实体转换
     * @param activeMainReview
     * @return
     */
    public ActiveMain reviewToActiveMain(ActiveMainReview activeMainReview){
        ActiveMain activeMain = new ActiveMain();
        if (activeMainReview != null) {
            activeMain.setId(activeMainReview.getId());
            activeMain.setActiveCode(activeMainReview.getActiveCode());
            activeMain.setActiveName(activeMainReview.getActiveName());
            activeMain.setActiveStartime(activeMainReview.getActiveStartime());
            activeMain.setActiveEndtime(activeMainReview.getActiveEndtime());
            activeMain.setLoanStartime(activeMainReview.getLoanStartime());
            activeMain.setLoanEndtime(activeMainReview.getLoanEndtime());
            activeMain.setPatmentBegin(activeMainReview.getPatmentBegin());
            activeMain.setPatmentEnd(activeMainReview.getPatmentEnd());
            activeMain.setCarReg(activeMainReview.getCarReg());
            activeMain.setLoanTermBegin(activeMainReview.getLoanTermBegin());
            activeMain.setLoanTermEnd(activeMainReview.getLoanTermEnd());
            activeMain.setLoanAmtBegin(activeMainReview.getLoanAmtBegin());
            activeMain.setLoanAmtEnd(activeMainReview.getLoanAmtEnd());
            activeMain.setAvtiveCriterion(activeMainReview.getAvtiveCriterion());
            activeMain.setAdditionFlag(activeMainReview.getAdditionFlag());
            activeMain.setAdditionAmtBegin(activeMainReview.getAdditionAmtBegin());
            activeMain.setAdditionAmtEnd(activeMainReview.getAdditionAmtEnd());
            activeMain.setActiveStatus(activeMainReview.getActiveStatus());
            activeMain.setCreateTime(activeMainReview.getCreateTime());
            activeMain.setModifyTime(activeMainReview.getModifyTime());
            activeMain.setStartTime(activeMainReview.getStartTime());
            activeMain.setAnnex(activeMainReview.getAnnex());
            activeMain.setCreator(activeMainReview.getCreator());
            activeMain.setModifier(activeMainReview.getModifier());
            activeMain.setCompany(activeMainReview.getCompany());
            activeMain.setPaymentStatus(activeMainReview.getPaymentStatus());
            activeMain.setRemark(activeMainReview.getRemark());
            activeMain.setExpectedCount(activeMainReview.getExpectedCount());
            activeMain.setInputDeale(activeMainReview.getInputDeale());
            activeMain.setAdditionalId(activeMainReview.getAdditionalId());
            activeMain.setAreaCode(activeMainReview.getAreaCode());
            activeMain.setAreaName(activeMainReview.getAreaName());
            activeMain.setInputArea(activeMainReview.getInputArea());
        }
        return activeMain;
    }

    /**
     * 营销活动实体转换
     * @param activeMarketingReview
     * @return
     */
    public ActiveMarketing reviewToActiveMarketing(ActiveMarketingReview activeMarketingReview){
        ActiveMarketing activeMarketing = new ActiveMarketing();
        if (activeMarketingReview != null) {
            activeMarketing.setId(activeMarketingReview.getId());
            //activeReviewId;
            activeMarketing.setActiveCode(activeMarketingReview.getActiveCode());
            activeMarketing.setMarketingCode(activeMarketingReview.getMarketingCode());
            activeMarketing.setMarketingName(activeMarketingReview.getMarketingName());
            activeMarketing.setStartTime(activeMarketingReview.getStartTime());
            activeMarketing.setCreateTime(activeMarketingReview.getCreateTime());
            activeMarketing.setModifyTime(activeMarketingReview.getModifyTime());
            activeMarketing.setCreator(activeMarketingReview.getCreator());
            activeMarketing.setModifier(activeMarketingReview.getModifier());
            activeMarketing.setCompany(activeMarketingReview.getCompany());
        }
        return activeMarketing;
    }

    /**
     * 活动产品实体转换
     * @param activeProdReview
     * @return
     */
    public ActiveProd reviewToActiveProd(ActiveProdReview activeProdReview){
        ActiveProd activeProd = new ActiveProd();
        if (activeProdReview != null) {
            activeProd.setId(activeProdReview.getId());
            //activeReviewId;
            activeProd.setActiveCode(activeProdReview.getActiveCode());
            activeProd.setProdCode(activeProdReview.getProdCode());
            activeProd.setProdName(activeProdReview.getProdName());
            activeProd.setStartTime(activeProdReview.getStartTime());
            activeProd.setCreateTime(activeProdReview.getCreateTime());
            activeProd.setModifyTime(activeProdReview.getModifyTime());
            activeProd.setCreator(activeProdReview.getCreator());
            activeProd.setModifier(activeProdReview.getModifier());
            activeProd.setProdType(activeProdReview.getProdType());
            activeProd.setCompany(activeProdReview.getCompany());
        }
        return activeProd;
    }

    /**
     * 活动附加贷表实体转换
     * @param activeAddition
     * @return
     */
    public ActiveAdditionHis formalToActiveAdditionHis(ActiveAddition activeAddition){
        ActiveAdditionHis activeAdditionHis = new ActiveAdditionHis();
        if (activeAddition != null) {
            activeAdditionHis.setId(activeAddition.getId());
            //activeHisId;
            activeAdditionHis.setActiveCode(activeAddition.getActiveCode());
            activeAdditionHis.setAdditionalCode(activeAddition.getAdditionalCode());
            activeAdditionHis.setAdditionalName(activeAddition.getAdditionalName());
            activeAdditionHis.setStartTime(activeAddition.getStartTime());
            activeAdditionHis.setCreateTime(activeAddition.getCreateTime());
            activeAdditionHis.setModifyTime(activeAddition.getModifyTime());
            activeAdditionHis.setCreator(activeAddition.getCreator());
            activeAdditionHis.setModifier(activeAddition.getModifier());
            activeAdditionHis.setCompany(activeAddition.getCompany());
        }
        return activeAdditionHis;
    }

    /**
     * 活动区域表实体转换
     * @param activeArea
     * @return
     */
    public ActiveAreaHis formalToActiveAreaHis(ActiveArea activeArea){
        ActiveAreaHis activeAreaHis = new ActiveAreaHis();
        if (activeArea != null) {
            activeAreaHis.setId(activeArea.getId());
            //activeHisId
            activeAreaHis.setActiveCode(activeArea.getActiveCode());
            activeAreaHis.setSerialNo(activeArea.getSerialNo());
            activeAreaHis.setAreaCode(activeArea.getAreaCode());
            activeAreaHis.setAreaName(activeArea.getAreaName());
            activeAreaHis.setProvinceCode(activeArea.getProvinceCode());
            activeAreaHis.setProvinceName(activeArea.getProvinceName());
            activeAreaHis.setCityCode(activeArea.getCityCode());
            activeAreaHis.setCityName(activeArea.getCityName());
            activeAreaHis.setStartTime(activeArea.getStartTime());
            activeAreaHis.setCreateTime(activeArea.getCreateTime());
            activeAreaHis.setModifyTime(activeArea.getModifyTime());
            activeAreaHis.setCreator(activeArea.getCreator());
            activeAreaHis.setModifier(activeArea.getModifier());
            activeAreaHis.setCompany(activeArea.getCompany());
        }
        return activeAreaHis;
    }

    /**
     * 活动业务实体转换
     * @param activeBusiness
     * @return
     */
    public ActiveBusinessHis formalToActiveBusinessHis(ActiveBusiness activeBusiness){
        ActiveBusinessHis activeBusinessHis = new ActiveBusinessHis();
        if (activeBusiness != null) {
            activeBusinessHis.setId(activeBusiness.getId());
            //activeHisId
            activeBusinessHis.setActiveCode(activeBusiness.getActiveCode());
            activeBusinessHis.setBusinessCode(activeBusiness.getBusinessCode());
            activeBusinessHis.setBusinessName(activeBusiness.getBusinessName());
            activeBusinessHis.setStartTime(activeBusiness.getStartTime());
            activeBusinessHis.setCreateTime(activeBusiness.getCreateTime());
            activeBusinessHis.setModifyTime(activeBusiness.getModifyTime());
            activeBusinessHis.setCreator(activeBusiness.getCreator());
            activeBusinessHis.setModifier(activeBusiness.getModifier());
        }
        return activeBusinessHis;
    }

    /**
     * 活动品牌实体转换
     * @param activeCar
     * @return
     */
    public ActiveCarHis formalToActiveCarHis(ActiveCar activeCar){
        ActiveCarHis activeCarHis = new ActiveCarHis();
        if (activeCar != null) {
            activeCarHis.setId(activeCar.getId());
            //activeHisId;
            activeCarHis.setActiveCode(activeCar.getActiveCode());
            activeCarHis.setSerialNo(activeCar.getSerialNo());
            activeCarHis.setBrandsCode(activeCar.getBrandsCode());
            activeCarHis.setBrandsName(activeCar.getBrandsName());
            activeCarHis.setSeriesCode(activeCar.getSeriesCode());
            activeCarHis.setSeriesName(activeCar.getSeriesName());
            activeCarHis.setModerCode(activeCar.getModerCode());
            activeCarHis.setModerName(activeCar.getModerName());
            activeCarHis.setStartTime(activeCar.getStartTime());
            activeCarHis.setCreateTime(activeCar.getCreateTime());
            activeCarHis.setModifyTime(activeCar.getModifyTime());
            activeCarHis.setCreator(activeCar.getCreator());
            activeCarHis.setModifier(activeCar.getModifier());
            activeCarHis.setCompany(activeCar.getCompany());
        }
        return activeCarHis;
    }

    /**
     * 活动经销商实体转换
     * @param activeDealer
     * @return
     */
    public ActiveDealerHis formalToActiveDealerHis(ActiveDealer activeDealer){
        ActiveDealerHis activeDealerHis = new ActiveDealerHis();
        if (activeDealer != null) {
            activeDealerHis.setId(activeDealer.getId());
            //activeHisId;
            activeDealerHis.setActiveCode(activeDealer.getActiveCode());
            activeDealerHis.setDealerCode(activeDealer.getDealerCode());
            activeDealerHis.setDealerName(activeDealer.getDealerName());
            activeDealerHis.setActiveNumber(activeDealer.getActiveNumber());
            activeDealerHis.setStartTime(activeDealer.getStartTime());
            activeDealerHis.setCreateTime(activeDealer.getCreateTime());
            activeDealerHis.setModifyTime(activeDealer.getModifyTime());
            activeDealerHis.setCreator(activeDealer.getCreator());
            activeDealerHis.setModifier(activeDealer.getModifier());
            activeDealerHis.setCompany(activeDealer.getCompany());
        }
        return activeDealerHis;
    }

    /**
     * 活动主表实体转换
     * @param activeMain
     * @return
     */
    public ActiveMainHis formalToActiveMainHis(ActiveMain activeMain){
        ActiveMainHis activeMainHis = new ActiveMainHis();
        if (activeMain != null) {
            activeMainHis.setId(activeMain.getId());
            activeMainHis.setActiveCode(activeMain.getActiveCode());
            activeMainHis.setActiveName(activeMain.getActiveName());
            activeMainHis.setActiveStartime(activeMain.getActiveStartime());
            activeMainHis.setActiveEndtime(activeMain.getActiveEndtime());
            activeMainHis.setLoanStartime(activeMain.getLoanStartime());
            activeMainHis.setLoanEndtime(activeMain.getLoanEndtime());
            activeMainHis.setPatmentBegin(activeMain.getPatmentBegin());
            activeMainHis.setPatmentEnd(activeMain.getPatmentEnd());
            activeMainHis.setCarReg(activeMain.getCarReg());
            activeMainHis.setLoanTermBegin(activeMain.getLoanTermBegin());
            activeMainHis.setLoanTermEnd(activeMain.getLoanTermEnd());
            activeMainHis.setLoanAmtBegin(activeMain.getLoanAmtBegin());
            activeMainHis.setLoanAmtEnd(activeMain.getLoanAmtEnd());
            activeMainHis.setAvtiveCriterion(activeMain.getAvtiveCriterion());
            activeMainHis.setAdditionFlag(activeMain.getAdditionFlag());
            activeMainHis.setAdditionAmtBegin(activeMain.getAdditionAmtBegin());
            activeMainHis.setAdditionAmtEnd(activeMain.getAdditionAmtEnd());
            activeMainHis.setActiveStatus(activeMain.getActiveStatus());
            activeMainHis.setCreateTime(activeMain.getCreateTime());
            activeMainHis.setModifyTime(activeMain.getModifyTime());
            activeMainHis.setStartTime(activeMain.getStartTime());
            activeMainHis.setAnnex(activeMain.getAnnex());
            activeMainHis.setCreator(activeMain.getCreator());
            activeMainHis.setModifier(activeMain.getModifier());
            activeMainHis.setCompany(activeMain.getCompany());
            activeMainHis.setPaymentStatus(activeMain.getPaymentStatus());
            activeMainHis.setRemark(activeMain.getRemark());
            activeMainHis.setExpectedCount(activeMain.getExpectedCount());
            //activeMainReviewId;
            //validStatus;
            activeMainHis.setAdditionalId(activeMain.getAdditionalId());
            activeMainHis.setInputDeale(activeMain.getInputDeale());
            activeMainHis.setAreaCode(activeMain.getAreaCode());
            activeMainHis.setAreaName(activeMain.getAreaName());
        }
        return activeMainHis;
    }

    /**
     * 营销活动实体转换
     * @param activeMarketing
     * @return
     */
    public ActiveMarketingHis formalToActiveMarketingHis(ActiveMarketing activeMarketing){
        ActiveMarketingHis activeMarketingHis = new ActiveMarketingHis();
        if (activeMarketing != null) {
            activeMarketingHis.setId(activeMarketing.getId());
            //activeHisId;
            activeMarketingHis.setActiveCode(activeMarketing.getActiveCode());
            activeMarketingHis.setMarketingCode(activeMarketing.getMarketingCode());
            activeMarketingHis.setMarketingName(activeMarketing.getMarketingName());
            activeMarketingHis.setStartTime(activeMarketing.getStartTime());
            activeMarketingHis.setCreateTime(activeMarketing.getCreateTime());
            activeMarketingHis.setModifyTime(activeMarketing.getModifyTime());
            activeMarketingHis.setCreator(activeMarketing.getCreator());
            activeMarketingHis.setModifier(activeMarketing.getModifier());
            activeMarketingHis.setCompany(activeMarketing.getCompany());
        }
        return activeMarketingHis;
    }

    /**
     * 活动产品实体转换
     * @param activeProd
     * @return
     */
    public ActiveProdHis formalToActiveProdHis(ActiveProd activeProd){
        ActiveProdHis activeProdHis = new ActiveProdHis();
        if (activeProd != null) {
            activeProdHis.setId(activeProd.getId());
            //activeHisId;
            activeProdHis.setActiveCode(activeProd.getActiveCode());
            activeProdHis.setProdCode(activeProd.getProdCode());
            activeProdHis.setProdName(activeProd.getProdName());
            activeProdHis.setStartTime(activeProd.getStartTime());
            activeProdHis.setCreateTime(activeProd.getCreateTime());
            activeProdHis.setModifyTime(activeProd.getModifyTime());
            activeProdHis.setCreator(activeProd.getCreator());
            activeProdHis.setModifier(activeProd.getModifier());
            activeProdHis.setProdType(activeProd.getProdType());
            activeProdHis.setCompany(activeProd.getCompany());
        }
        return activeProdHis;
    }

    public Long insertAndReturnId(ActiveMain activeMain){
        activeMainMapper.insertAndReturnId(activeMain);
        return activeMain.getId();
    }

    public void patchByActiveCode(ActiveMain activeMain) {
        activeMainMapper.patchByActiveCode(activeMain);
    }

    public List<ActiveMain> queryActiveMains(ActiveMainCondition activeMainCondition) {
        return activeMainMapper.queryActiveMains(activeMainCondition);
    }
}