package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.PersonSaleCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.PersonSaleMapper;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonTrackVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonVo;
import com.yqjr.fin.mkmm.sales.vo.domin.TeamTrackVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WriteException;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.*;

@Service
@Transactional
public class PersonSaleService extends BaseService<PersonSaleMapper, PersonSale, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private PersonSaleMapper personSaleMapper;
    @Autowired
    private PersonPlanService personPlanService;
    @Autowired
    private PersonTeamService personTeamService;

    @Transactional
    public List<PersonTrackVo> sumNumber(PersonSaleCondition condition) throws ParseException {
        String year = condition.getYear();
        String month = condition.getMonth();
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        condition.setCompany(company);
        List<PersonTrackVo> vo = new ArrayList<>();
        //月份list
        List<String> monthList =monthList();
        //预算list
        List<Long> planList = queryPlanDet(condition);
        //实际销售额list
        List<Long> actualList = queryActualPerson(condition);
        //达成率
        List<Double> planRateList = queryPlanRate(planList,actualList);
        //序时进度
        Double rate = DateUtils.queryRate();
        //差值
        List<Double> rateCalList = queryRateCal(planRateList,rate);
        //格式化小数
        DecimalFormat df = new DecimalFormat("######0.00");

        for(int i=0;i<monthList.size();i++) {
            PersonTrackVo personTrackVo = new PersonTrackVo();
            personTrackVo.setMonth(monthList.get(i));
            personTrackVo.setPlanNum(planList.get(i)+"");
            personTrackVo.setActualNum(actualList.get(i)+"");
            personTrackVo.setPlanRate(getPrettyNumber(df.format(planRateList.get(i)*100)+"")+"%");
            personTrackVo.setRate(getPrettyNumber(df.format(rate*100)+"")+"%");
            personTrackVo.setRateCal(getPrettyNumber(df.format(rateCalList.get(i)*100)+"")+"%");
            vo.add(personTrackVo);
        }
        return vo;
    }

    //预算list
    public List<Long> queryPlanDet(PersonSaleCondition condition) {
        PersonPlan personPlan = new PersonPlan();
        //查询条件年份
        String year = condition.getYear();
        personPlan.setYear(year);
        //查询条件编号
        String personCode = condition.getPersonCode();
        personPlan.setPersonCode(personCode);
        //查询条件品牌
        String brands = condition.getBrands();
//        personPlan.setBrands(brands);
        personPlan.setCompany(condition.getCompany());//公司
        //查预算
        List<Long> amountList =  queryPlans(personPlan);

        return amountList;
    }

    //查实际销售
    public List<Long> queryActualPerson(PersonSaleCondition condition) {
        PersonSale personSale = new PersonSale();
        //查询条件年份
        String year = condition.getYear();
        personSale.setYear(year);
        //查询条件编号
        String personNo = condition.getPersonCode();
        personSale.setPersonCode(personNo);
        //查询条件品牌
        String brands = condition.getBrands();
//        personSale.setBrands(brands);
        personSale.setCompany(condition.getCompany());
        //实际完成的list
        List<Long> amountList = queryActuals(personSale);
        return amountList;
    }

    //计算达成率
    public List<Double> queryPlanRate(List<Long> planList, List<Long> actualList) {
        //达成率的list
        List<Double> rateList = new ArrayList<>();
        for (int i=0;i<planList.size();i++) {
            long plan = planList.get(i);
            long actual = actualList.get(i);

            if(plan == 0 && actual == 0) {//都等于0
                Double planRate = 0.00;
                rateList.add(planRate);
            } else if(plan == 0) {//分母为0
                Double planRate = actual*1.00 ;
                rateList.add(planRate);
            } else {
                Double planRate = actual*1.00/plan;
                rateList.add(planRate);
            }
        }
        return rateList;
    }

    //达成率与序时进度差值
    public List<Double> queryRateCal(List<Double> planRateList, Double rate){
        List<Double> calList = new ArrayList<>();

        for(int i=0;i<planRateList.size();i++) {
            Double planRate = planRateList.get(i);
            Double rateCal = planRate-rate;
            //格式化小数
//            DecimalFormat df = new DecimalFormat("0.00");
            calList.add(rateCal);
        }
        return calList;
    }

    //查实际完成
    public List<Long> queryActuals(PersonSale personSale) {
        List<Long> amountList = new ArrayList<>();
        //每个月
        for(int i=1;i<13;i++) {
            String month = i+"";
            //查人的计划
            personSale.setMonth(month);
            Long amounts =  personSaleMapper.selectActualByMonth(personSale);
            if(null == amounts ) {
                amountList.add(new Long((long)0));
            } else {
                amountList.add(amounts);
            }
        }
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2));//第一季度
        amountList.add(amountList.get(3)+amountList.get(4)+amountList.get(5));//第二季度
        amountList.add(amountList.get(6)+amountList.get(7)+amountList.get(8));//第三季度
        amountList.add(amountList.get(9)+amountList.get(10)+amountList.get(11));//第四季度
        //合计
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2)+amountList.get(3)+amountList.get(4)+amountList.get(5)
                +amountList.get(6)+amountList.get(7)+amountList.get(8)+amountList.get(9)+amountList.get(10)+amountList.get(11));

        return amountList;
    }



    //查预算
    public List<Long> queryPlans(PersonPlan personPlan) {
        //预算的list
        List<Long> amountList = new ArrayList<>();
        for(int i=1;i<13;i++) {
            String month = i+"";
            //查人的计划
            personPlan.setMonth(month);
            Long amounts =  personPlanService.selectPlanByMonth(personPlan);
            if(null == amounts) {
                amountList.add(new Long((long)0));
            } else {
                amountList.add(amounts);
            }
        }
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2));//第一季度
        amountList.add(amountList.get(3)+amountList.get(4)+amountList.get(5));//第二季度
        amountList.add(amountList.get(6)+amountList.get(7)+amountList.get(8));//第三季度
        amountList.add(amountList.get(9)+amountList.get(10)+amountList.get(11));//第四季度
        //合计
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2)+amountList.get(3)+amountList.get(4)+amountList.get(5)
                +amountList.get(6)+amountList.get(7)+amountList.get(8)+amountList.get(9)+amountList.get(10)+amountList.get(11));

        return amountList;
    }

    //月份的list
    public List<String> monthList() {
        List<String> list = new ArrayList<>();
        list.add("一月");
        list.add("二月");
        list.add("三月");
        list.add("四月");
        list.add("五月");
        list.add("六月");
        list.add("七月");
        list.add("八月");
        list.add("九月");
        list.add("十月");
        list.add("十一月");
        list.add("十二月");
        list.add("第一季度");
        list.add("第二季度");
        list.add("第三季度");
        list.add("第四季度");
        list.add("合计");
        return list;
    }

    //更新mkmm_person_sales
    public void updatePersonSale(Date date, int year, int month) {
        //先查有多少人
        List<String> personList = personSaleMapper.selectAllPersonCode();
        for (int i=0;i<personList.size();i++) {
            String personCode = personList.get(i);
            //获得一个品牌的List
            List<String> brandsList = personPlanService.createBrandsList();
            for(int j=0;j<brandsList.size();j++) {
                String brands = brandsList.get(j);
                //计算每个人每天发生的数量
                Long amount = personSaleMapper.getPersonSaleDaily(personCode, date, brands);
                if(null == amount) {
                    amount = (long) 0;
                }
                PersonSale personSale = new PersonSale();
                personSale.setPersonCode(personCode);
                personSale.setYear(year+"");
                personSale.setMonth(month+"");
                personSale.setBrands(brands);
                //查询每个人已完成台数
                Long oldAmount = personSaleMapper.qryOldPersonSale(personSale);
                if(null == oldAmount ) {
                    oldAmount = (long)0;
                }
                //查询是否有记录
                List<PersonSale> PersonSales = personSaleMapper.selectPersonExist(personSale);
                Long newAmount = amount + oldAmount;
                personSale.setAmount(newAmount);
                if(PersonSales.size()>0) {//存在则更新
                    personSaleMapper.updatePersonSale(personSale);
                } else {//不存在则插入
                    super.insert(personSale);
                }
            }
        }
    }

    //查询每个人已有的业绩
    public Long queryMonthPersonSale(String personCode, int year, int month, String brands) {
        PersonSale personSale = new PersonSale();
        personSale.setPersonCode(personCode);
        personSale.setYear(year+"");
        personSale.setMonth(month+"");
        personSale.setBrands(brands);
        Long amount = personSaleMapper.qryOldPersonSale(personSale);
        if(null == amount ) {
            amount = (long)0;
        }
        return amount;
    }

    //计算年台数实际达成量
    public Long queryYearPersonSale(String personCode, String brands, int year){
        PersonSale personSale = new PersonSale();
        personSale.setPersonCode(personCode);
        personSale.setBrands(brands);
        personSale.setYear(year+"");
        Long amount = personSaleMapper.qryOldPersonSale(personSale);
        if(null == amount ) {
            amount = (long)0;
        }
        return amount;
    }

    //获取每个人的实际达成数量
    public Long querySumPersonSale(String personCode,String brands,String year,String month){
        Long amount = personSaleMapper.querySumPersonSale(personCode,brands,year,month);

        return amount;
    }

    //去零
    public String getPrettyNumber(String number) {
        return BigDecimal.valueOf(Double.parseDouble(number))
                .stripTrailingZeros().toPlainString();
    }

//    //计算序时进度
//    public Double judgeRate(String year) throws ParseException {
//        Double rate;
//        if (null == year || "".equals(year)) {
//            rate = 0.00;
//        }
//        //查询的年
//        int nowYear = Integer.parseInt(year);
//        Date date = new Date();
//        Calendar calendar = new GregorianCalendar();
//        calendar.setTime(date);
//        //当前时间的年
//        int now = calendar.get(Calendar.YEAR);
//        if(nowYear<now) {
//            rate = 100.00;
//        } else if(nowYear == now) {
//            rate = DateUtils.queryRate();
//        } else {
//            rate = 0.00;
//        }
//        return rate;
//    }

    //查询人姓名
    public String qryPersonByCode(String personCode){
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        String areaCode ;
        if(UserRoleHelp.isAdmin() || UserRoleHelp.isMarketingWorkers() || UserRoleHelp.isMarketingManager()) {
            areaCode = "";
        } else {
            areaCode = userContext.getAreaCode();
        }
        PersonVo pv = new PersonVo();
        pv.setCompany(company);
        pv.setPersonCode(personCode);

        pv.setAreaCode(areaCode);
        String personName = personSaleMapper.qryPersonByCode(pv);
        if(null == personName || "".equals(personName)){
            return "";
        }
        return personName;
    }

    /***
     * 创建表头
     * @param sheet
     */
    private void createTitle(HSSFSheet sheet, String [] cellValues)
    {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 15*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }

    //判断人员是否存在
    public void queryPersonExitByCode(String personCode) throws ValidationException {
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        List<PersonSale> personList = personSaleMapper.queryPersonExitByCode(personCode,company);
        if(personList.size() == 0) {
            throw new ValidationException("人员不存在！");
        }
    }

    //人员计划导出
    public void personSaleExport(PersonSaleCondition condition, HttpServletResponse response) throws ParseException, IOException {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("人员预算与计划跟踪");
        String [] cellValues = {"月份","预算台数","实际台数","达成率","序时进度","达成率与序时进度差值"};
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        condition.setCompany(company);
        List<PersonTrackVo> list = sumNumber(condition);
        //创建表头
        createTitle(sheet,cellValues);
        //插入数据
        int i = 1;
        for(PersonTrackVo vo :list) {
            HSSFRow row =  sheet.createRow(i);
            row.createCell(0).setCellValue(vo.getMonth());
            row.createCell(1).setCellValue(vo.getPlanNum());
            row.createCell(2).setCellValue(vo.getActualNum());
            row.createCell(3).setCellValue(vo.getPlanRate());
            row.createCell(4).setCellValue(vo.getRate());
            row.createCell(5).setCellValue(vo.getRateCal());
            i++;
        }
        String fileName = "personSale.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());
    }

}