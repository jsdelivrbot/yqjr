package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.condition.CommodityBaseCondition;
import com.yqjr.fin.mkmm.sales.condition.MaterialBaseCondition;
import com.yqjr.fin.mkmm.sales.entity.MaterialBaseHis;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.MaterialBase;
import com.yqjr.fin.mkmm.sales.mapper.MaterialBaseMapper;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import com.yqjr.scfw.common.utils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
@Transactional(readOnly = true)
public class MaterialBaseService extends BaseService<MaterialBaseMapper, MaterialBase, Long> {

    //region generated by CodeRobot
    @Autowired
    MaterialBaseHisService materialBaseHisService;
    @Autowired
    MaterialBaseMapper materialBaseMapper;

    /**
     * 查询该素材名称是否存在
     * @param materialBase
     * @return
     */
    public MaterialBase selectByMaterialName(MaterialBase materialBase){
        return materialBaseMapper.selectByMaterialName(materialBase);
    }

    @Transactional(rollbackFor = { Exception.class })
    public void insertToHis(MaterialBase condition){
        MaterialBaseHis materialBaseHis = new MaterialBaseHis();
        BeanUtils.copyProperties(materialBaseHis,condition);
        materialBaseHisService.insert(materialBaseHis);
    }

    /**
     * 查询所有素材
     * @return
     */
    public List<SelectCodeVo> selectMaterialBaseAll() {
        UserContext userContext = SessionHolder.getUserContext();
        MaterialBaseCondition materialBaseCondition = new MaterialBaseCondition();
        materialBaseCondition.setCompany(userContext.getComCode());
        List<MaterialBase> materialBases = this.selectList(materialBaseCondition);

        List<SelectCodeVo> selectCodeVos = new ArrayList<>();

        for(MaterialBase materialBase : materialBases) {
            SelectCodeVo selectCodeVo = new SelectCodeVo();
            selectCodeVo.setHeadLetter("");
            selectCodeVo.setLabel(materialBase.getMaterialName());
            selectCodeVo.setValue(materialBase.getMaterialCode());
            selectCodeVos.add(selectCodeVo);
        }
        return selectCodeVos;
    }

    /**
     * 素材新增
     */
    @Transactional(rollbackFor = {Exception.class})
    public void insertMsg(MaterialBase condition){
        MaterialBase materialBase = new MaterialBase();
        materialBase.setMaterialName(condition.getMaterialName());
        UserContext userContext = SessionHolder.getUserContext();
        materialBase.setCompany(userContext.getComCode());
        MaterialBase materialBase1 = this.selectByMaterialName(materialBase);
        if(materialBase1 != null){
            throw new ValidationException("该素材名称已经被占用");
        }
        String materialCode = makeMaterialCode(userContext.getComCode());
        condition.setMaterialCode(materialCode);
        condition.setCompany(userContext.getComCode());
        this.insert(condition);
    }

    /**
     * 生成素材编码
     * @param company
     * @return
     */
    public String makeMaterialCode(String company){
        MaterialBaseCondition mbc = new MaterialBaseCondition();
        mbc.setCompany(company);
        int count = materialBaseMapper.selectCount(mbc);
        String maxMaterialCode = "1";
        if(count>0) {
            maxMaterialCode = materialBaseMapper.queryMax(company);
            maxMaterialCode = (Integer.parseInt(maxMaterialCode)+1)+"";
        }
        //生成规则为： SC+公司+流水号（6位）
        String materialCode = "SC"+company+String.format("%06d",Integer.parseInt(maxMaterialCode));
        return materialCode;

    }


}