package com.yqjr.fin.mkmm.sales.rest;

import java.math.BigDecimal;
import java.util.*;
import javax.validation.Valid;

import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.results.ListResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.CommodityReview;
import com.yqjr.fin.mkmm.sales.condition.CommodityReviewCondition;
import com.yqjr.fin.mkmm.sales.services.CommodityReviewService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "commodityReviews")
@RestController
@RequestMapping(value = "/commodityReviews")
public class CommodityReviewRest extends BaseRest<CommodityReviewService, CommodityReview> {

    private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private CommodityReviewService commodityReviewService;

    @ApiOperation(value = "分页查询物料审核表（参数：实体对象属性、pageNum、pageSize）", tags = "物料审核表信息：CommodityReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<CommodityReview> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            CommodityReviewCondition condition) {

        List<CommodityReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<CommodityReview> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询物料审核表信息（参数：实体对象属性、pageNum、pageSize）", tags = "物料审核表信息：CommodityReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<CommodityReview> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            CommodityReviewCondition condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setAreaCode(userContext.getAreaCode());
        condition.setCommodityStatus("02");
        condition.setCompany(userContext.getComCode());
        List<CommodityReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<CommodityReview> pageList = new PageInfo<>(list);
        JQGridJsonResult<CommodityReview> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }

    /**
     * 销管二期需求开发
     * 物料入库审核
     * create by fannaian on 20180904
     * @param id
     * @param CommodityStatus
     * @return
     */
    @ApiOperation(value = "物料入库审核（参数：实体对象属性）", tags = "物料审核表信息：CommodityReviewRest")
    @RequestMapping(value = "/reviewIn", method = RequestMethod.GET)
    public ObjectResultResponse<CommodityReview> review(@RequestParam("id") Long id,
                                                        @RequestParam("commodityStatus") String CommodityStatus) {
        try{
            commodityReviewService.review(id, CommodityStatus);
            return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_REVIEW_SUCCESS,null);
        } catch (ValidationException ve){
            logger.error("审核异常！", ve);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_SUCCESS, Const.MSG_REVIEW_FAILURE,null);
        } catch (Exception e) {
            logger.error("系统异常！", e);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_FAILURE, Const.SYSTEM_ERROR,null);
        }

    }

    /**
     * 销管二期需求开发
     * 查询物料审核驳回信息
     * create by fannaian on 20180904
     * @param condition
     * @return
     */
    @ApiOperation(value = "查询物料审核驳回信息", tags = "物料审核表信息：CommodityReviewRest")
    @RequestMapping(value = "/queryProcessList", method = RequestMethod.GET)
    @ResponseBody
    public ListResultResponse<CommodityReview> queryProcessList(CommodityReviewCondition condition) {
        UserContext userContext = SessionHolder.getUserContext();
        condition.setAreaCode(userContext.getAreaCode());
        condition.setCommodityStatus("00");
        condition.setCompany(userContext.getComCode());
        condition.setCreator(Long.parseLong(userContext.getId()));
        List<CommodityReview> list = baseService.selectList(condition);
        return this.getListResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_CHECK_SUCCESS, list);
    }

    /**
     * 销管二期需求开发
     * 物料入库审核进度处理
     * create by fannaian on 20180904
     * @param commodityReview
     * @return
     */
    @ApiOperation(value = "物料入库审核进度处理", tags = "物料审核表信息：CommodityReviewRest")
    @RequestMapping(value = "/inProcess", method = RequestMethod.POST)
    public ObjectResultResponse<CommodityReview> inProcess(@RequestBody CommodityReview commodityReview) {
        try{
            commodityReviewService.inProcess(commodityReview);
            return this.getObjectResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, Const.MSG_PUT_SUCCESS, null);
        } catch (ValidationException ve) {
            logger.error("修改异常", ve);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_SUCCESS, Const.MSG_PUT_FAILURE, null);
        } catch (Exception e) {
            logger.error("系统异常", e);
            return this.getObjectResultResponse(Const.FAILURE, Const.CODE_FAILURE, Const.SYSTEM_ERROR, null);
        }

    }
}