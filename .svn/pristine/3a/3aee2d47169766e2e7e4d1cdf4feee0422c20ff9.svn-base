<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yqjr.fin.risk.stat.mapper.A11Dealerdata1Mapper">

    <!-- region BaseMapper DO NOT MODIFY!!!  -->

    <sql id="Base_Table_Name">
        TMP_A11_DEALERDATA1
    </sql>



    <!-- region BaseResultMap  -->
    <resultMap id="BaseResultMap" type="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        <result property="cid" column="CID"/><!--库存深度ID-->
        <result property="cname" column="CNAME"/><!--库存深度名称-->
        <result property="stock" column="STOCK"/><!--库存数量-->
        <result property="sales" column="SALES"/><!--销量-->
        <result property="srate" column="SRATE"/><!--库存深度-->
        <result property="brand" column="BRAND"/><!--品牌名称-->
        <result property="brandsrate" column="BRANDSRATE"/><!--该品牌平均库存深度-->
        <result property="bizdate" column="BIZDATE"/><!--指标日期-->
    </resultMap>
    <!-- endregion -->

    <!-- region Base_Column_List  -->
    <sql id="Base_Column_List">
    CID,CNAME,STOCK,SALES,SRATE,BRAND,BRANDSRATE,BIZDATE
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_List_Selective  -->
    <sql id="Base_Column_List_Selective">
        <trim suffixOverrides=",">
            <if test="cid != null">
            CID,
            </if>
            <if test="cname != null">
            CNAME,
            </if>
            <if test="stock != null">
            STOCK,
            </if>
            <if test="sales != null">
            SALES,
            </if>
            <if test="srate != null">
            SRATE,
            </if>
            <if test="brand != null">
            BRAND,
            </if>
            <if test="brandsrate != null">
            BRANDSRATE,
            </if>
            <if test="bizdate != null">
            BIZDATE
            </if>
        </trim>
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Values  -->
    <sql id="Base_Column_Values">
    #{cid},
    #{cname},
    #{stock},
    #{sales},
    #{srate},
    #{brand},
    #{brandsrate},
    #{bizdate}
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Values_Selective  -->
    <sql id="Base_Column_Values_Selective">
        <trim suffixOverrides=",">
            <if test="cid != null">
            #{cid},
            </if>
            <if test="cname != null">
            #{cname},
            </if>
            <if test="stock != null">
            #{stock},
            </if>
            <if test="sales != null">
            #{sales},
            </if>
            <if test="srate != null">
            #{srate},
            </if>
            <if test="brand != null">
            #{brand},
            </if>
            <if test="brandsrate != null">
            #{brandsrate},
            </if>
            <if test="bizdate != null">
            #{bizdate}
            </if>
        </trim>
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Set_Values  -->
    <sql id="Base_Column_Set_Values">
    CID = #{cid},
    CNAME = #{cname},
    STOCK = #{stock},
    SALES = #{sales},
    SRATE = #{srate},
    BRAND = #{brand},
    BRANDSRATE = #{brandsrate},
    BIZDATE = #{bizdate}
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Set_Values_Selective  -->
    <sql id="Base_Column_Set_Values_Selective">
        <if test="cid != null">
        CID = #{cid},
        </if>
        <if test="cname != null">
        CNAME = #{cname},
        </if>
        <if test="stock != null">
        STOCK = #{stock},
        </if>
        <if test="sales != null">
        SALES = #{sales},
        </if>
        <if test="srate != null">
        SRATE = #{srate},
        </if>
        <if test="brand != null">
        BRAND = #{brand},
        </if>
        <if test="brandsrate != null">
        BRANDSRATE = #{brandsrate},
        </if>
        <if test="bizdate != null">
        BIZDATE = #{bizdate}
        </if>
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Where_Selective  -->
    <sql id="Base_Column_Where_Selective">
        <if test="cid != null">
            and CID = #{cid}
        </if>
        <if test="cname != null">
            and CNAME = #{cname}
        </if>
        <if test="stock != null">
            and STOCK = #{stock}
        </if>
        <if test="sales != null">
            and SALES = #{sales}
        </if>
        <if test="srate != null">
            and SRATE = #{srate}
        </if>
        <if test="brand != null">
            and BRAND = #{brand}
        </if>
        <if test="brandsrate != null">
            and BRANDSRATE = #{brandsrate}
        </if>
        <if test="bizdate != null">
            and BIZDATE = #{bizdate}
        </if>
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Where_Selective_Param1  -->
    <sql id="Base_Column_Where_Selective_Param1">
        <if test="param1.cid != null">
            and CID = #{param1.cid}
        </if>
        <if test="param1.cname != null">
            and CNAME = #{param1.cname}
        </if>
        <if test="param1.stock != null">
            and STOCK = #{param1.stock}
        </if>
        <if test="param1.sales != null">
            and SALES = #{param1.sales}
        </if>
        <if test="param1.srate != null">
            and SRATE = #{param1.srate}
        </if>
        <if test="param1.brand != null">
            and BRAND = #{param1.brand}
        </if>
        <if test="param1.brandsrate != null">
            and BRANDSRATE = #{param1.brandsrate}
        </if>
        <if test="param1.bizdate != null">
            and BIZDATE = #{param1.bizdate}
        </if>
    </sql>
    <!-- endregion -->

    <!-- region Base_Order_By  -->
    <sql id="Base_Order_By">
        <bind name="propName" value="sortField"></bind>
        ORDER BY <include refid="Base_Column_Name" />
        <choose>
            <when test="isAscend">
                ASC
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
    </sql>
    <!-- endregion -->

    <!-- region Base_Column_Name  -->
    <sql id="Base_Column_Name">
        <if test='"cid" == propName'>
        CID
        </if>
        <if test='"cname" == propName'>
        CNAME
        </if>
        <if test='"stock" == propName'>
        STOCK
        </if>
        <if test='"sales" == propName'>
        SALES
        </if>
        <if test='"srate" == propName'>
        SRATE
        </if>
        <if test='"brand" == propName'>
        BRAND
        </if>
        <if test='"brandsrate" == propName'>
        BRANDSRATE
        </if>
        <if test='"bizdate" == propName'>
        BIZDATE
        </if>
    </sql>
    <!-- endregion -->

    <!-- region Base_Id_Array  -->
    <sql id="Base_Id_Array">
        <foreach collection="array" open="(" close=")" separator="," item="id">
        #{id}
        </foreach>
    </sql>
    <!-- endregion -->

    <!-- region Base_Id_List  -->
    <sql id="Base_Id_List">
        <foreach collection="list" open="(" close=")" separator="," item="id">
        #{id}
        </foreach>
    </sql>
    <!-- endregion -->

    <!-- region Base_Select_All  -->
    <sql id="Base_Select_All">
        select
        <include refid="Base_Column_List" />
        from <include refid="Base_Table_Name" />
    </sql>
    <!-- endregion -->

    <!-- region selectById  -->
    <select id="selectById" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        where ID = #{id}
    </select>
    <!-- endregion -->

    <!-- region selectByIds  -->
    <select id="selectByIds" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        where ID in
        <include refid="Base_Id_List" />
    </select>
    <!-- endregion -->

    <!-- region selectAll  -->
    <select id="selectAll" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
    </select>
    <!-- endregion -->

    <!-- region selectCount  -->
    <select id="selectCount" resultType="int">
        select count(*)
        from <include refid="Base_Table_Name" />
        <where>
            <include refid="Base_Column_Where_Selective" />
        </where>
    </select>
    <!-- endregion -->

    <!-- region select  -->
    <select id="select" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        <where>
            <include refid="Base_Column_Where_Selective" />
        </where>
    </select>
    <!-- endregion -->

    <!-- region selectOne  -->
    <select id="selectOne" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        <where>
            <include refid="Base_Column_Where_Selective" />
        </where>
    </select>
    <!-- endregion -->

    <!-- region selectOrderBy  -->
    <select id="selectOrderBy" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        <where>
            <include refid="Base_Column_Where_Selective_Param1" />
        </where>
        <include refid="Base_Order_By" />
    </select>
    <!-- endregion -->

    <!-- region selectByProperty  -->
    <select id="selectByProperty" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        <where>
            <include refid="Base_Column_Name" /> = #{propValue}
        </where>
    </select>
    <!-- endregion -->

    <!-- region selectByPropertyIn  -->
    <select id="selectByPropertyIn" resultMap="BaseResultMap">
        <include refid="Base_Select_All" />
        <where>
            <include refid="Base_Column_Name" /> IN
            <foreach collection="propValues" open="(" close=")" separator="," item="propValue">
            #{propValue}
            </foreach>
        </where>
    </select>
    <!-- endregion -->

    <!-- region delete  -->
    <delete id="delete">
        delete
        from <include refid="Base_Table_Name" />
        <where>
            <include refid="Base_Column_Where_Selective" />
        </where>
    </delete>
    <!-- endregion -->

    <!-- region deleteById  -->
    <delete id="deleteById">
        delete
        from <include refid="Base_Table_Name" />
        where ID = #{id}
    </delete>
    <!-- endregion -->

    <!-- region deleteByIds  -->
    <delete id="deleteByIds">
        delete
        from <include refid="Base_Table_Name" />
        where ID in
        <include refid="Base_Id_List" />
    </delete>
    <!-- endregion -->

    <!-- region insert  -->
    <insert id="insert" parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into <include refid="Base_Table_Name" /> (
        <include refid="Base_Column_List" />
        )
        values (
        <include refid="Base_Column_Values" />
        )
    </insert>
    <!-- endregion -->

    <!-- region updateById  -->
    <update id="updateById" parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        update <include refid="Base_Table_Name" />
        <set>
            <include refid="Base_Column_Set_Values" />
        </set>
        where ID = #{id}
    </update>
    <!-- endregion -->

    <!-- region patchById  -->
    <update id="patchById" parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        update <include refid="Base_Table_Name" />
        <set>
            <include refid="Base_Column_Set_Values_Selective" />
        </set>
        where ID = #{id}
    </update>
    <!-- endregion -->

    <!-- endregion BaseMapper -->

    <!-- region generated by CodeRobot  -->

    <!-- region 结果集映射  -->
    <resultMap id="A11Dealerdata1Result" type="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        <result property="cid" column="CID"/><!--库存深度ID-->
        <result property="cname" column="CNAME"/><!--库存深度名称-->
        <result property="stock" column="STOCK"/><!--库存数量-->
        <result property="sales" column="SALES"/><!--销量-->
        <result property="srate" column="SRATE"/><!--库存深度-->
        <result property="brand" column="BRAND"/><!--品牌名称-->
        <result property="brandsrate" column="BRANDSRATE"/><!--该品牌平均库存深度-->
        <result property="bizdate" column="BIZDATE"/><!--指标日期-->
    </resultMap>
    <!-- endregion -->

    <!-- 查询条件判断 入参为对象 条件为模糊-->
    <sql id="queryLikeA11Dealerdata1">
        <if test="a11Dealerdata1!=null">
            <if test="cid!=null and cid!=''">
                AND CID LIKE CONCAT('%'#{cid}'%')<!--库存深度ID-->
            </if>
            <if test="cname!=null and cname!=''">
                AND CNAME LIKE CONCAT('%'#{cname}'%')<!--库存深度名称-->
            </if>
            <if test="stock!=null and stock!=''">
                AND STOCK LIKE CONCAT('%'#{stock}'%')<!--库存数量-->
            </if>
            <if test="sales!=null and sales!=''">
                AND SALES LIKE CONCAT('%'#{sales}'%')<!--销量-->
            </if>
            <if test="srate!=null and srate!=''">
                AND SRATE LIKE CONCAT('%'#{srate}'%')<!--库存深度-->
            </if>
            <if test="brand!=null and brand!=''">
                AND BRAND LIKE CONCAT('%'#{brand}'%')<!--品牌名称-->
            </if>
            <if test="brandsrate!=null and brandsrate!=''">
                AND BRANDSRATE LIKE CONCAT('%'#{brandsrate}'%')<!--该品牌平均库存深度-->
            </if>
            <if test="bizdate!=null and bizdate!=''">
                BIZDATE LIKE CONCAT('%'#{bizdate}'%')<!--指标日期-->
            </if>
        </if>
    </sql>

    <!-- 按条件模糊查询所有 -->
    <select id="queryA11Dealerdata1List" parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1"
            resultMap="A11Dealerdata1Result">
        SELECT
        CID,<!--库存深度ID-->
        CNAME,<!--库存深度名称-->
        STOCK,<!--库存数量-->
        SALES,<!--销量-->
        SRATE,<!--库存深度-->
        BRAND,<!--品牌名称-->
        BRANDSRATE,<!--该品牌平均库存深度-->
        BIZDATE<!--指标日期-->
        FROM TMP_A11_DEALERDATA1
        <where>
            <include refid="queryLikeA11Dealerdata1"/>
        </where>
    </select>

    <!-- 按条件模糊统计所有条数 -->
    <select id="queryA11Dealerdata1Count" parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1" resultType="int">
        SELECT
        count (id)
        FROM TMP_A11_DEALERDATA1
        <where>
            <include refid="queryLikeA11Dealerdata1"/>
        </where>
    </select>

    <!-- 批量删除，入参为数组  -->
    <delete id="dynamicDelete">
        delete from TMP_A11_DEALERDATA1 where id in
        <foreach collection="array" open="(" close=")" separator="," item="arr">
            #{arr}
        </foreach>
    </delete>

    <!-- 批量删除，入参为list  -->
    <delete id="dynamicDeleteList">
        delete from TMP_A11_DEALERDATA1 where id in
        <foreach collection="list" open="(" close=")" separator="," item="ids">
            #{ids}
        </foreach>
    </delete>

    <!-- 批量插入 -->
    <insert id="insertBatch" parameterType="java.util.List">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into TMP_A11_DEALERDATA1
        (
        <include refid="Base_Column_List" />
        )
        values
        <foreach collection="list" item="a11Dealerdata1" index="index" separator=",">
            (
            <include refid="Base_Column_Values" />
            )
        </foreach>
    </insert>

    <!-- 插入单条数据，并返回主键ID -->
    <insert id="saveObj" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.yqjr.fin.risk.stat.entity.A11Dealerdata1">
        insert into TMP_A11_DEALERDATA1
        (
        <include refid="Base_Column_List" />
        )
        values
        (
        <include refid="Base_Column_Values" />
        )
    </insert>


    <!-- **********************************************************************-->
    <!-- ************* 在此下方为一对一、一对多查询方式 仅供参考***************-->
    <!-- **********************************************************************-->
    <!-- 一个博客（BlogInfo） 属于一个作者（Author） ，一个作者（Author） 有多篇文章（Post） -->
    <!--
  <resultMap type="com.foo.bean.BlogInfo" id="BlogInfo">
      <id column="blog_id" property="blogId" />
      <result column="title" property="title" />
      <association property="author" column="blog_author_id"
          javaType="com.foo.bean.Author" select="com.foo.bean.AuthorMapper.selectByPrimaryKey">
      </association>
      <collection property="posts" column="blog_id" ofType="com.foo.bean.Post"
          select="com.foo.bean.PostMapper.selectByBlogId">
      </collection>
  </resultMap>

  <select id="queryBlogInfoById" resultMap="BlogInfo" parameterType="java.math.BigDecimal">
      SELECT
      B.BLOG_ID,
      B.TITLE,
      B.AUTHOR_ID AS BLOG_AUTHOR_ID
      FROM BLOG B
      where B.BLOG_ID = 博客ID
  </select>

          上述方法存在N+1问题
      它的弊端也比较明显：即所谓的N+1问题。关联的嵌套查询显示得到一个结果集，然后根据这个结果集的每一条记录进行关联查询。
      现在假设嵌套查询就一个（即resultMap 内部就一个association标签），现查询的结果集返回条数为N，那么关联查询语句将会被执行N次，加上自身返回结果集查询1次，共需要访问数据库N+1次。如果N比较大的话，这样的数据库访问消耗是非常大的！所以使用这种嵌套语句查询的使用者一定要考虑慎重考虑，确保N值不会很大。
      以上面的例子为例，select 语句本身会返回com.foo.bean.BlogMapper.queryBlogInfoById 条数为1 的结果集，由于它有两条关联的语句查询，它需要共访问数据库 1*（1+1）=3次数据库。


       <resultMap type="com.foo.bean.BlogInfo" id="BlogInfo">
      <id column="blog_id" property="blogId"/>
      <result column="title" property="title"/>
      <association property="author" column="blog_author_id" javaType="com.foo.bean.Author">
          <id column="author_id" property="authorId"/>
          <result column="user_name" property="userName"/>
          <result column="password" property="password"/>
          <result column="email" property="email"/>
          <result column="biography" property="biography"/>
      </association>
      <collection property="posts" column="blog_post_id" ofType="com.foo.bean.Post">
          <id column="post_id" property="postId"/>
          <result column="blog_id" property="blogId"/>
          <result column="create_time" property="createTime"/>
          <result column="subject" property="subject"/>
          <result column="body" property="body"/>
          <result column="draft" property="draft"/>
      </collection>
      </resultMap>


      <select id="queryAllBlogInfo" resultMap="BlogInfo">
          SELECT
           B.BLOG_ID,
           B.TITLE,
           B.AUTHOR_ID AS BLOG_AUTHOR_ID,
           A.AUTHOR_ID,
           A.USER_NAME,
           A.PASSWORD,
           A.EMAIL,
           A.BIOGRAPHY,
           P.POST_ID,
           P.BLOG_ID AS BLOG_POST_ID ,
             P.CREATE_TIME,
           P.SUBJECT,
           P.BODY,
           P.DRAFT
      FROM BLOG B
      LEFT OUTER JOIN AUTHOR A
        ON B.AUTHOR_ID = A.AUTHOR_ID
      LEFT OUTER JOIN POST P
        ON P.BLOG_ID = B.BLOG_ID
      </select>
      -->

    <!-- **********************************************************************-->
    <!-- ************* 此线上方代码自动生成，在此下方编写自定义代码。***************-->
    <!-- **********************************************************************-->

    <!-- endregion -->


</mapper>

