package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.BeanUtil;
import com.yqjr.fin.mkmm.sales.entity.DealerBrandsAssociated;
import com.yqjr.fin.mkmm.sales.rest.vo.DealerBrandsVo;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.DealerBrands;
import com.yqjr.fin.mkmm.sales.mapper.DealerBrandsMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
@Transactional(readOnly = true)
public class DealerBrandsService extends BaseService<DealerBrandsMapper, DealerBrands, Long> {

    @Autowired
    DealerBrandsAssociatedService dealerBrandsAssociatedService;
    @Autowired
    DealerBrandsMapper dealerBrandsMapper;
    /**
     * 经销商与品牌信息获取
     */
    @Transactional(rollbackFor = {Exception.class})
    public void traverseInformation(){
        List<DealerBrandsVo> dealerBrandsVos = dealerBrandsMapper.selectAllMsg();
        DealerBrandsVo dealerBrandsVo = null;
        String value = null;
        String[] values = null;
        DealerBrandsAssociated dealerBrandsAssociated = new DealerBrandsAssociated();
        for(int i=0;i<dealerBrandsVos.size();i++){
            dealerBrandsVo = dealerBrandsVos.get(i);
            value = dealerBrandsVo.getValueCode();
            if(value != null && value != ""){
                if(value.contains("_")){
                    values = value.split("_");
                    for(int j=0;j<values.length;j++){
                        dealerBrandsVo.setValueCode(values[j]);
                        dealerBrandsAssociated.setCompany(dealerBrandsVo.getCompany());
                        dealerBrandsAssociated.setValueCode(dealerBrandsVo.getValueCode());
                        dealerBrandsAssociated.setDealercode(dealerBrandsVo.getDealerCode());
                        dealerBrandsAssociated.setDealername(dealerBrandsVo.getDealerName());
                        dealerBrandsAssociatedService.insert(dealerBrandsAssociated);
                    }
                }else if (value.contains(",")){
                    values = value.split(",");
                    for(int j=0;j<values.length;j++){
                        dealerBrandsVo.setValueCode(values[j]);
                        dealerBrandsAssociated.setCompany(dealerBrandsVo.getCompany());
                        dealerBrandsAssociated.setValueCode(dealerBrandsVo.getValueCode());
                        dealerBrandsAssociated.setDealercode(dealerBrandsVo.getDealerCode());
                        dealerBrandsAssociated.setDealername(dealerBrandsVo.getDealerName());
                        dealerBrandsAssociatedService.insert(dealerBrandsAssociated);
                    }
                }else{
                    dealerBrandsAssociated.setCompany(dealerBrandsVo.getCompany());
                    dealerBrandsAssociated.setValueCode(dealerBrandsVo.getValueCode());
                    dealerBrandsAssociated.setDealercode(dealerBrandsVo.getDealerCode());
                    dealerBrandsAssociated.setDealername(dealerBrandsVo.getDealerName());
                    dealerBrandsAssociatedService.insert(dealerBrandsAssociated);
                }
            }

        }

        //查询出所有经销商与品牌的数据
        List<DealerBrandsVo> lists = this.selectAllMsg();
        //将数据存入表中
        DealerBrandsVo dealerBrandsVo1 = null;
        DealerBrands dealerBrands = new DealerBrands();
        for(int i=0;i<lists.size();i++){
            dealerBrandsVo1 = lists.get(i);
            dealerBrands.setCompany(dealerBrandsVo1.getCompany());
            dealerBrands.setBrandsCode(dealerBrandsVo1.getBrandsCode());
            dealerBrands.setBrandsName(dealerBrandsVo1.getBrandsName());
            dealerBrands.setDealerCode(dealerBrandsVo1.getDealerCode());
            dealerBrands.setDealerName(dealerBrandsVo1.getDealerName());
            this.insert(dealerBrands);
        }
    }

    public List<DealerBrandsVo> selectAllMsg(){
        return dealerBrandsAssociatedService.selectAllMsg();
    }

    /**
     * 经销商与区域信息清除
     */
    public void cleanTable(){
        dealerBrandsAssociatedService.deleteAllMsg();
        dealerBrandsMapper.deleteAllMsg();
    }
}