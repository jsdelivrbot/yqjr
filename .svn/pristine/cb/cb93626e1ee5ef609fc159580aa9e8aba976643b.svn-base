package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.TeamMainCondition;
import com.yqjr.fin.mkmm.sales.condition.TeamReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.TeamWorkCondition;
import com.yqjr.fin.mkmm.sales.entity.TeamHis;
import com.yqjr.fin.mkmm.sales.entity.TeamMain;
import com.yqjr.fin.mkmm.sales.entity.WorkFlow;
import com.yqjr.fin.mkmm.sales.model.TeamReviewWork;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonTeamVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.entity.TeamReview;
import com.yqjr.fin.mkmm.sales.mapper.TeamReviewMapper;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import io.swagger.models.auth.In;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional(readOnly = true)
public class TeamReviewService extends BaseService<TeamReviewMapper, TeamReview, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //endregion
    @Autowired
    TeamReviewMapper teamReviewMapper;
    @Autowired
    WorkFlowService workFlowService;
    @Autowired
    TeamMainService teamMainService;
    @Autowired
    TeamHisService teamHisService;
    /**
     * 插入团队数据及工作流数据
     * @param teamReview
     */
    @Transactional
    public synchronized void insert(TeamReview teamReview){
        UserContext userContext = SessionHolder.getUserContext();
        String creatName=userContext.getName();
        //查出此区域是否有数据
        TeamReviewCondition teamReviewCondition=new TeamReviewCondition();
        teamReviewCondition.setAreaCode(teamReview.getAreaCode());
        int areaCount=teamReviewMapper.selectCount(teamReviewCondition);
        String maxTeamCode="1";
        if(areaCount>0) {
            //得到最大的序号
            maxTeamCode = teamReviewMapper.queryMax(teamReview.getAreaCode());
            maxTeamCode=(Integer.parseInt(maxTeamCode)+1)+"";
        }

        //生成规则为： T+区域代码（4/6位）+流水号（4位）
        String teamCode="T"+teamReview.getAreaCode().substring(1)+String.format("%04d",Integer.parseInt(maxTeamCode));

        WorkFlow workFlow=new WorkFlow();
        workFlow.setReviewId(teamCode);//团队ID
        workFlow.setReviewLevel("1");
        workFlow.setType("01");
        workFlow.setModType("02");
        workFlow.setReviewStatus("01");//提交审核
        workFlowService.insert(workFlow);
        workFlow.setReviewStatus("02");//同时增加待审核数据
        workFlow.setFlowId(workFlow.getId());
        workFlowService.insert(workFlow);
        //设置数据为待审核状态
        teamReview.setTeamStatus("0");//团队状态无效
        teamReview.setTeamCode(teamCode);
        teamReview.setReviewStatus("02");//待审核
        teamReview.setFlag("1");
        teamReview.setReviewType("01");
        teamReview.setFlowId(workFlow.getId());
        teamReview.setCreateName(creatName);
        if(teamReview.getCompany() == null || "".equals(teamReview.getCompany())){
            teamReview.setCompany(userContext.getComCode());
        }
        super.insert(teamReview);

    }
    @Transactional
    public synchronized String patchReviewById(TeamReview teamReview) {
        //根据团队编码查询是否有修改的数据
        TeamReviewCondition teamReviewCondition=new TeamReviewCondition();
        teamReviewCondition.setTeamCode(teamReview.getTeamCode());
        teamReviewCondition.setFlag("1");
        Long count=super.selectCount(teamReviewCondition);
        UserContext uc = SessionHolder.getUserContext();
        String companyCode =uc.getComCode();//通过token 获取公司代码
        if(count>0){
            //throw new ValidationException("团队编码为："+teamReview.getTeamCode()+"正在审核操作中！不允许修改。");
            return "error";
        }else {
            if (UserRoleHelp.isAdmin() || UserRoleHelp.isMarketingManager() || UserRoleHelp.isMarketingWorkers()){
                teamReview.setFounderLevel("03");
            }else if (UserRoleHelp.isRegionalLeaders()){
                teamReview.setFounderLevel("02");
            }else if (UserRoleHelp.isSalesManager()){
                teamReview.setFounderLevel("01");
            }
            teamReview.setCompany(companyCode);
            teamReview.setFlag("1");//有效状态 1
            teamReview.setReviewStatus("02");//待审核
            teamReview.setReviewType("02");
            WorkFlow workFlow=new WorkFlow();
            workFlow.setReviewId(teamReview.getTeamCode());//团队ID
            workFlow.setReviewLevel("1");
            workFlow.setType("02");
            workFlow.setModType("02");
            workFlow.setReviewStatus("01");
            workFlowService.insert(workFlow);
            workFlow.setFlowId(workFlow.getId());
            workFlow.setReviewStatus("02");//同时增加待审核数据
            workFlowService.insert(workFlow);
            teamReview.setFlowId(workFlow.getId());
            super.insert(teamReview);
        }
        return "";
    }

    /**
     * 查询当前为工作流节点的数据
     * @param teamWorkCondition
     */
    public List<TeamReviewWork> queryWorkFlow(TeamWorkCondition teamWorkCondition, PageBounds... pageBounds){
        List<TeamReviewWork> teamReviewWorks=null;
        teamReviewWorks=teamReviewMapper.queryWorkFlow(teamWorkCondition,pageBounds);
       return teamReviewWorks;
    }
    @Transactional
    public synchronized TeamReview reviewIng(Long teamReviewId,Long workFlowId){
        TeamReview teamReview=this.selectById(teamReviewId);
        teamReview.setReviewStatus("03");
        this.patchById(teamReview);
        UserContext context = SessionHolder.getUserContext();
        WorkFlow workFlow=workFlowService.selectById(workFlowId);
        if (workFlow.getModifier() == null || "".equals(workFlow.getModifier())){
            workFlow.setModifier(Long.parseLong(context.getId()));
        } else if (workFlow.getModifier() != Long.parseLong(context.getId())){
            throw new ValidationException("该条数据已经被占用");
        }
        workFlow.setReviewStatus("03");//审核中
        workFlowService.patchById(workFlow);
        return teamReview;
    }
    @Transactional
    public void teamWorkSumit(Long teamId,Long workFlowId,String reviewStatus,String opinion,String company,String modifierName){

        TeamReview teamReview=this.selectById(teamId);
        WorkFlow workFlow=workFlowService.selectById(workFlowId);
        String reviewLevel=workFlow.getReviewLevel();

        if("04".equals(reviewStatus)){//审核通过
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("04");
            workFlow.setCompany(company);
            workFlow.setModifierName(modifierName);
            workFlowService.patchById(workFlow);//更新当前节点
            if ("1".equals(reviewLevel)){//1级审核通过
                workFlow.setReviewLevel("2");//设置流转到2级
                workFlow.setReviewStatus("02");//设置下个节点为待审核
                workFlow.setModifyTime(null);//操作时间为空
                workFlow.setModifier(null);
                workFlow.setOpinion(null);
                workFlow.setModifierName(null);
                workFlow.setFlowId(workFlow.getId());
                workFlowService.insert(workFlow);//插入2级节点
                teamReview.setFlowId(workFlow.getId());//更新审核表最新工作流ID
                teamReview.setReviewStatus("02");//待审核
                this.patchById(teamReview);//更新审核表
            }else if("2".equals(reviewLevel)){//2级审核通过数据正式生效
                String workflowType=workFlow.getType();//
                TeamMain teamMainNew=teamReviewToTeamMain(teamReview);
                teamMainNew.setReviewId(teamId);
                teamReview.setReviewStatus("04");
                teamReview.setFlag("0");//设置当前数据为无效
                this.patchById(teamReview);//更新审核表

                //判断此条审核数据是操作类型是添加 还是修改
                if("01".equals(workflowType)){//添加操作
                    teamMainNew.setTeamStatus("1");
                    teamMainNew.setCompany(teamReview.getCompany());
                    //添加teamMain表有效数据
                    teamMainService.insert(teamMainNew);
                }else if("02".equals(workflowType)){//修改操作
                    TeamMainCondition teamMainCondition=new TeamMainCondition();
                    teamMainCondition.setTeamCode(teamReview.getTeamCode());
                    //轨迹表插入旧数据
                    List<TeamMain> teamMains=teamMainService.selectList(teamMainCondition);
                    if (teamMains == null || teamMains.isEmpty()){
                        throw new ValidationException("团队查询异常");
                    }
                    TeamMain teamMainOdl =teamMains.get(0);
                    TeamHis teamHis=TeamMainToTeamHis(teamMainOdl);
                    teamHis.setReviewId(teamId);
                    teamHisService.insert(teamHis);
                    //更新teamMain表
                    teamMainService.patchByTeamCode(teamMainNew);
                }
            }
        }else if("00".equals(reviewStatus)){//打回操作
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("00");
            workFlow.setCompany(company);
            workFlow.setModifierName(modifierName);
            workFlowService.patchById(workFlow);//更新当前节点
            //更新TeamReview表审核状态
            teamReview.setReviewStatus("00");
            this.patchById(teamReview);

        }


    }

    /**
     * 团队审核对象转换为团队对象
     * @param teamReview
     * @return
     */
    private TeamMain teamReviewToTeamMain(TeamReview teamReview){
        TeamMain teamMain =new TeamMain();
        teamMain.setTeamStatus(teamReview.getTeamStatus());
        teamMain.setAreaCode(teamReview.getAreaCode());
        teamMain.setAreaName(teamReview.getAreaName());
        teamMain.setTeamCode(teamReview.getTeamCode());
        teamMain.setTeamName(teamReview.getTeamName());
        teamMain.setTeamLevel(teamReview.getTeamLevel());
        teamMain.setTeamType(teamReview.getTeamType());
        teamMain.setTeamStatus(teamReview.getTeamStatus());
        teamMain.setTeamLeader(teamReview.getTeamLeader());
        teamMain.setTeamPhone(teamReview.getTeamPhone());
        teamMain.setTeamZip(teamReview.getTeamZip());
        teamMain.setTeamAddress(teamReview.getTeamAddress());
        teamMain.setTeamFax(teamReview.getTeamFax());
        teamMain.setStartTime(teamReview.getStartTime());
        teamMain.setRemark(teamReview.getRemark());
        teamMain.setTeamStatus(teamReview.getTeamStatus());
        return teamMain;
    }
    /**
     * 团队审核对象转换为团队对象
     * @param teamMain
     * @return
     */
    private TeamHis TeamMainToTeamHis(TeamMain teamMain){
        TeamHis teamHis =new TeamHis();
        teamHis.setTeamStatus(teamMain.getTeamStatus());
        teamHis.setAreaCode(teamMain.getAreaCode());
        teamHis.setAreaName(teamMain.getAreaName());
        teamHis.setTeamCode(teamMain.getTeamCode());
        teamHis.setTeamName(teamMain.getTeamName());
        teamHis.setTeamLevel(teamMain.getTeamLevel());
        teamHis.setTeamType(teamMain.getTeamType());
        teamHis.setTeamStatus(teamMain.getTeamStatus());
        teamHis.setTeamLeader(teamMain.getTeamLeader());
        teamHis.setTeamPhone(teamMain.getTeamPhone());
        teamHis.setTeamZip(teamMain.getTeamZip());
        teamHis.setTeamAddress(teamMain.getTeamAddress());
        teamHis.setTeamFax(teamMain.getTeamFax());
        teamHis.setStartTime(teamMain.getStartTime());
        teamHis.setRemark(teamMain.getRemark());
        teamHis.setTeamStatus(teamMain.getTeamStatus());
        teamHis.setReviewId(teamMain.getReviewId());
        return teamHis;
    }

    //修改駁回的數據
    @Transactional
    public synchronized void patchReviewQueryById(TeamReview teamReview,String type) {
        //修改原数据状态为无效
        TeamReview teamOldReview = new TeamReview();
        teamOldReview.setId(teamReview.getId());
        teamOldReview.setFlag("0");//有效状态 0
        this.patchById(teamOldReview);
        //将符合条件的数据插入workFlow和teamReview表中
        teamReview.setFlag("1");//有效状态 1
        teamReview.setReviewStatus("02");//待审核
        teamReview.setReviewType(type);
        WorkFlow workFlow=new WorkFlow();
        workFlow.setReviewId(teamReview.getTeamCode());//团队ID
        workFlow.setReviewLevel("1");
        workFlow.setType(type);
        workFlow.setModType("02");
        workFlow.setReviewStatus("01");
        workFlowService.insert(workFlow);
        workFlow.setFlowId(workFlow.getId());
        workFlow.setReviewStatus("02");//同时增加待审核数据
        workFlowService.insert(workFlow);
        teamReview.setFlowId(workFlow.getId());
        super.insert(teamReview);
    }


    /**
     * 团队新增时团队名称唯一性校验
     * @param teamName
     * @return
     */
    public Integer selectByCheckUniquen(String teamName ,String company){
        return teamReviewMapper.selectByCheckUniquen(teamName,company);
    }

    //综合查询，查历史记录
    public TeamHis queryTeamHisByReviewId(Long id){
        List<TeamHis> teamHisList = teamReviewMapper.queryTeamHisByReviewId(id);
        if (teamHisList != null && !teamHisList.isEmpty()){
            return teamHisList.get(0);
        }else {
            return new TeamHis();
        }
    }

    //综合查询，查reviewde的数据
    public List<TeamReview> queryTeamReviewByCode(String teamCode, String reviewStatus){
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        List<TeamReview> TeamReviews = teamReviewMapper.queryTeamReviewByCode(teamCode,reviewStatus, company);
        return TeamReviews;
    }

    @Transactional
    public TeamReviewWork teamReviewWatch(Long teamReviewId,Long workFlowId){
        WorkFlow workFlow=workFlowService.selectById(workFlowId);
        TeamReview teamReview=this.selectById(teamReviewId);
        return this.teamReviewWithWorkFlowToTeamWork(teamReview,workFlow);
    }

    private TeamReviewWork teamReviewWithWorkFlowToTeamWork(TeamReview teamReview, WorkFlow workFlow) {
        TeamReviewWork teamReviewWork = new TeamReviewWork();
        teamReviewWork.setOpinion(workFlow.getOpinion());
        teamReviewWork.setReviewLevel(workFlow.getReviewLevel());
        teamReviewWork.setWorkId(workFlow.getReviewId());
        teamReviewWork.setId(teamReview.getId());
        teamReviewWork.setAreaCode(teamReview.getAreaCode());
        teamReviewWork.setAreaName(teamReview.getAreaName());
        teamReviewWork.setTeamCode(teamReview.getTeamCode());
        teamReviewWork.setTeamName(teamReview.getTeamName());
        teamReviewWork.setTeamLevel(teamReview.getTeamLevel());
        teamReviewWork.setTeamType(teamReview.getTeamType());
        teamReviewWork.setTeamStatus(teamReview.getTeamStatus());
        teamReviewWork.setTeamLeader(teamReview.getTeamLeader());
        teamReviewWork.setTeamPhone(teamReview.getTeamPhone());
        teamReviewWork.setTeamZip(teamReview.getTeamZip());
        teamReviewWork.setTeamAddress(teamReview.getTeamAddress());
        teamReviewWork.setTeamFax(teamReview.getTeamFax());
        teamReviewWork.setStartTime(teamReview.getStartTime());
        teamReviewWork.setCreateTime(teamReview.getCreateTime());
        teamReviewWork.setModifyTime(teamReview.getModifyTime());
        teamReviewWork.setCreator(teamReview.getCreator());
        teamReviewWork.setModifier(teamReview.getModifier());
        teamReviewWork.setRemark(teamReview.getRemark());
        teamReviewWork.setReviewStatus(teamReview.getReviewStatus());
        teamReviewWork.setFlag(teamReview.getFlag());
        teamReviewWork.setTranscode1(teamReview.getTranscode1());
        teamReviewWork.setTranscode2(teamReview.getTranscode2());
        teamReviewWork.setTranscode3(teamReview.getTranscode3());
        teamReviewWork.setTranscode4(teamReview.getTranscode4());
        teamReviewWork.setReviewType(teamReview.getReviewType());
        teamReviewWork.setFlowId(teamReview.getFlowId());
        teamReviewWork.setCreateName(teamReview.getCreateName());
        return teamReviewWork;
    }

    @Transactional
    public List<TeamReview> selectProcessList(TeamReviewCondition condition, PageBounds of) {
        return teamReviewMapper.selectProcessList(condition,of);
    }
}