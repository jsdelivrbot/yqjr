package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.PersonSaleCondition;
import com.yqjr.fin.mkmm.sales.condition.TeamSaleCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.TeamSaleMapper;
import com.yqjr.fin.mkmm.sales.model.PlanTrackVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonTrackVo;
import com.yqjr.fin.mkmm.sales.vo.domin.TeamTrackVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import net.bytebuddy.implementation.bytecode.Throw;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
@Transactional
public class TeamSaleService extends BaseService<TeamSaleMapper, TeamSale, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private PersonTeamService personTeamService;
    @Autowired
    private PersonSaleService personSaleService;
    @Autowired
    private TeamSaleMapper teamSaleMapper;
    @Autowired
    private PersonPlanService personPlanService;

    @Transactional
    public List<TeamTrackVo> sumNumber(TeamSaleCondition condition) throws ParseException {
        List<TeamTrackVo> vo = new ArrayList<>();
        //月份list
        List<String> monthList = personSaleService.monthList();
        //预算list
        List<Long> planList = queryPlanDet(condition);
        //实际销售额list
        List<Long> actualList = queryActualPerson(condition);
        //达成率
        List<Double> planRateList = personSaleService.queryPlanRate(planList, actualList);
        //序时进度
        Double rate = calRate(condition);
        //差值
        List<Double> rateCalList = personSaleService.queryRateCal(planRateList, rate);
        //格式化小数
        DecimalFormat df = new DecimalFormat("######0.00");
        for (int i = 0; i < monthList.size(); i++) {
            TeamTrackVo teamTrackVo = new TeamTrackVo();
            teamTrackVo.setMonth(monthList.get(i));
            teamTrackVo.setPlanNum(planList.get(i) + "");
            teamTrackVo.setActualNum(actualList.get(i) + "");
            teamTrackVo.setPlanRate(getPrettyNumber(df.format(planRateList.get(i) * 100) + "") + "%");
            teamTrackVo.setRate(getPrettyNumber(df.format(rate * 100) + "") + "%");
            teamTrackVo.setRateCal(getPrettyNumber(df.format(rateCalList.get(i) * 100) + "") + "%");
            vo.add(teamTrackVo);
        }
        return vo;
    }

    public Double calRate(TeamSaleCondition condition) throws ParseException {
        Double rate ;
        String year =  condition.getYear();
        //当前年
        Date date = new Date();
        SimpleDateFormat sf = new SimpleDateFormat("yyyy");
        String nowYear = sf.format(date);
        if(Long.valueOf(year) > Long.valueOf(nowYear)) {
            rate = 0.0;
        } else if(Long.valueOf(year) < Long.valueOf(nowYear)) {
            rate = 1.0;
        } else {
            rate = DateUtils.queryRate();
        }

        return rate;
    }

    public void queryTeamExist(String teamCode) throws ValidationException {
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        String areaCode;
        if(UserRoleHelp.isAdmin() || UserRoleHelp.isMarketingWorkers() || UserRoleHelp.isMarketingManager()) {
            areaCode = "";
        } else {
            areaCode = userContext.getAreaCode();
        }

        TeamMain tm = new TeamMain();
        tm.setCompany(company);
        tm.setAreaCode(areaCode);
        tm.setTeamCode(teamCode);
        List<TeamSale> teamList = teamSaleMapper.selectTeamByCode(tm);
        if(teamList.size() == 0) {
            throw new ValidationException("团队不存在！");
        }
    }


    //预算list
    public List<Long> queryPlanDet(TeamSaleCondition condition) {
        PersonPlan personPlan = new PersonPlan();
        PersonTeam personTeam = new PersonTeam();
        List<List<Long>> teamList =  new ArrayList<>();
        //查询条件年份
        String year = condition.getYear();
        personPlan.setYear(year);
        //查询条件编号
        String teamCode  = condition.getTeamCode();
        //查询条件品牌
        String brands = condition.getBrands();
//        personPlan.setBrands(brands);
        //根据团队编码查找人
        personTeam.setTeamCode(teamCode);
        personTeam.setCompany(condition.getCompany());
        personPlan.setCompany(condition.getCompany());
        //团队下的人的1-12月集合
        List<PersonTeam> personTeams = teamSaleMapper.queryPersonByTeamCode(personTeam);
        if(personTeams.size()>0){
            for (int j = 0; j < personTeams.size(); j++) {
                String personCode = personTeams.get(j).getPersonCode();
                personPlan.setPersonCode(personCode);
                //每个人1-12月预算
                List<Long> amountList = personSaleService.queryPlans(personPlan);
                teamList.add(amountList);
            }
        }
        //累加每个人1-12月的预算
        List<Long> amountAll = sumPlans(teamList);
        return amountAll;
    }

    //查实际销售
    public List<Long> queryActualPerson(TeamSaleCondition condition) {
        TeamSale teamSale = new TeamSale();
        //查询条件年份
        String year = condition.getYear();
        teamSale.setYear(year);
        //查询条件编号
        String teamCode = condition.getTeamCode();
        teamSale.setTeamCode(teamCode);
        //查询条件品牌
        String brands = condition.getBrands();
//        teamSale.setBrands(brands);
        teamSale.setCompany(condition.getCompany());
        //实际完成的list
        List<Long> amountList = queryActuals(teamSale);
        return amountList;
    }

    //实际完成的list
    public List<Long> queryActuals(TeamSale teamSale) {
        List<Long> amountList = new ArrayList<>();
        //12个月
        for(int i=1;i<13;i++) {
            String month = i+"";
            //查人的计划
            teamSale.setMonth(month);
            //求和
            Long amounts =  teamSaleMapper.selectActualByMonth(teamSale);
            if(null == amounts ) {
                amountList.add((long)0);
            } else {
                amountList.add(amounts);
            }
        }
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2));//第一季度
        amountList.add(amountList.get(3)+amountList.get(4)+amountList.get(5));//第二季度
        amountList.add(amountList.get(6)+amountList.get(7)+amountList.get(8));//第三季度
        amountList.add(amountList.get(9)+amountList.get(10)+amountList.get(11));//第四季度
        //合计
        amountList.add(amountList.get(0)+amountList.get(1)+amountList.get(2)+amountList.get(3)+amountList.get(4)+amountList.get(5)
                +amountList.get(6)+amountList.get(7)+amountList.get(8)+amountList.get(9)+amountList.get(10)+amountList.get(11));

        return amountList;
    }

    //更新mkmm_team_sales
    public void updateTeamSale(int year ,int month) {
        //先获取一个有多少团队
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        List<String> teams = teamSaleMapper.selectAllTeam(company);
        for (int i=0;i<teams.size();i++) {
            String teamCode = teams.get(i);
            //获得一个品牌的集合
            List<String> brandsList = personPlanService.createBrandsList();
            for(int j=0;j<brandsList.size();j++) {
                String brands = brandsList.get(j);
                //获取每个团队每天每个品牌的发生的数量
                Long amount = teamSaleMapper.selectAllPersonSale(teamCode, year+"", month+"", brands,company);
                //如果查不到，置为0
                if(null == amount) {
                    amount = (long) 0;
                }
                TeamSale teamSale = new TeamSale();
                teamSale.setBrands(brands);
                teamSale.setTeamCode(teamCode);
                teamSale.setYear(year+"");
                teamSale.setMonth(month+"");
                teamSale.setCompany(company);
                //查询是否有记录
                List<TeamSale> teamSales = teamSaleMapper.selectTeamExist(teamSale);
                teamSale.setAmount(amount);
                if(teamSales.size()>0) {//存在就更新
                    teamSaleMapper.updateTeamSale(teamSale);
                } else {//不存在插入
                    teamSaleMapper.insert(teamSale);
                }
            }
        }

    }

    //获取一个1-12个月的总预算集合
    public List<Long> getSumList(){
        List<Long> sumList = new ArrayList<>();
        sumList.add(new Long((long)0));//一月
        sumList.add(new Long((long)0));//二月
        sumList.add(new Long((long)0));//三月
        sumList.add(new Long((long)0));//四月
        sumList.add(new Long((long)0));//五月
        sumList.add(new Long((long)0));//六月
        sumList.add(new Long((long)0));//七月
        sumList.add(new Long((long)0));//八月
        sumList.add(new Long((long)0));//九月
        sumList.add(new Long((long)0));//十月
        sumList.add(new Long((long)0));//十一月
        sumList.add(new Long((long)0));//十二月
        sumList.add(new Long((long)0));//第一季度
        sumList.add(new Long((long)0));//第二季度
        sumList.add(new Long((long)0));//第三季度
        sumList.add(new Long((long)0));//第四季度
        sumList.add(new Long((long)0));//合计
        return sumList;
    }

    //导出
    public void teamSaleExport(TeamSaleCondition condition,HttpServletResponse response) throws Exception {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("团队预算与计划跟踪");
        String [] cellValues = {"月份","预算台数","实际台数","达成率","序时进度","达成率与序时进度差值"};
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        condition.setCompany(company);
        List<TeamTrackVo> list = sumNumber(condition);
        //创建表头
        createTitle(sheet,cellValues);
        //插入数据
        int i = 1;
        for(TeamTrackVo vo :list) {
            HSSFRow row =  sheet.createRow(i);
            row.createCell(0).setCellValue(vo.getMonth());
            row.createCell(1).setCellValue(vo.getPlanNum());
            row.createCell(2).setCellValue(vo.getActualNum());
            row.createCell(3).setCellValue(vo.getPlanRate());
            row.createCell(4).setCellValue(vo.getRate());
            row.createCell(5).setCellValue(vo.getRateCal());
            i++;
        }
        String fileName = "teamSale.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());
    }

    /***
     * 创建表头
     * @param sheet
     */
    private void createTitle(HSSFSheet sheet, String [] cellValues)
    {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 15*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }


    //创建表头
    public void reateTitle(WritableSheet sheet) throws WriteException {
        //title
        sheet.addCell(new Label(0,0,"月份"));
        sheet.addCell(new Label(1,0,"预算台数"));
        sheet.addCell(new Label(2,0,"实际台数"));
        sheet.addCell(new Label(3,0,"达成率"));
        sheet.addCell(new Label(4,0,"序时进度"));
        sheet.addCell(new Label(5,0,"达成率与序时进度差值"));
    }

    //累加每个人1-12月的预算
    public  List<Long> sumPlans(List<List<Long>> teamList){
        List<Long> list = new ArrayList();
        //获取一个1-12个月的总预算集合
        Long sum1 = (long)0;
        Long sum2 = (long)0;
        Long sum3 = (long)0;
        Long sum4 = (long)0;
        Long sum5 = (long)0;
        Long sum6 = (long)0;
        Long sum7 = (long)0;
        Long sum8 = (long)0;
        Long sum9 = (long)0;
        Long sum10 = (long)0;
        Long sum11 = (long)0;
        Long sum12 = (long)0;
        Long sum13 = (long)0;
        Long sum14 = (long)0;
        Long sum15 = (long)0;
        Long sum16 = (long)0;
        Long sum17 = (long)0;

        for (int i=0;i<teamList.size();i++) {
            //每个人1-12月预算
            List<Long> persons= teamList.get(i);
            Long s1 = persons.get(0);
            sum1 += s1;
            Long s2 = persons.get(1);
            sum2 += s2;
            Long s3 = persons.get(2);
            sum3 += s3;
            Long s4 = persons.get(3);
            sum4 += s4;
            Long s5 = persons.get(4);
            sum5 += s5;
            Long s6 = persons.get(5);
            sum6 += s6;
            Long s7 = persons.get(6);
            sum7 += s7;
            Long s8 = persons.get(7);
            sum8 += s8;
            Long s9 = persons.get(8);
            sum9 += s9;
            Long s10 = persons.get(9);
            sum10 += s10;
            Long s11 = persons.get(10);
            sum11 += s11;
            Long s12 = persons.get(11);
            sum12 += s12;
            Long s13 = persons.get(12);
            sum13 += s13;
            Long s14 = persons.get(13);
            sum14 += s14;
            Long s15 = persons.get(14);
            sum15 += s15;
            Long s16 = persons.get(15);
            sum16 += s16;
            Long s17 = persons.get(16);
            sum17 += s17;

        }
        list.add(sum1);
        list.add(sum2);
        list.add(sum3);
        list.add(sum4);
        list.add(sum5);
        list.add(sum6);
        list.add(sum7);
        list.add(sum8);
        list.add(sum9);
        list.add(sum10);
        list.add(sum11);
        list.add(sum12);
        list.add(sum13);
        list.add(sum14);
        list.add(sum15);
        list.add(sum16);
        list.add(sum17);

        return list;
    }

    //查团队名称
    public String qryTeamByCode(String teamCode){
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        String teamName = teamSaleMapper.qryTeamByCode(teamCode,company);
        if(null == teamName || "".equals(teamName)){
            return "";
        }
        return teamName;
    }

    //去零
    public String getPrettyNumber(String number) {
        return BigDecimal.valueOf(Double.parseDouble(number))
                .stripTrailingZeros().toPlainString();
    }

}