package com.yqjr.fin.mkmm.sales.rest;

import java.text.SimpleDateFormat;
import java.util.*;
import javax.validation.Valid;
import javax.validation.ValidationException;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.BasicBussiness;
import com.yqjr.fin.mkmm.sales.condition.BasicBussinessCondition;
import com.yqjr.fin.mkmm.sales.services.BasicBussinessService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "basicBussinesss")
@RestController
@RequestMapping(value = "/basicBussinesss")
public class BasicBussinessRest extends BaseRest<BasicBussinessService, BasicBussiness> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询业务明细数据（参数：实体对象属性、pageNum、pageSize）", tags = "业务明细数据信息：BasicBussinessRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<BasicBussiness> page(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            BasicBussinessCondition condition) {

        List<BasicBussiness> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<BasicBussiness> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询业务明细数据信息（参数：实体对象属性、pageNum、pageSize）", tags = "业务明细数据信息：BasicBussinessRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<BasicBussiness> pageByJqGrid(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            BasicBussinessCondition condition) {
        List<BasicBussiness> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<BasicBussiness> pageList = new PageInfo<>(list);
        JQGridJsonResult<BasicBussiness> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion
    @Autowired
    BasicBussinessService basicBussinessService;

    @ApiOperation(value = "处理业务系统数据", tags = "处理业务系统数据：PlanTrackRest")
    @RequestMapping(value = "/dataProcess/{nowDate}" , method = RequestMethod.POST)
    public void dataProcess(@PathVariable("nowDate") String nowDate) {
       logger.info("--------开始处理业务数据--------"+nowDate);
       try{
           Date date = null;
           if(StringUtils.isBlank(nowDate)){
               Calendar calendar = Calendar.getInstance();
               calendar.setTime(new Date());
               calendar.add(Calendar.DATE, -1);
               date = calendar.getTime();
           }else{
               SimpleDateFormat simpledf=new SimpleDateFormat("yyyy-MM-dd");
               date = simpledf.parse(nowDate);
           }
           //处理业务数据 转换为BUSINESS数据
           basicBussinessService.transDataFormBussinessView(date);
       } catch (Exception e){
           logger.error("处理业务数据异常，message = " + e.getMessage(),e);
       }
        logger.info("--------完成处理业务数据--------"+nowDate);
    }

}