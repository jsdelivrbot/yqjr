package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.fcsw.meta.api.dto.UserDto;
import com.yqjr.fin.mkmm.sales.common.TimeUtil;
import com.yqjr.fin.mkmm.sales.condition.*;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.*;
import com.yqjr.fin.mkmm.sales.model.PersonDetail;
import com.yqjr.fin.mkmm.sales.services.gateway.MetaGateway;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainReviewProcessVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainReviewVo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import com.yqjr.scfw.common.utils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


//import com.yqjr.fin.mkmm.sales.model.PersonDetail;

@Service
@Transactional(readOnly = true)
public class PersonMainReviewService extends BaseService<PersonMainReviewMapper, PersonMainReview, Long> {

    @Autowired
    private PersonTeamReviewMapper personTeamReviewMapper;
    @Autowired
    private PersonMainReviewMapper personMainReviewMapper;
    @Autowired
    private PersonCityReviewMapper personCityReviewMapper;
    @Autowired
    private PersonBrandReviewMapper personBrandReviewMapper;
    @Autowired
    private WorkFlowService workFlowService;
    @Autowired
    private PersonTeamService personTeamService;
    @Autowired
    private PersonTeamHisService personTeamHisService;
    @Autowired
    private PersonMainService personMainService;
    @Autowired
    private PersonMainHisMapper personMainHisMapper;
    @Autowired
    private PersonCityService personCityService;
    @Autowired
    private PersonBrandService personBrandService;
    @Autowired
    private PersonCityHisService personCityHisService;
    @Autowired
    private  PersonBrandHisService personBrandHisService;
    @Autowired
    private PersonMainHisService personMainHisService;
    @Autowired
    private MetaGateway metaGateway;
    @Autowired
    private PersonTeamReviewService personTeamReviewService;
    @Autowired
    private PersonMainReviewService personMainReviewService;


    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * 获取登录用户所在区域下辖团队
     * @param areaCode
     * @return
     */
    public List<TeamMain> selectTeamByAreaOfPerson(String areaCode ){
        List<TeamMain> list = personMainReviewMapper.selectTeamByAreaOfPerson(areaCode);
        return list;
    }

    /**
     * 查询所有品牌
     * @return
     */
    public List<BrandMain> selectBrands(){
        List<BrandMain> list = personMainReviewMapper.selectBrands();
        return list;
    }

    /**
     * 根据人员所在区域生成人员代码
     * @param areaCode
     * @return
     */
    private String getPersonCodeByAreaCode(String areaCode){
        PersonTeamReviewCondition personTeamReviewCondition = new PersonTeamReviewCondition();
        personTeamReviewCondition.setAreaCode(areaCode);

        int areaCount=personTeamReviewMapper.selectCount(personTeamReviewCondition);
        String maxPersonCode="1";
        if(areaCount>0) {
            //得到最大的序号
            maxPersonCode = personTeamReviewMapper.queryMax(areaCode);
            maxPersonCode=(Integer.parseInt(maxPersonCode)+1)+"";
        }

        //生成规则为： R+区域代码（4/6位）+流水号（4位）
        String personCode=areaCode+String.format("%04d",Integer.parseInt(maxPersonCode));
        return personCode;
    }

    /**
     * 新增销售人员信息
     * @param personDetail
     */
    @Transactional(rollbackFor = { Exception.class })
    public void insert(PersonDetail personDetail) {
        UserContext uc = SessionHolder.getUserContext();
        String companyCode =uc.getComCode();//通过token 获取公司代码
        personDetail.setCompany(companyCode);//保存公司代码
        String name = uc.getName();
        WorkFlow workFlow=new WorkFlow();
        BeanUtils.copyProperties(workFlow,personDetail);
        //生成规则为： R+区域代码（4/6位）+流水号（4位）
        String personCode=this.getPersonCodeByAreaCode(personDetail.getAreaCode());
        personDetail.setPersonCode(personCode);
        //插入工作流表，提交审核状态
        workFlow.setReviewId(personCode);//插入人员信息
        this.insertWorkFlow(workFlow,"01");//提交审核
        workFlow.setFlowId(workFlow.getId());
        //第二次插入工作流表，待审核状态
        this.insertWorkFlow(workFlow,"02");//在插入一条 待审核
        PersonTeamReview personTeamReview = new PersonTeamReview();
        BeanUtils.copyProperties(personTeamReview,personDetail);
        personTeamReview.setFlowId(workFlow.getId());
        personTeamReview.setCompany(personDetail.getCompany());
        personTeamReview.setCompany(companyCode);
        personTeamReview.setStartTime(personDetail.getStartTime());
        personTeamReview.setPersonCheckStart(personDetail.getPersonCheckStart());
        personTeamReview.setPersonUptime(personDetail.getPersonUptime());
        personTeamReview.setPersonCorrectime(personDetail.getPersonCorrectime());
        personTeamReview.setPersonTryStartime(personDetail.getPersonTryStartime());
        personTeamReview.setPersonTryEndtime(personDetail.getPersonTryEndtime());
        personTeamReview.setAreaName(personDetail.getAreaName());
        personTeamReview.setTeamName(personDetail.getTeamName());
        personTeamReview.setCreateName(name);
        //新增销售人员团队信息到审核表
        this.insertPersonTeamReview(personTeamReview);
        PersonMainReview personMainReview = new PersonMainReview();
        BeanUtils.copyProperties(personMainReview,personDetail);
        personMainReview.setStartTime(personDetail.getStartTime());
        personMainReview.setCompany(personDetail.getCompany());
        personMainReview.setLoginName(personDetail.getSearchPerson());
        //新增销售人员基本信息到审核表

        this.insertPersonMainReview(personMainReview);



        //新增销售人员负责城市到审核表
        List<PersonCityReview> cities = personDetail.getCities();
        if (cities !=null && cities.size()>0){
            for (PersonCityReview personCityReview:cities) {
                personCityReview.setPersonCode(personDetail.getPersonCode());
                personCityReview.setCreateTime(personTeamReview.getCreateTime());
                personCityReviewMapper.insert(personCityReview);
            }
        }else {
            PersonCityReview personCityReview=new PersonCityReview();
            personCityReview.setPersonCode(personDetail.getPersonCode());
            personCityReviewMapper.insert(personCityReview);
        }
        //新增销售人员负责品牌到审核表
        List<PersonBrandReview> brands = personDetail.getBrands();
        if (brands != null && brands.size()>0){
            for (PersonBrandReview personBrandReview:brands) {
                personBrandReview.setPersonCode(personDetail.getPersonCode());
                personBrandReview.setCreateTime(personTeamReview.getCreateTime());
                personBrandReviewMapper.insert(personBrandReview);
            }
        }else {
            PersonBrandReview personBrandReview = new PersonBrandReview();
            personBrandReview.setPersonCode(personDetail.getPersonCode());
            personBrandReviewMapper.insert(personBrandReview);
        }
    }


    /**
     * 插入工作流表
     * lzc  2018/6/9
     * @param workFlow
     * @param reviewStatus  审核状态
     */
    public   void   insertWorkFlow(WorkFlow workFlow,String reviewStatus){
        workFlow.setReviewLevel("1");//一级审核
        workFlow.setType("01");//人员状态（01 新增，02 修改）
        workFlow.setModType("01");//人员
        workFlow.setReviewStatus(reviewStatus);//审核状态（00驳回,01提交审核,02待审核,03审核中，04审核通过）
        workFlowService.insert(workFlow);
    }

    /**
     * 插入销售团队审核表
     * lzc  2018/6/9
     * @param personTeamReview
     */
    public  void  insertPersonTeamReview(PersonTeamReview personTeamReview){
        UserContext uc = SessionHolder.getUserContext();
        String name=uc.getName();
        if (name!=null){
            personTeamReview.setCreateName(name);
        }
        personTeamReview.setCreateTime(new Date());//创建时间
        personTeamReview.setReviewStatus("02");//待审核
        personTeamReview.setFlag("1");
        personTeamReview.setReviewType("01");//新增
        personTeamReviewService.insert(personTeamReview);//插入销售人员团队审核表返回主键
    }

    /**
     * 插入销售人员基本信息审核表
     * lzc  2018/6/9
     * @param personMainReview
     */
    public void  insertPersonMainReview(PersonMainReview personMainReview){
        personMainReviewService.insert(personMainReview);
    }

    /**
     * 人员审核列表
     * @param condition
     * @return
     */
    public List<PersonMainReviewVo> selectPersonReviewList(PersonWorkCondition condition, PageBounds... pageBounds){
        List<PersonMainReviewVo> list = personMainReviewMapper.selectPersonReviewTable(condition,pageBounds);
        /*int size = 0;
        if(list!=null && list.size()>0){
            size = list.size();
        }
        int start = (pageNum-1)*pageSize;
        int end = pageNum*pageSize>=size?size:pageNum*pageSize;
        List<PersonMainReviewVo> result = new ArrayList<>(list.subList(start,end));*/
        return list;
    }

    /**
     * 审核中
     * @param personCode 人员代码
     * @param workFlowId 工作流id
     * @return
     */
    @Transactional
    public PersonMainReviewVo reviewIng(String personCode,Long workFlowId,String reviewType){
        WorkFlow workFlow=workFlowService.selectById(workFlowId);
        workFlow.setReviewStatus("03");//审核中
        workFlowService.patchById(workFlow);
        PersonTeamReviewCondition condition = new PersonTeamReviewCondition();
        condition.setPersonCode(personCode);
        condition.setReviewType(reviewType);//区别修改和新增
        condition.setPersonStatus("0");//人员状态无效为当前待审核记录
        condition.setFlag("1");//有效人员状态
        PersonTeamReview personTeamReview= personTeamReviewMapper.selectOneT(condition);
        if (personTeamReview!=null){
            personTeamReview.setReviewStatus("03");
        }
        personTeamReviewMapper.patchById(personTeamReview);
        PersonMainReviewVo personMainReviewVo = personMainReviewMapper.selectPersonReviewByPersonCode(personCode);
        return personMainReviewVo;
    }

    /**
     * 查看审核中数据
     * @param personCode
     * @return
     */
    public PersonMainReviewVo viewIng(String personCode){
        PersonMainReviewVo personMainReviewVo = personMainReviewMapper.selectPersonReviewByPersonCode(personCode);
        return personMainReviewVo;
    }

    /**
     * 人员审核
     * @param personCode
     * @param workid
     * @param reviewStatus
     * @param opinion
     */
    @Transactional
    public void personAudit(String personCode,String workid,String reviewStatus,String opinion){
        //查询审核人员信息
        UserContext us = SessionHolder.getUserContext();
        String name = us.getName();
        PersonMainReviewVo personMainReviewVo = personMainReviewMapper.selectPersonReviewByPersonCode(personCode);
        PersonTeamReviewCondition personTeamReviewCondition=new PersonTeamReviewCondition();
        personTeamReviewCondition.setPersonCode(personCode);
        personTeamReviewCondition.setReviewType(personMainReviewVo.getPersonTeamReview().getReviewType());//区别修改和新增
        personTeamReviewCondition.setPersonStatus("0");//人员状态无效为当前待审核记录
        personTeamReviewCondition.setFlag("1");
        PersonTeamReview personTeamReview= this.personTeamReviewMapper.selectOneT(personTeamReviewCondition);
        personTeamReview.setPersonCode(personCode);
        List<PersonCityReview> cities = new ArrayList<>();
        List<PersonBrandReview> brands = new ArrayList<>();
        if(personMainReviewVo !=null){
            cities = personMainReviewVo.getCities();
            brands = personMainReviewVo.getBrands();
        }
       /* //人员代码查询人员团队信息
        //人员代码查询人员基本信息
        PersonMainReviewCondition personMainReviewCondition = new PersonMainReviewCondition();
        personMainReviewCondition.setPersonCode(personCode);
        PersonMainReview personMainReview = this.personMainReviewMapper.selectOne(personMainReviewCondition);
        //人员代码查询负责城市
        //*/
        //审核流信息
        WorkFlow workFlow=workFlowService.selectById(Long.valueOf(workid));
        String reviewLevel=workFlow.getReviewLevel();
        workFlow.setModifierName(name);
        workFlow.setModifyTime(new Date());
        if("04".equals(reviewStatus)){//审核通过
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("04");

            workFlowService.patchById(workFlow);//更新当前节点
            if ("1".equals(reviewLevel)){//1级审核通过
                workFlow.setReviewLevel("2");//设置流转到2级
                workFlow.setReviewStatus("02");//设置下个节点为待审核
                workFlow.setModifyTime(null);//操作时间为空
                workFlow.setFlowId(workFlow.getId());
                workFlowService.insert(workFlow);//插入2级节点
                personTeamReview.setFlowId(workFlow.getId());//更新审核表最新工作流ID
                personTeamReview.setReviewStatus("02");//待审核
                this.personTeamReviewMapper.patchById(personTeamReview);//更新审核表
            }else if("2".equals(reviewLevel)){//2级审核通过数据正式生效
                String workflowType=workFlow.getType();//
                personTeamReview.setReviewStatus("04");
                personTeamReview.setFlag("0");//设置当前数据为无效
                personTeamReview.setPersonStatus("1");//审核通过设置人员状态为有效
                this.personTeamReviewMapper.patchById(personTeamReview);//更新审核表

                //判断此条审核数据是操作类型是添加 还是修改
                if("01".equals(workflowType)){//添加操作
                    PersonTeam personTeam = personTeamReviewToPersonTeam(personTeamReview);//人员团队审核对象转人员团队对象
                    PersonMain personMain = personMainReviewToPersonMain(personMainReviewVo);//人员审核对象转人员对象
                    personTeam.setPersonStatus("0");
                    personTeam.setCreateTime(new Date());
                    //添加有效数据到personTeam表

                    personTeamService.insert(personTeam);
                    personMain.setCreateTime(personTeam.getCreateTime());
                    //添加有效数据到personMain表
                    personMainService.insert(personMain);
                    //添加有效数据到personCity表
                    for (PersonCityReview personCityReview:cities) {
                        PersonCity personCity = new PersonCity();
                        personCity.setCityCode(personCityReview.getCityCode());
                        personCity.setCityName(personCityReview.getCityName());
                        personCity.setPersonCode(personCode);
                        personCity.setCreateTime(personTeam.getCreateTime());
                        personCityService.insert(personCity);
                    }
                    //添加有效数据到personBrand表
                    for (PersonBrandReview personBrandReview:brands) {
                        PersonBrand personBrand = new PersonBrand();
                        personBrand.setBrandCode(personBrandReview.getBrandCode());
                        personBrand.setBrandName(personBrandReview.getBrandName());
                        personBrand.setPersonCode(personCode);
                        personBrand.setCreateTime(personTeam.getCreateTime());
                        personBrandService.insert(personBrand);
                    }
                }else if("02".equals(workflowType)){//修改操作
                    //1.主表历史数据添加到轨迹表
                    PersonTeamCondition personTeamCondition=new PersonTeamCondition();
                    personTeamCondition.setPersonCode(personCode);
                    //人员团队轨迹表插入旧数据
                    List<PersonTeam> personTeams=personTeamService.selectList(personTeamCondition);
                    if (personTeams.size()>0){
                        PersonTeam personTeamOdl = personTeams.get(0);
                        PersonTeamHis personTeamHis = personTeamToPersonTeamHis(personTeamOdl);
                        personTeamHis.setOperateType(1);
                        personTeamHisService.insert(personTeamHis);//人员团队信息备份
                    }
                    PersonMainCondition personMainCondition = new PersonMainCondition();
                    personMainCondition.setPersonCode(personCode);
                    //人员轨迹表插入旧数据
                    List<PersonMain> personMains=personMainService.selectList(personMainCondition);
                    if (personMains.size()>0){
                        PersonMain personMainOdl = personMains.get(0);
                        PersonMainHis personMainHis = personMainToPersonMainHis(personMainOdl);
                        personMainHis.setOperateType(1);
                        long personHisId = personMainHisMapper.insert(personMainHis);//人员基本信息备份返回主键
                        //2.修改主表记录
                        PersonTeam personTeam = personTeamReviewToPersonTeam(personTeamReview);//人员团队审核对象转人员团队对象
                        PersonMain personMain = personMainReviewToPersonMain(personMainReviewVo);//人员审核对象转人员对象
                        //更新人员团队表
                        personTeam.setPersonStatus("0");//修改人员状态为有效
                        personTeamService.patchByPersonCode(personTeam);
                        //更新人员表
                        personMainService.patchByPersonCode(personMain);
                        //查询人员负责城市
                        PersonCityCondition personCityCondition= new PersonCityCondition();
                        personCityCondition.setPersonCode(personCode);
                        List<PersonCity> cityList = personCityService.selectList(personCityCondition);
                        PersonCity entity = new PersonCity();
                        if(cityList!=null && cityList.size()>0){
                            entity = cityList.get(0);
                            //人员城市插入轨迹表
                            for (PersonCity personCity:cityList) {
                                PersonCityHis personCityHis = new PersonCityHis();
                                personCityHis.setCityCode(personCity.getCityCode());
                                personCityHis.setCityName(personCity.getCityName());
                                personCityHis.setPersonCode(personCity.getPersonCode());
                                personCityHis.setCreateTime(entity.getCreateTime());
                                personCityHis.setCreator(entity.getCreator());
                                personCityHis.setModifyTime(personTeamReview.getModifyTime());
                                personCityHis.setModifier(personTeamReview.getModifier());
                                personCityHis.setPersonHisId(personMainHis.getId());
                                personCityHis.setStartTime(new Date());
                                personCityHisService.insert(personCityHis);
                                //删除原有记录
                                personCity.setPersonCode(personCode);
                                personCityService.delete(personCity);
                            }

                        }
                        //更新人员负责城市表
                        if (cities !=null && cities.size()>0){
                            for (PersonCityReview personCityReview:cities) {
                                PersonCity personCity =  new PersonCity();
                                personCity.setCreator(entity.getCreator());
                                personCity.setCreateTime(entity.getCreateTime());
                                personCity.setPersonCode(personCode);
                                personCity.setModifyTime(personTeamReview.getModifyTime());
                                personCity.setModifier(personTeamReview.getModifier());
                                personCity.setCityCode(personCityReview.getCityCode());
                                personCity.setCityName(personCityReview.getCityName());
                                personCity.setStartTime(new Date());
                                personCityService.insert(personCity);
                            }
                        }
                        //查询人员负责品牌
                        PersonBrandCondition personBrandCondition = new PersonBrandCondition();
                        personBrandCondition.setPersonCode(personTeamReview.getPersonCode());
                        List<PersonBrand> personBrands = personBrandService.selectList(personBrandCondition);
                        PersonBrand bean = new PersonBrand();
                        if(personBrands!=null && personBrands.size()>0){
                            bean = personBrands.get(0);
                            bean.setPersonCode(personCode);
                            //人员品牌插入轨迹表
                            for (PersonBrand personBrand:personBrands) {
                                PersonBrandHis personBrandHis =  new PersonBrandHis();
                                personBrandHis.setBrandCode(personBrand.getBrandCode());
                                personBrandHis.setBrandName(personBrand.getBrandName());
                                personBrandHis.setPersonCode(personBrand.getPersonCode());
                                personBrandHis.setCreateTime(bean.getCreateTime());
                                personBrandHis.setCreator(bean.getCreator());
                                personBrandHis.setModifyTime(personTeamReview.getModifyTime());
                                personBrandHis.setModifier(personTeamReview.getModifier());
                                personBrandHis.setPersonHisId(personMainHis.getId());
                                personBrandHis.setStartTime(new Date());
                                personBrandHisService.insert(personBrandHis);
                                //删除原有记录
                                personBrand.setPersonCode(personCode);
                                personBrandService.delete(personBrand);
                            }
                        }
                        //更新人员负责品牌表
                        if (brands != null && brands.size()>0){
                            for (PersonBrandReview personBrandReview:brands) {
                                PersonBrand personBrand = new PersonBrand();
                                personBrand.setCreator(bean.getCreator());
                                personBrand.setCreateTime(bean.getCreateTime());
                                personBrand.setPersonCode(personCode);
                                personBrand.setModifyTime(personTeamReview.getModifyTime());
                                personBrand.setModifier(personTeamReview.getModifier());
                                personBrand.setBrandCode(personBrandReview.getBrandCode());
                                personBrand.setBrandName(personBrandReview.getBrandName());
                                personBrand.setStartTime(new Date());
                                personBrandService.insert(personBrand);
                            }
                        }
                    }

                }
            }        }else if("00".equals(reviewStatus)){//打回操作
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("00");
            workFlowService.patchById(workFlow);//更新当前节点
            //更新PersonTeamReview表审核状态
            personTeamReview.setReviewStatus("00");
            this.personTeamReviewMapper.patchById(personTeamReview);

        }
    }

    /**
     * 人员团队审核对象转人员团队对象
     * @param personTeamReview
     * @return
     */
    private PersonTeam personTeamReviewToPersonTeam(PersonTeamReview personTeamReview){
        UserContext uc = SessionHolder.getUserContext();
        String areaName = uc.getAreaName();
        PersonTeam personTeam = new PersonTeam();
        personTeam.setTeamCode(personTeamReview.getTeamCode());
        personTeam.setAreaName(areaName);
        personTeam.setTeamName(personTeamReview.getTeamName());
        personTeam.setAreaCode(personTeamReview.getAreaCode());
        personTeam.setCompany(personTeamReview.getCompany());
        personTeam.setPersonCheckStart(personTeamReview.getPersonCheckStart());
        personTeam.setPersonCode(personTeamReview.getPersonCode());
        personTeam.setPersonCorrectime(personTeamReview.getPersonCorrectime());
        personTeam.setPersonJointime(personTeamReview.getPersonJointime());
        personTeam.setPersonLevel(personTeamReview.getPersonLevel());
        personTeam.setPersonNature(personTeamReview.getPersonNature());
        personTeam.setPersonStatus(personTeamReview.getPersonStatus());
        personTeam.setPersonTryEndtime(personTeamReview.getPersonTryEndtime());
        personTeam.setPersonTryStartime(personTeamReview.getPersonTryStartime());
        personTeam.setPersonUptime(personTeamReview.getPersonUptime());
        personTeam.setRemark(personTeamReview.getRemark());
        personTeam.setCreator(personTeamReview.getCreator());
        personTeam.setModifier(personTeamReview.getModifier());
        personTeam.setStartTime(personTeamReview.getStartTime());
        personTeam.setModifyTime(personTeamReview.getModifyTime());
        personTeam.setCreateTime(personTeamReview.getCreateTime());
        return personTeam;
    }

    /**
     * 人员团队对象转人员团队备份对象
     * @param personTeam
     * @return
     */
    private PersonTeamHis personTeamToPersonTeamHis(PersonTeam personTeam){
        PersonTeamHis personTeamHis = new PersonTeamHis();
        personTeamHis.setTeamCode(personTeam.getTeamCode());
        personTeamHis.setAreaCode(personTeam.getAreaCode());
        personTeamHis.setCompany(personTeam.getCompany());
        personTeamHis.setPersonCheckStart(personTeam.getPersonCheckStart());
        personTeamHis.setPersonCode(personTeam.getPersonCode());
        personTeamHis.setPersonCorrectime(personTeam.getPersonCorrectime());
        personTeamHis.setPersonJointime(personTeam.getPersonJointime());
        personTeamHis.setPersonLevel(personTeam.getPersonLevel());
        personTeamHis.setPersonNature(personTeam.getPersonNature());
        personTeamHis.setPersonStatus(personTeam.getPersonStatus());
        personTeamHis.setPersonTryEndtime(personTeam.getPersonTryEndtime());
        personTeamHis.setPersonTryStartime(personTeam.getPersonTryStartime());
        personTeamHis.setPersonUptime(personTeam.getPersonUptime());
        personTeamHis.setRemark(personTeam.getRemark());
        personTeamHis.setCreator(personTeam.getCreator());
        personTeamHis.setModifier(personTeam.getModifier());
        personTeamHis.setStartTime(personTeam.getStartTime());
        personTeamHis.setModifyTime(personTeam.getModifyTime());
        personTeamHis.setCreateTime(personTeam.getCreateTime());
        personTeamHis.setRemark(personTeam.getRemark());
        return personTeamHis;
    }

    /**
     * 人员审核对象转人员对象
     * @param personMainReview
     * @return
     */
    private PersonMain personMainReviewToPersonMain(PersonMainReviewVo personMainReview){
        UserContext uc = SessionHolder.getUserContext();
        String code = uc.getComCode();
        PersonMain personMain = new PersonMain();
        personMain.setPerrsonEmail(personMainReview.getPersonEmail());
        personMain.setPersonAddress(personMainReview.getPersonAddress());
        personMain.setPersonAge(personMainReview.getPersonAge());
        personMain.setPersonBirth(personMainReview.getPersonBirth());
        personMain.setPersonCode(personMainReview.getPersonCode());
        personMain.setPersonEdu(personMainReview.getPersonEdu());
        personMain.setPersonEdulevel(personMainReview.getPersonEdulevel());
        personMain.setPersonEthnic(personMainReview.getPersonEthnic());
        personMain.setPersonFirstworktime(personMainReview.getPersonFirstworktime());
        personMain.setPersonHomephone(personMainReview.getPersonHomephone());
        personMain.setPersonIdcard(personMainReview.getPersonIdcard());
        personMain.setLoginName(personMainReview.getLoginName());
        personMain.setPersonMarr(personMainReview.getPersonMarr());
        personMain.setPersonName(personMainReview.getPersonName());
        personMain.setPersonPhone(personMainReview.getPersonPhone());
        personMain.setPersonSchool(personMainReview.getPersonSchool());
        personMain.setPersonStatus(personMainReview.getPersonStatus());
        personMain.setPersonSubject(personMainReview.getPersonSubject());
        personMain.setPersonWorkphone(personMainReview.getPersonWorkphone());
        personMain.setPersonWorktime(personMainReview.getPersonWorktime());
        personMain.setRemark(personMainReview.getRemark());
        personMain.setCreator(personMainReview.getCreator());
        personMain.setCompany(code);
        personMain.setModifier(personMainReview.getModifier());
        personMain.setStartTime(personMainReview.getPersonTeamReview().getStartTime());
        personMain.setModifyTime(personMainReview.getModifyTime());
        personMain.setCreateTime(personMainReview.getCreateTime());
        return personMain;
    }

    /**
     * 人员对象转人员备份对象
     * @param personMain
     * @return
     */
    private PersonMainHis personMainToPersonMainHis(PersonMain personMain){
        PersonMainHis personMainHis = new PersonMainHis();

        personMainHis.setPersonEmail(personMain.getPerrsonEmail());
        personMainHis.setPersonAddress(personMain.getPersonAddress());
        personMainHis.setPersonAge(personMain.getPersonAge());
        personMainHis.setPersonBirth(personMain.getPersonBirth());
        personMainHis.setPersonCode(personMain.getPersonCode());
        personMainHis.setPersonEdu(personMain.getPersonEdu());
        personMainHis.setPersonEdulevel(personMain.getPersonEdulevel());
        personMainHis.setPersonEthnic(personMain.getPersonEthnic());
        personMainHis.setPersonFirstworktime(personMain.getPersonFirstworktime());
        personMainHis.setPersonHomephone(personMain.getPersonHomephone());
        personMainHis.setPersonIdcard(personMain.getPersonIdcard());
        personMainHis.setPersonMarr(personMain.getPersonMarr());
        personMainHis.setPersonName(personMain.getPersonName());
        personMainHis.setPersonPhone(personMain.getPersonPhone());
        personMainHis.setPersonSchool(personMain.getPersonSchool());
        personMainHis.setPersonSubject(personMain.getPersonSubject());
        personMainHis.setPersonWorkphone(personMain.getPersonWorkphone());
        personMainHis.setPersonWorktime(personMain.getPersonWorktime());
        personMainHis.setRemark(personMain.getRemark());
        personMainHis.setCreator(personMain.getCreator());
        personMainHis.setModifier(personMain.getModifier());
        personMainHis.setCompany(personMain.getCompany());
        personMainHis.setStartTime(personMain.getStartTime());
        personMainHis.setModifyTime(personMain.getModifyTime());
        personMainHis.setCreateTime(personMain.getCreateTime());
        return personMainHis;
    }

    /**
     * 人员审核进度处理列表
     * @param condition
     * @param pageBounds
     * @return
     */
    @Transactional
    public List<PersonMainReviewProcessVo> selectPersonReviewProcessList(PersonWorkCondition condition,PageBounds pageBounds) {
        List<PersonMainReviewProcessVo> list = personMainReviewMapper.selectPersonReviewProcessList(condition,pageBounds);
        return list;
    }

    /**
     * 人员审核进度处理详情
     * @param personCode
     * @return
     */
    @Transactional
    public List<PersonMainReviewVo> reviewWatch(String personCode) {
        List<PersonMainReviewVo> personMainReviewVo = personMainReviewMapper.selectPersonReviewProcessDetail(personCode);
        return personMainReviewVo;
    }


    /**
     * 人员审核进度处理
     * @param personCode
     * @param workid
     * @param reviewStatus
     * @param opinion
     */
    @Transactional
    public void personReviewModify(String personCode,String workid,String reviewStatus,String opinion){
        //查询审核人员信息
        List<PersonMainReviewVo> personMainReviewVos = personMainReviewMapper.selectPersonReviewProcessDetail(personCode);
        PersonMainReviewVo personMainReviewVo = personMainReviewVos.get(0);
        PersonTeamReviewCondition personTeamReviewCondition = new PersonTeamReviewCondition();
        personTeamReviewCondition.setPersonCode(personCode);
        PersonTeamReview personTeamReview= this.personTeamReviewMapper.selectOneT(personTeamReviewCondition);
        List<PersonCityReview> cities = new ArrayList<>();
        List<PersonBrandReview> brands = new ArrayList<>();
        if(personMainReviewVo !=null){
            cities = personMainReviewVo.getCities();
            brands = personMainReviewVo.getBrands();
        }
       /* //人员代码查询人员团队信息
        //人员代码查询人员基本信息
        PersonMainReviewCondition personMainReviewCondition = new PersonMainReviewCondition();
        personMainReviewCondition.setPersonCode(personCode);
        PersonMainReview personMainReview = this.personMainReviewMapper.selectOne(personMainReviewCondition);
        //人员代码查询负责城市
        //*/
        //审核流信息
        WorkFlow workFlow=workFlowService.selectById(Long.valueOf(workid));
        String reviewLevel=workFlow.getReviewLevel();

        if("04".equals(reviewStatus)){//审核通过
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("04");
            workFlowService.patchById(workFlow);//更新当前节点
            if ("1".equals(reviewLevel)){//1级审核通过
                workFlow.setReviewLevel("2");//设置流转到2级
                workFlow.setReviewStatus("02");//设置下个节点为待审核
                workFlow.setModifyTime(null);//操作时间为空
                workFlow.setFlowId(workFlow.getId());
                workFlowService.insert(workFlow);//插入2级节点
                personTeamReview.setFlowId(workFlow.getId());//更新审核表最新工作流ID
                personTeamReview.setReviewStatus("02");//待审核
                this.personTeamReviewMapper.patchById(personTeamReview);//更新审核表
            }else if("2".equals(reviewLevel)){//2级审核通过数据正式生效
                String workflowType=workFlow.getType();//
                PersonTeam personTeam = personTeamReviewToPersonTeam(personTeamReview);//人员团队审核对象转人员团队对象
                PersonMain personMain = personMainReviewToPersonMain(personMainReviewVo);//人员审核对象转人员对象
                personTeamReview.setReviewStatus("04");
                personTeamReview.setFlag("0");//设置当前数据为无效
                this.personTeamReviewMapper.patchById(personTeamReview);//更新审核表

                //判断此条审核数据是操作类型是添加 还是修改
                if("01".equals(workflowType)){//添加操作
                    personTeam.setPersonStatus("0");
                    personTeam.setCreateTime(new Date());
                    //添加有效数据到personTeam表
                    personTeamService.insert(personTeam);
                    personMain.setCreateTime(new Date());
                    //添加有效数据到personMain表
                    personMainService.insert(personMain);
                    //添加有效数据到personCity表
                    for (PersonCityReview personCityReview:cities) {
                        PersonCity personCity = new PersonCity();
                        personCity.setCityCode(personCityReview.getCityCode());
                        personCity.setCityName(personCityReview.getCityName());
                        personCity.setPersonCode(personCode);
                        personCity.setCreateTime(new Date());
                        personCityService.insert(personCity);
                    }
                    //添加有效数据到personBrand表
                    for (PersonBrandReview personBrandReview:brands) {
                        PersonBrand personBrand = new PersonBrand();
                        personBrand.setBrandCode(personBrandReview.getBrandCode());
                        personBrand.setBrandName(personBrandReview.getBrandName());
                        personBrand.setPersonCode(personCode);
                        personBrand.setCreateTime(new Date());
                        personBrandService.insert(personBrand);
                    }
                }else if("02".equals(workflowType)){//修改操作
                    //1.修改主表记录
                    //更新人员团队表
                    personTeam.setCreateTime(personTeamReview.getCreateTime());
                    personTeam.setModifier(personTeamReview.getModifier());
                    personTeam.setModifyTime(personTeamReview.getModifyTime());
                    personTeamService.patchByPersonCode(personTeam);
                    //更新人员表
                    personMain.setCreateTime(personTeamReview.getCreateTime());
                    personMain.setModifier(personTeamReview.getModifier());
                    personMain.setModifyTime(personTeamReview.getModifyTime());
                    personMainService.patchByPersonCode(personMain);
                    //更新人员负责城市表
                    PersonCityCondition personCityCondition=new PersonCityCondition();
                    personCityCondition.setPersonCode(personCode);
                    List<PersonCity> cityList = personCityService.selectList(personCityCondition);
                    PersonCity entity = new PersonCity();
                    if(cityList!=null && cityList.size()>0){
                        entity = cityList.get(0);
                    }
                    entity.setPersonCode(personCode);
                    personCityService.delete(entity);
                    if (cities !=null && cities.size()>0){
                        for (PersonCityReview personCityReview:cities) {
                            PersonCity personCity =  new PersonCity();
                            personCity.setCreator(personCityReview.getCreator());
                            personCity.setCreateTime(personCityReview.getCreateTime());
                            personCity.setPersonCode(personCityReview.getPersonCode());
                            personCity.setModifyTime(personCityReview.getModifyTime());
                            personCity.setModifier(personCityReview.getModifier());
                            personCity.setCityCode(personCityReview.getCityCode());
                            personCity.setCityName(personCityReview.getCityName());
                            personCityService.insert(personCity);
                        }
                    }
                    //更新人员负责品牌表
                    PersonBrandCondition personBrandCondition = new PersonBrandCondition();
                    personBrandCondition.setPersonCode(personTeamReview.getPersonCode());
                    List<PersonBrand> personBrands = personBrandService.selectList(personBrandCondition);
                    PersonBrand bean = new PersonBrand();
                    if(personBrands!=null && personBrands.size()>0){
                        bean = personBrands.get(0);
                    }
                    bean.setPersonCode(personCode);
                    personBrandService.delete(bean);
                    if (brands != null && brands.size()>0){
                        for (PersonBrandReview personBrandReview:brands) {
                            PersonBrand personBrand = new PersonBrand();
                            personBrand.setCreator(personBrandReview.getCreator());
                            personBrand.setCreateTime(personBrandReview.getCreateTime());
                            personBrand.setPersonCode(personBrandReview.getPersonCode());
                            personBrand.setModifyTime(personBrandReview.getModifyTime());
                            personBrand.setModifier(personBrandReview.getModifier());
                            personBrand.setBrandCode(personBrandReview.getBrandCode());
                            personBrand.setBrandName(personBrandReview.getBrandName());
                            personBrandService.insert(personBrand);
                        }
                    }
                    //2.主表数据添加到轨迹表
                    PersonTeamCondition personTeamCondition=new PersonTeamCondition();
                    personTeamCondition.setPersonCode(personTeamReview.getPersonCode());
                    //人员团队轨迹表插入旧数据
                    List<PersonTeam> personTeams=personTeamService.selectList(personTeamCondition);
                    PersonTeam personTeamOdl = personTeams.get(0);
                    PersonTeamHis personTeamHis = personTeamToPersonTeamHis(personTeamOdl);
                    personTeamHis.setOperateType(1);
                    personTeamHisService.insert(personTeamHis);//人员团队信息备份

                    PersonMainCondition personMainCondition=new PersonMainCondition();
                    personMainCondition.setPersonCode(personTeamReview.getPersonCode());
                    //人员轨迹表插入旧数据
                    List<PersonMain> personMains=personMainService.selectList(personMainCondition);
                    PersonMain personMainOdl = personMains.get(0);
                    PersonMainHis personMainHis = personMainToPersonMainHis(personMainOdl);
                    personMainHis.setOperateType(1);
                    personMainHisService.insert(personMainHis);//人员基本信息备份
                    //人员城市插入轨迹表
                    if (cityList != null && cityList.size()<0){
                        for (PersonCity personCity:cityList) {
                            PersonCityHis personCityHis = new PersonCityHis();
                            personCityHis.setCityCode(personCity.getCityCode());
                            personCityHis.setCityName(personCity.getCityName());
                            personCityHis.setPersonCode(personCity.getPersonCode());
                            personCityHis.setCreateTime(new Date());
                            personCityHisService.insert(personCityHis);
                        }
                    }
                    //人员品牌插入轨迹表
                    if (personBrands != null && personBrands.size()>0){
                        for (PersonBrand personBrand:personBrands) {
                            PersonBrandHis personBrandHis =  new PersonBrandHis();
                            personBrandHis.setBrandCode(personBrand.getBrandCode());
                            personBrandHis.setBrandName(personBrand.getBrandName());
                            personBrandHis.setPersonCode(personBrand.getPersonCode());
                            personBrandHis.setCreateTime(new Date());
                            personBrandHisService.insert(personBrandHis);
                        }
                    }
                }
            }        }else if("00".equals(reviewStatus)){//打回操作
            workFlow.setOpinion(opinion);
            workFlow.setReviewStatus("00");
            workFlowService.patchById(workFlow);//更新当前节点
            //更新PersonTeamReview表审核状态
            personTeamReview.setReviewStatus("00");
            this.personTeamReviewMapper.patchById(personTeamReview);

        }
    }

    /**
     * 人员审核进度处理-信息修改
     * @param personMainAndTeamReviewCondition
     * @return
     */
    @Transactional
    public Integer updatePersonMainAndTeam(PersonMainAndTeamReviewCondition personMainAndTeamReviewCondition) {
        if (personMainAndTeamReviewCondition.getPersonCode() == null || "".equals(personMainAndTeamReviewCondition.getPersonCode())){
            return 0;
        }

        //修改人员负责城市
        if (personMainAndTeamReviewCondition.getCityChanged()){
            List<PersonReviewCitiesCondition> cities = personMainAndTeamReviewCondition.getCities();
            personCityReviewMapper.deleteByPersonCode(personMainAndTeamReviewCondition.getPersonCode());
            if (cities != null && cities.size()>0){
                for (PersonReviewCitiesCondition personReviewCitiesCondition : cities){
                    PersonCityReview personCityReview = new PersonCityReview();
                    personCityReview.setPersonCode(personMainAndTeamReviewCondition.getPersonCode());
                    personCityReview.setCreateTime(new Date());
                    personCityReview.setCityCode(personReviewCitiesCondition.getCityCode());
                    personCityReview.setCityName(personReviewCitiesCondition.getCityName());
                    personCityReviewMapper.insertOneSelected(personCityReview);
                }
            }
        }
        //修改人员负责品牌
        if (personMainAndTeamReviewCondition.getBrandChanged()){
            List<PersonReviewBrandsCondition> brands = personMainAndTeamReviewCondition.getBrands();
            personBrandReviewMapper.deleteByPersonCode(personMainAndTeamReviewCondition.getPersonCode());
            if (brands != null && brands.size()>0){
                for (PersonReviewBrandsCondition personReviewBrandsCondition : brands){
                    PersonBrandReview personBrandReview = new PersonBrandReview();
                    personBrandReview.setPersonCode(personMainAndTeamReviewCondition.getPersonCode());
                    personBrandReview.setCreateTime(new Date());
                    personBrandReview.setBrandCode(personReviewBrandsCondition.getBrandCode());
                    personBrandReview.setBrandName(personReviewBrandsCondition.getBrandName());
                    personBrandReviewMapper.insertOneSelected(personBrandReview);
                }
            }
        }
        PersonMainReview personMainReview = this.conditionToPersonMainReview(personMainAndTeamReviewCondition);
        PersonTeamReview personTeamReview = this.conditionToPersonTeamReview(personMainAndTeamReviewCondition);
        PersonTeamReview personTeamReviewForInsert = this.conditionToPersonTeamReviewForInsert(personMainAndTeamReviewCondition);
        WorkFlow workFlow=new WorkFlow();
        workFlow.setReviewId(personMainAndTeamReviewCondition.getPersonCode());//人员ID
        workFlow.setReviewLevel("1");
        if (personMainAndTeamReviewCondition!=null&&personMainAndTeamReviewCondition.getReviewType().equals("01")){
            workFlow.setType("01");
        }else if (personMainAndTeamReviewCondition.getReviewType().equals("02")){
            workFlow.setType("02");
        }
        workFlow.setModType("02");
        workFlow.setReviewStatus("01");
        workFlowService.insert(workFlow);
        workFlow.setFlowId(workFlow.getId());
        workFlow.setReviewStatus("02");//同时增加待审核数据
        workFlowService.insert(workFlow);
        personTeamReviewForInsert.setFlowId(workFlow.getId());
        personMainReviewMapper.updateByPersonCodeAndId(personMainReview);
        personTeamReviewMapper.updateByPersonCodeAndId(personTeamReview);
        //新增人员审核数据
        Integer count = personTeamReviewMapper.insert(personTeamReviewForInsert);
        return count;
    }
    //修改人员审核被驳回的数据
    private PersonMainReview conditionToPersonMainReview(PersonMainAndTeamReviewCondition condition) {
        PersonMainReview personMainReview = new PersonMainReview();
        personMainReview.setId(condition.getPersonReviewId());
        personMainReview.setPersonCode(condition.getPersonCode());
        personMainReview.setRemark(condition.getRemark());
        personMainReview.setStartTime(condition.getStartTime());
        personMainReview.setPersonEmail(condition.getPersonEmail());
        personMainReview.setPersonAddress(condition.getPersonAddress());
        personMainReview.setPersonHomephone(condition.getPersonHomephone());
        personMainReview.setPersonPhone(condition.getPersonPhone());
        personMainReview.setPersonWorkphone(condition.getPersonWorkphone());
        return personMainReview;
    }
    //修改人员审核被驳回的数据
    private PersonTeamReview conditionToPersonTeamReview(PersonMainAndTeamReviewCondition condition) {
        UserContext uc = SessionHolder.getUserContext();
        String companyCode =uc.getComCode();//通过token 获取公司代码
        PersonTeamReview personTeamReview = new PersonTeamReview();
        personTeamReview.setId(condition.getPersonTeamId());
        personTeamReview.setModifyTime(new Date());
        personTeamReview.setFlag("0");
        personTeamReview.setCreateName(condition.getCreateName());
        personTeamReview.setStartTime(condition.getStartTime());
        personTeamReview.setTeamName(condition.getTeamName());
        personTeamReview.setTeamCode(condition.getTeamCode());
        personTeamReview.setPersonCode(condition.getPersonCode());
        personTeamReview.setCompany(companyCode);
        return personTeamReview;
    }
    //添加人员审核的数据
    private PersonTeamReview conditionToPersonTeamReviewForInsert(PersonMainAndTeamReviewCondition condition) {
        UserContext uc = SessionHolder.getUserContext();
        String companyCode =uc.getComCode();//通过token 获取公司代码
        String creator=uc.getId();
        PersonTeamReview personTeamReview = new PersonTeamReview();
        personTeamReview.setCreateTime(new Date());
        personTeamReview.setFlag("1");
        personTeamReview.setReviewStatus("02");
        personTeamReview.setRemark(condition.getRemark());
        personTeamReview.setCreateName(condition.getCreateName());
        personTeamReview.setStartTime(condition.getStartTime());
        personTeamReview.setAreaCode(condition.getAreaCode());
        personTeamReview.setReviewType(condition.getReviewType());
        personTeamReview.setTeamCode(condition.getTeamCode());
        personTeamReview.setTeamName(condition.getTeamName());
        personTeamReview.setPersonCode(condition.getPersonCode());
        personTeamReview.setPersonNature(condition.getPersonNature());
        personTeamReview.setPersonLevel(condition.getPersonLevel());
        personTeamReview.setPersonStatus(condition.getPersonStatus());
        personTeamReview.setPersonCheckStart(condition.getPersonCheckStart());
        personTeamReview.setPersonUptime(condition.getPersonUptime());
        personTeamReview.setPersonCorrectime(condition.getPersonCorrectime());
        personTeamReview.setPersonTryStartime(condition.getPersonTryStartime());
        personTeamReview.setPersonTryEndtime(condition.getPersonTryEndtime());
        personTeamReview.setPersonJointime(condition.getPersonJointime());
        personTeamReview.setCompany(companyCode);
        if (creator!=null&&!creator.equals("")){
            personTeamReview.setCreator(Long.parseLong(creator));
        }
        return personTeamReview;
    }

    /**
     * 通过用户名带回人员信息
     * create by lzc  2018/6/6
     * @param searchPerson 查找用户名
     * @return
     */
    public  PersonDetail  getPersonMainByLoginName(String searchPerson){
        List<UserDto>  userDtoList =new ArrayList<>() ;
        PersonDetail personDetail = new PersonDetail();
        UserDto userDto = new UserDto();
        userDtoList = metaGateway.getByloginName(searchPerson);
        //如果通过用户名查到数据将数据整合返回，查不到数据返回null
        if (userDtoList == null|| userDtoList.size()==0){
            return  null;
        }else {
            TimeUtil timeUtil =new TimeUtil();
            userDto=userDtoList.get(0);
            personDetail.setPersonCode(this.getPersonCodeByAreaCode(userDto.getAreaCode()));//员工编码
            personDetail.setPersonName(userDto.getUserName());//员工姓名
            personDetail.setPersonIdcard(userDto.getIdcard());//身份证号
            personDetail.setPersonBirth(userDto.getBirthday());//出生日期
            if (userDto.getBirthday()!=null){
                personDetail.setPersonAge(timeUtil.getTime(userDto.getBirthday()));//年龄
            }
            personDetail.setPersonEthnic(userDto.getPersonethnic());//民族
            personDetail.setPersonMarr(userDto.getPersonmarr());//婚姻状况
            personDetail.setPersonSchool(userDto.getPersonschool());//毕业学校
            personDetail.setPersonSubject(userDto.getPersonsubject());//专业
            personDetail.setPersonEdu(userDto.getPersonedu());//最高学历
            personDetail.setPersonEdulevel(userDto.getPersonedulevel());//学位
            personDetail.setPersonFirstworktime(userDto.getPersonjointime());//参加工作日期
            if (userDto.getPersonjointime()!=null){
                personDetail.setPersonWorktime(timeUtil.getTime(userDto.getPersonjointime()));//工龄
            }
            personDetail.setAreaCode(userDto.getAreaCode());//区域代码
            personDetail.setAreaName(userDto.getAreaName());//区域名称
            personDetail.setPersonStatus(userDto.getStatus());//人员状态
            return personDetail;
        }
    }

    /**
     * 人员审核时回写
     * @param personCode
     */
    public void update(String personCode){
        UserContext uc = SessionHolder.getUserContext();
        PersonTeamReview  personTeamReview =new PersonTeamReview();
        personTeamReview.setModifier(Long.parseLong(uc.getId()));
        personTeamReview.setPersonCode(personCode);
        personTeamReviewMapper.updateByPersonCode(personTeamReview);
    }


//    endregion
    /**
     * 人员审核页面模糊查询
     * @param personMainReviewCondition
     * @return
     * create by liufang 2018/6/23
     */
    public List<PersonMainReview> queryPersonMainReviewList(PersonMainReviewCondition personMainReviewCondition){
        return personMainReviewMapper.queryPersonMainReviewList(personMainReviewCondition);
    }



}