package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.FeeDetailReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.FeeMainCondition;
import com.yqjr.fin.mkmm.sales.condition.FeeMainReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.FeeMainWorkCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.model.Active;
import com.yqjr.fin.mkmm.sales.model.ActiveReview;
import com.yqjr.fin.mkmm.sales.model.FeeReviewWork;
import com.yqjr.fin.mkmm.sales.rest.vo.fee.FeeMainReviewQueryVo;
import com.yqjr.fin.mkmm.sales.rest.vo.fee.FeeMainReviewWorkVo;
import com.yqjr.fin.mkmm.sales.rest.vo.fee.FeeStartCostVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.mkmm.sales.mapper.FeeMainReviewMapper;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import com.yqjr.scfw.common.utils.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@Service
@Transactional(readOnly = true)
public class FeeMainReviewService extends BaseService<FeeMainReviewMapper, FeeMainReview, Long> {


    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    private Logger logger = LoggerFactory.getLogger(getClass());

    //endregion
    @Autowired
    WorkFlowService workFlowService;
    @Autowired
    ActiveMatchDetailService activeMatchDetailService;
    @Autowired
    FeeDetailReviewService feeDetailReviewService;
    @Autowired
    ActiveMatchMainService activeMatchMainService;
    @Autowired
    FeeMainReviewMapper feeMainReviewMapper;
    @Autowired
    FeeMainService feeMainService ;
    @Autowired
     FeeDetailService feeDetailService;
    @Autowired
    ActiveService activeService;
    @Autowired
    FeeSendToGXService feeSendToGXService = new FeeSendToGXService();
    /**
     * 获取活动信息数据展示在页面上
     *
     * @return
     */
    public FeeStartCostVo GetFeeReviewAddView(long id) {
        ActiveMatchMain activeMatchMain = activeMatchMainService.selectById(id);

        FeeStartCostVo feeStartCostVo = new FeeStartCostVo();
        feeStartCostVo.setId(activeMatchMain.getId());

        return feeStartCostVo;
    }

    /**
     * 创建活动费用结算单   并进入审核流程
     * modify by fannna
     * @param company
     * @param
     * @param billFee
     */
    @Transactional
    public void feeMainReviewAdd(String company, BigDecimal billFee,String remark,String businessCode) {

        //生成本次活动编码值
        String billNo = getBillNo(company);

        List<ActiveMatchMain> activeMatchMains = activeMatchMainService.selectActiveMatchByCode(businessCode,company);
//        //判断是否已结算(注释掉：原因是可能发起结算，费用审核时被驳回)
//        if ("02".equals(activeMatchMains.get(0).getIsSettlement())) {
//            throw new ValidationException("活动名称为" + activeMatchMains.get(0).getBusinessName() + "已发起了动支，请核实后再发起动支");
//        }

        //保存审核工作流表信息
        long flowId = workFlowService.saveWorkFlowInfo("01", activeMatchMains.get(0).getBusinessCode(), "04");
        //保存页面数据值至REVIEW表中
        FeeMainReview feeMainReview = saveReviewInfo(billNo, billFee, flowId, activeMatchMains.get(0), remark,company);
        updateFeeMainHis(businessCode,company);//如果是共享驳回数据，修改轨迹表中flag为0
    }

    /**
     * 保存活动费用信息
     *
     * @param billNo
     * @param flowId
     */
    @Transactional
    public FeeMainReview saveReviewInfo(String billNo, BigDecimal billFee, long flowId, ActiveMatchMain activeMatchMain,String remark,String company) {
        //根据匹配主表ID 获取主表与明细表信息

        List<ActiveMatchDetail> activeMatchDetailList = activeMatchDetailService.selectInfoBySettle(activeMatchMain.getBusinessCode(), "01",company);
        //存储费用审核表信息
        FeeMainReview feeMainReview = this.trunAndSave(activeMatchMain, billNo, billFee, flowId,remark);
        //存储明细表新
        feeDetailReviewService.trunAndSave(activeMatchDetailList, feeMainReview);
        //更新匹配主表是否结算标识
        activeMatchMain.setIsSettlement("02");
        activeMatchMainService.patchById(activeMatchMain);
        return feeMainReview;
    }

    /**
     * 转换数据并保存至表中
     *
     * @param activeMatchMain
     */
    @Transactional
    public FeeMainReview trunAndSave(ActiveMatchMain activeMatchMain, String billNo, BigDecimal billFee, long flowId,String remark) {

        FeeMainReview feeMainReview = new FeeMainReview();
        feeMainReview.setBillno(billNo);
        feeMainReview.setFeeType("01");
        feeMainReview.setFeeSource("01");
        feeMainReview.setBusinessCode(activeMatchMain.getBusinessCode());
        feeMainReview.setBusinessName(activeMatchMain.getBusinessName());
        feeMainReview.setCompany(activeMatchMain.getCompany());
        feeMainReview.setBillStatus("01");
        feeMainReview.setIsSendGx("01");
        feeMainReview.setValidStatus(activeMatchMain.getValidStatus());
        feeMainReview.setMaxBillFee(activeMatchMain.getMaxBillFee());
        feeMainReview.setBillFee(billFee);
        feeMainReview.setSettleTimes(0L);
        feeMainReview.setActualTurnoverCount(activeMatchMain.getActualTurnoverCount());
        feeMainReview.setEstimateTurnoverCount(activeMatchMain.getEstimateTurnoverCount());
        //feeMainReview.setFeeowner();//提交人  后期需处理  此字段为传输共享时 报销单位
        feeMainReview.setRemark(activeMatchMain.getRemark());
        feeMainReview.setFlag("1");
        feeMainReview.setFlowId(flowId);
        feeMainReview.setReviewStatus("02");
        feeMainReview.setReviewType("01");
        feeMainReview.setMatchId(activeMatchMain.getId());
        feeMainReview.setRemark(remark);
        feeMainReview.setAreaCode(activeMatchMain.getAreaCode());
        feeMainReview.setAreaName(activeMatchMain.getAreaName());
        feeMainReview.setBrandsCode(activeMatchMain.getBrandsCode());
        feeMainReview.setBrandsName(activeMatchMain.getBrandsName());
        feeMainReview.setReachRate(activeMatchMain.getReachRate());
        feeMainReview.setActiveStartime(activeMatchMain.getActiveStartime());
        feeMainReview.setActiveEndtime(activeMatchMain.getActiveStartime());
        feeMainReview.setCreatorName(SessionHolder.getUserContext().getName());
        if (UserRoleHelp.isAdmin() || UserRoleHelp.isMarketingManager() || UserRoleHelp.isMarketingWorkers()){
            feeMainReview.setFounderLevel("03");
        }else if (UserRoleHelp.isRegionalLeaders()){
            feeMainReview.setFounderLevel("02");
        }else if (UserRoleHelp.isSalesManager()){
            feeMainReview.setFounderLevel("01");
        }
        this.insert(feeMainReview);
        return feeMainReview;
    }

    /**
     * 获取结算单号
     * 获取规则
     * add by xiaoyao 20180525
     *
     * @return teamCode
     */
    public String getBillNo(String company) {
        //获取最大数量
        FeeMainReviewCondition feeMainReviewCondition = new FeeMainReviewCondition();
        feeMainReviewCondition.setCompany(company);
        int companyCount = feeMainReviewMapper.selectCount(feeMainReviewCondition);

        String yearmmdd = (new SimpleDateFormat("yyyy")).format(new Date());

        //生成规则为：区域代码+年份++3位顺序码
        String billNo =  yearmmdd
                + String.format("%06d", companyCount);

        return billNo;
    }

    /**
     * 审核查询列表页面
     *
     * @param condition
     * @param pageBounds
     * @return
     */
    public List<FeeMainReviewWorkVo> selectReviewList(FeeMainWorkCondition condition, PageBounds... pageBounds) {
        return feeMainReviewMapper.selectReviewList(condition, pageBounds);
    }

    /**
     * 审核单条数据查询
     *
     * @param id
     * @param flowId
     * @return
     */
    public FeeMainReview feeMainReviewAduit(Long id, Long flowId) {
        FeeMainReview feeMainReview = feeMainReviewMapper.selectById(id);

        return feeMainReview;
    }

    /**
     * 费用数据审核提交
     *
     * @param id
     * @param workFlowId
     * @param reviewStatus
     * @param opinion
     */
    @Transactional
    public void feeMainAuditAdd(Long id, Long workFlowId, String reviewStatus, String opinion,String level,String name) throws Exception {

        FeeMainReview feeMainReview = feeMainReviewMapper.selectById(id);
        if (feeMainReview == null) {
            throw new ValidationException("费用数据审核提交异常：查询对象为空");
        }
        UserContext userContext=SessionHolder.getUserContext();

        //审核流信息
        WorkFlow workFlow = workFlowService.selectById(workFlowId);
        if (workFlow == null) {
            throw new ValidationException("费用数据审核提交异常：查询审核流信息为空");
        }

        String reviewLevel = workFlow.getReviewLevel();
        if ("04".equals(reviewStatus)) {//审核通过
            workFlow.setOpinion(opinion);
            workFlow.setModifierName(userContext.getName());
            workFlow.setReviewStatus("04");
            workFlowService.patchById(workFlow);//更新当前节点
            if ("1".equals(reviewLevel)) {//1级审核通过
                workFlow.setReviewLevel("2");//设置流转到2级
                workFlow.setReviewStatus("02");//设置下个节点为待审核
                workFlow.setModifyTime(null);//操作时间为空
                workFlow.setFlowId(workFlow.getId());

                 workFlowService.insert(workFlow);//插入2级节点
                feeMainReview.setFlowId(workFlow.getId());//更新审核表最新工作流ID
                feeMainReview.setReviewStatus("02");//待审核
                this.feeMainReviewMapper.patchById(feeMainReview);//更新审核表
            } else if ("2".equals(reviewLevel)) {//2级审核通过数据正式生效
                String workflowType = workFlow.getType();//
                feeMainReview.setReviewStatus("04");
                feeMainReview.setFlag("0");//设置当前数据为无效
                this.feeMainReviewMapper.patchById(feeMainReview);//更新审核表
                 //审核通过存储业务数据
                FeeMain feeMain = trunAndSaveByReview(feeMainReview, workflowType);
                //将数据送至共享系统
                feeSendToGXService.senfInfoToGX(feeMain);


            }
        }else if ("00".equals(reviewStatus)) {//打回操作
                workFlow.setOpinion(opinion);
                workFlow.setReviewStatus("00");
                workFlow.setModifierName(userContext.getName());
                workFlowService.patchById(workFlow);//更新当前节点
                //更新PersonTeamReview表审核状态
                feeMainReview.setReviewStatus("00");
                this.feeMainReviewMapper.patchById(feeMainReview);
        }
    }

    /**
     * 审核成功后数据保存
     * @param feeMainReview
     */
    public FeeMain trunAndSaveByReview(FeeMainReview feeMainReview,String workflowType) {
        FeeMain feeMain = null;

        //判断此条审核数据是操作类型是添加 还是修改
        if ("01".equals(workflowType)) {//添加操作
            //处理主表数据
            feeMain = new FeeMain();
            BeanUtils.copyProperties(feeMain,feeMainReview);
            feeMain.setBillStatus("00");
            feeMain.setIsSendGx("01");
            feeMain.setFlag("1");
            feeMain.setReviewId(feeMainReview.getId());
            feeMainService.insert(feeMain);
            feeMain = getFeeMainByCode(feeMain);


            //处理明细表数据
            FeeDetailReview feeDetailReviewQuery = new FeeDetailReview();
            feeDetailReviewQuery.setMainId(feeMainReview.getId());
            List <FeeDetailReview> feeDetailReviewList = feeDetailReviewService.select(feeDetailReviewQuery);

            for (FeeDetailReview feeDetailReview : feeDetailReviewList) {
                FeeDetail feeDetail = new FeeDetail();
                BeanUtils.copyProperties(feeDetail,feeDetailReview);
                feeDetail.setMainId(feeMain.getId());
                feeDetail.setFlag("1");
                feeDetailService.insert(feeDetail);
            }

        }else{
            throw new ValidationException("审核成功后数据保存异常：添加操作不正确,类型为："+workflowType);
        }

        return feeMain;

    }
    /**
     * 动支审核进度列表页面
     * @param condition
     * @param pageBounds
     * @return
     */
    public List<FeeMainReviewQueryVo> selectReviewQueryList(FeeMainReviewCondition condition, PageBounds... pageBounds){
        UserContext userContext = SessionHolder.getUserContext();
        condition.setCreator(Long.parseLong(userContext.getId()));
        return feeMainReviewMapper.selectReviewQueryList(condition,pageBounds);
    }

    /**
     * 审核详细页面-操作
     * create by fanna 20180605
     * @param businessCode
     * @return
     */
    public Active selectActiveByCode(String businessCode,String company){

        Active active = activeService.selectActiveByCode(businessCode,company);
        //结算金额
        List<FeeMainReview> feeMainReviews = feeMainReviewMapper.selectActiveReviewByCode(businessCode,company);
        if(feeMainReviews.size()>0) {
            if( null != feeMainReviews.get(0) && !"".equals(feeMainReviews.get(0))) {
                active.setBillFee(feeMainReviews.get(0).getBillFee());
            }
        }
        return active;
    }


    /**
     * 驳回后修改重新提交
     * create by fanna 20180605
     * @param businessCode
     * @return
     */
    @Transactional
    public Active patchReviewQueryById(String businessCode,String company,FeeReviewWork feeReviewWork){
        UserContext userContext=SessionHolder.getUserContext();
        //修改提交金额
        updateFeeMainReview(businessCode,company,feeReviewWork);
        List<FeeMainReview> feeMainReviews = feeMainReviewMapper.selectActiveReviewByCode(businessCode,company);
        //状态为驳回且有效
        if("00".equals(feeMainReviews.get(0).getReviewStatus()) && "1".equals(feeMainReviews.get(0).getFlag()) ) {

            feeMainReviews.get(0).setFlag("0");
            this.patchById(feeMainReviews.get(0));//原纪录置为无效
            //将符合条件的数据插入workFlow和teamReview表中
            feeMainReviews.get(0).setFlag("1");
            feeMainReviews.get(0).setReviewStatus("02");
            WorkFlow workFlow=new WorkFlow();
            workFlow.setReviewId(businessCode);//活动编码
            workFlow.setReviewLevel("1");
            workFlow.setType("01");
            workFlow.setModType("04");
            workFlow.setReviewStatus("01");
            workFlow.setModifierName(userContext.getName());
            workFlowService.insert(workFlow);
            workFlow.setFlowId(workFlow.getId());
            workFlow.setReviewStatus("02");//同时增加待审核数据
            workFlowService.insert(workFlow);
            feeMainReviews.get(0).setFlowId(workFlow.getId());
            super.insert(feeMainReviews.get(0));

        }else {
            throw new ValidationException("活动编码为："+businessCode+"的费用正在审核操作中！不允许修改！");
        }

        return null;
    }

    public void updateFeeMainHis(String businessCode,String company){
        FeeMainHis fmh = new FeeMainHis();
        fmh.setCompany(company);
        fmh.setBusinessCode(businessCode);
        feeMainReviewMapper.updateFeeMainHis(fmh);
    }
    public String selectFeeMainReviewById(Long id) {
        return feeMainReviewMapper.selectFeeMainReviewById(id);
    }

    public List<FeeMainReview> selectFeeMainReviewByCode(String businessCode,String company){

        return feeMainReviewMapper.selectActiveReviewByCode(businessCode,company);
    }

    //修改提交金额
    public void updateFeeMainReview(String businessCode,String company,FeeReviewWork feeReviewWork){
        FeeMainReview fmr = new FeeMainReview();
        fmr.setRemark(feeReviewWork.getRemark2());
        fmr.setBillFee(feeReviewWork.getBillFee());
        fmr.setCompany(company);
        fmr.setBusinessCode(businessCode);
        feeMainReviewMapper.updateFeeMainReviewByCode(fmr);//加公司
    }

    //改为审核中
    public void updateCheckStatus(String businessCode){
        UserContext userContext = SessionHolder.getUserContext();
        Long modifier = Long.parseLong(userContext.getId());
        String company = userContext.getComCode();
        FeeMainReview  feeMainReview=new FeeMainReview();
        feeMainReview.setCompany(company);
        feeMainReview.setModifier(modifier);
        feeMainReview.setBusinessCode(businessCode);
        feeMainReviewMapper.updateFeeMainReviewStatus(feeMainReview);
    }


    /**
     * 通过活动编码和公司查询费用主表
     */
    private FeeMain  getFeeMainByCode(FeeMain feeMain){
        logger.info("getFeeMainByCode start");
        FeeMainCondition feeMainCondition = new FeeMainCondition();
        feeMainCondition.setBusinessCode(feeMain.getBusinessCode());
        feeMainCondition.setCompany(feeMain.getCompany());
        List<FeeMain> feeMainList = feeMainService.selectList(feeMainCondition);
        if(null != feeMainList && feeMainList.size()>0){
            return feeMainList.get(0);
        }
        return null;
    }
}