package com.yqjr.fin.mkmm.sales.rest;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.common.ExcelUtils;
import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.PlanTrackCondition;
import com.yqjr.fin.mkmm.sales.entity.AreaMain;
import com.yqjr.fin.mkmm.sales.entity.PlanTrack;
import com.yqjr.fin.mkmm.sales.model.PlanTrackVo;
import com.yqjr.fin.mkmm.sales.rest.vo.SelectCodeVo;
import com.yqjr.fin.mkmm.sales.services.PersonSaleService;
import com.yqjr.fin.mkmm.sales.services.PlanTrackService;
import com.yqjr.fin.mkmm.sales.services.TeamSaleService;
import com.yqjr.fin.mkmm.sales.services.gateway.MetaGateway;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.PageResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import jxl.write.WriteException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "planTracks")
@RestController
@RequestMapping(value = "/planTracks")
public class PlanTrackRest extends BaseRest<PlanTrackService, PlanTrack> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询计划与实际跟踪表（参数：实体对象属性、pageNum、pageSize）", tags = "计划与实际跟踪表信息：PlanTrackRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<PlanTrack> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            PlanTrackCondition condition) {

        List<PlanTrack> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<PlanTrack> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询计划与实际跟踪表信息（参数：实体对象属性、pageNum、pageSize）", tags = "计划与实际跟踪表信息：PlanTrackRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PlanTrack> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            PlanTrackCondition condition) {
        List<PlanTrack> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<PlanTrack> pageList = new PageInfo<>(list);
        JQGridJsonResult<PlanTrack> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private PlanTrackService planTrackService;

    @Autowired
    private MetaGateway metaGateway;
    /**
     * 下载查询出的计划跟踪结果
     *
     * @param
     * @return
     */
    @ApiOperation(value = "下载查询出的计划跟踪结果", tags = "计划与实际跟踪表信息：PlanTrackRest")
    @RequestMapping(value = "/createTrackExcel" ,method = RequestMethod.GET)
    public void createTrackExcel(PlanTrackCondition condition, HttpServletResponse response)  {
        //下载excel
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        condition.setCompany(company);
        try {
            planTrackService.createTrackExl(condition,response);
        } catch (ValidationException e) {
            logger.error("计划跟踪下载异常！", e);
            e.printStackTrace();
        } catch (Exception e) {
            logger.error("计划跟踪下载异常！", e);
            e.printStackTrace();
        }

    }

    //页面加载时，查询所有大区
    @RequestMapping(value = "/qryProvince", method = RequestMethod.POST)
    private List<SelectCodeVo> qryProvince() {
        List<SelectCodeVo> list = metaGateway.transCode("Zone","0","");
        return list;
    }

    @ApiOperation(value = "分页查询计划与实际跟踪表信息（参数：实体对象属性、pageNum、pageSize）", tags = "计划与实际跟踪表信息：PlanTrackRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByTrackJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PlanTrackVo> pageByTrackJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            PlanTrackCondition condition) {

        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();//公司
        condition.setCompany(company);
        List<PlanTrackVo> list = planTrackService.sumPlanTrack(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<PlanTrackVo> pageList = new PageInfo<>(list);
        JQGridJsonResult<PlanTrackVo> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }



}