package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;
import com.yqjr.scfw.common.exception.ValidationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.DealerBrands;
import com.yqjr.fin.mkmm.sales.condition.DealerBrandsCondition;
import com.yqjr.fin.mkmm.sales.services.DealerBrandsService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "dealerBrandss")
@RestController
@RequestMapping(value = "/dealerBrandss")
public class DealerBrandsRest extends BaseRest<DealerBrandsService, DealerBrands> {

    //region generated by CodeRobot

    @Autowired
    DealerBrandsService dealerBrandsService;
    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询经销商品牌配置表（参数：实体对象属性、pageNum、pageSize）", tags = "经销商品牌配置表信息：DealerBrandsRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<DealerBrands> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            DealerBrandsCondition condition) {

        List<DealerBrands> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<DealerBrands> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询经销商品牌配置表信息（参数：实体对象属性、pageNum、pageSize）", tags = "经销商品牌配置表信息：DealerBrandsRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<DealerBrands> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            DealerBrandsCondition condition) {
        List<DealerBrands> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<DealerBrands> pageList = new PageInfo<>(list);
        JQGridJsonResult<DealerBrands> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }

    /**
     * 销管二期
     * 经销商品牌获取转换接口
     * create by lf
     * 2018/9/5
     * @return
     */
    @ApiOperation(value = "经销商品牌获取转换接口", tags = "经销商品牌配置表信息：DealerBrandsRest")
    @RequestMapping(value = "/traverseInformation")
    public ObjectResultResponse traverseInformation() {
        try{
            dealerBrandsService.traverseInformation();
            return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,"数据成功导入本系统",null);
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,"操作失败",null);
        }catch(Exception e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }

    /**
     * 销管二期
     * 经销商品牌数据清除接口
     * create by lf
     * 2018/9/5
     * @return
     */
    @ApiOperation(value = "经销商品牌数据清除接口", tags = "经销商品牌配置表信息：DealerBrandsRest")
    @RequestMapping(value = "/cleanTable")
    public ObjectResultResponse cleanTable() {
        try{
            dealerBrandsService.cleanTable();
            return this.getObjectResultResponse(Const.SUCCESS,Const.CODE_SUCCESS,"数据已经成功清除",null);
        }catch(ValidationException e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_SUCCESS,"操作失败",null);
        }catch(Exception e){
            e.printStackTrace();
            return this.getObjectResultResponse(Const.FAILURE,Const.CODE_FAILURE,Const.SYSTEM_ERROR,null);
        }
    }
}