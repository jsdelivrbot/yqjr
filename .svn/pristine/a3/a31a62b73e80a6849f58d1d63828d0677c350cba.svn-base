package com.yqjr.fin.mkmm.sales.rest;

import java.util.*;

import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import com.yqjr.fin.mkmm.sales.services.PersonMainReviewService;
import com.yqjr.scfw.common.exception.ValidationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.PersonTeam;
import com.yqjr.fin.mkmm.sales.condition.PersonTeamCondition;
import com.yqjr.fin.mkmm.sales.services.PersonTeamService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "personTeams")
@RestController
@RequestMapping(value = "/personTeams")
public class PersonTeamRest extends BaseRest<PersonTeamService, PersonTeam> {

    //region generated by CodeRobot

    @Autowired
    private PersonTeamService personTeamService;

    private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private PersonMainReviewService personMainReviewService;

    @ApiOperation(value = "分页查询销售人员团队表（参数：实体对象属性、pageNum、pageSize）", tags = "销售人员团队表信息：PersonTeamRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<PersonTeam> page(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            PersonTeamCondition condition) {

        List<PersonTeam> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<PersonTeam> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询销售人员团队表信息（参数：实体对象属性、pageNum、pageSize）", tags = "销售人员团队表信息：PersonTeamRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PersonTeam> pageByJqGrid(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            PersonTeamCondition condition) {
        List<PersonTeam> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<PersonTeam> pageList = new PageInfo<>(list);
        JQGridJsonResult<PersonTeam> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    /**
     * 校验团队负责人唯一性
     * @return
     */
    @RequestMapping(value = "/validatePersonNature",method = RequestMethod.GET)
    @ResponseBody
    public ResultMsg validatePersonNature(@RequestParam(value = "teamCode") String teamCode) {
        try{
            personTeamService.validatePersonNatureByTeamCode(teamCode);
            return new ResultMsg(Const.MSG_CHECK_SUCCESS, "",Const.SUCCESS,null);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg( Const.MSG_CHECK_FAILURE, "该团队已存在负责人!" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg( Const.MSG_CHECK_FAILURE, "操作失败!" ,Const.FAILURE, null);
        }
    }
}