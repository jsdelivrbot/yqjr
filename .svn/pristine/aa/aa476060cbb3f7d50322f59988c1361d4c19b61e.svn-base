package com.yqjr.fin.risk.stat.rest;

import java.util.*;

import com.yqjr.fin.risk.stat.common.ResultMsg;
import com.yqjr.fin.risk.stat.condition.IndicatorLogsCondition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.risk.stat.common.JQGridJsonResult;
import com.yqjr.fin.risk.stat.entity.IndicatorLogs;
import com.yqjr.fin.risk.stat.services.IndicatorLogsService;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "indicatorLogss")
@RestController
@RequestMapping(value = "/indicatorLogss")
public class IndicatorLogsRest extends BaseRest<IndicatorLogsService, IndicatorLogs> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @ApiOperation(value = "分页查询操作轨迹表（参数：实体对象属性、pageNum、pageSize）", tags = "操作轨迹表信息：IndicatorLogsRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<IndicatorLogs> page(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            IndicatorLogsCondition condition) {

        List<IndicatorLogs> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<IndicatorLogs> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询操作轨迹表信息（参数：实体对象属性、pageNum、pageSize）", tags = "操作轨迹表信息：IndicatorLogsRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<IndicatorLogs> pageByJqGrid(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            IndicatorLogsCondition condition) {
        List<IndicatorLogs> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<IndicatorLogs> pageList = new PageInfo<>(list);
        JQGridJsonResult<IndicatorLogs> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    @ApiOperation(value = "添加操作轨迹")
    @RequestMapping(value = "/InsertIndicatorLogsRest", method = RequestMethod.POST)
    public ResultMsg<String> InsertIndicatorLogsRest(IndicatorLogs il) {

        try {
                baseService.insert(il);
            return new ResultMsg<String>(Const.CODE_SUCCESS, "添加成功", Const.SUCCESS, "");
        } catch (Exception e) {
            e.printStackTrace();
            return new ResultMsg<String>(Const.CODE_FAILURE, "添加失败", Const.FAILURE, "");
        }

    }
    @ApiOperation(value = "根据eventid查询轨迹表")
    @RequestMapping(value = "/selectByEventid", method = RequestMethod.GET)
    public JQGridJsonResult<IndicatorLogs> selectByEventid(
            IndicatorLogs il ) {
        List<IndicatorLogs> list = baseService.selectByEventid(il);
        PageInfo<IndicatorLogs> pageList = new PageInfo<>(list);
        JQGridJsonResult<IndicatorLogs> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setRows(list);

        return jqGridJson;
    }
    //endregion
}