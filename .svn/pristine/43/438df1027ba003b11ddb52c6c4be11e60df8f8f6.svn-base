package com.yqjr.fin.mkmm.sales.rest;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.PersonMainAndTeamReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.PersonMainReviewCondition;
import com.yqjr.fin.mkmm.sales.condition.PersonWorkCondition;
import com.yqjr.fin.mkmm.sales.entity.BrandMain;
import com.yqjr.fin.mkmm.sales.entity.PersonMainReview;
import com.yqjr.fin.mkmm.sales.entity.PersonTeamReview;
import com.yqjr.fin.mkmm.sales.entity.TeamMain;
import com.yqjr.fin.mkmm.sales.model.PersonDetail;
import com.yqjr.fin.mkmm.sales.services.PersonMainReviewService;
import com.yqjr.fin.mkmm.sales.services.PersonTeamReviewService;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainReviewProcessVo;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonMainReviewVo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.PageResultResponse;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import net.sf.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "personMainReviews")
@RestController
@RequestMapping(value = "/personMainReviews")
public class PersonMainReviewRest extends BaseRest<PersonMainReviewService, PersonMainReview> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private PersonMainReviewService personMainReviewService;

    @Autowired
    private PersonTeamReviewService personTeamReviewService;

    @ApiOperation(value = "分页查询销售人员基本信息审核表（参数：实体对象属性、pageNum、pageSize）", tags = "销售人员基本信息审核表信息：PersonMainReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<PersonMainReview> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            PersonMainReviewCondition condition) {

        List<PersonMainReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<PersonMainReview> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询销售人员基本信息审核表信息（参数：实体对象属性、pageNum、pageSize）", tags = "销售人员基本信息审核表信息：PersonMainReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PersonMainReviewVo> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            PersonWorkCondition condition) {

        /*******
         * 加入登录用户限制,区域，公司
         * **/
        condition.setCompany(UserRoleHelp.getCompanyCode());

        /****
         * 审核级别
         * **/
        condition.setReviewLevel(UserRoleHelp.getReviewLevel());

        List<PersonMainReviewVo> list = personMainReviewService.selectPersonReviewList(condition, PageBounds.of(pageNum, pageSize));
   
        PageInfo<PersonMainReviewVo> pageList = new PageInfo<>(list);
        JQGridJsonResult<PersonMainReviewVo> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    @ApiOperation(value = "加载人员所在区域内的团队（参数：实体对象属性）", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/team", method = RequestMethod.POST)
    @ResponseBody
    public List<TeamMain> getTeamByAreaOfPerson(HttpServletRequest request){
        String areaCode = null;
//        User user = request.getSession().getAttribute("user");
//       areaCode = user.getAreaCode();
        return  personMainReviewService.selectTeamByAreaOfPerson(areaCode);
    }

    @ApiOperation(value = "加载品牌（参数：实体对象属性）", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/brand", method = RequestMethod.POST)
    @ResponseBody
    public List<BrandMain> getBrands(HttpServletRequest request){
        List<BrandMain> list = personMainReviewService.selectBrands();
        return list;
    }

    @ApiOperation(value = "新增记录（参数：实体对象属性）", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonDetail> create(@RequestBody PersonDetail personDetail, Errors errors) {
        try{
    /*        PersonDetail personDetail = JsonUtils.JsonToBean(request.getParameter("personInfo"),PersonDetail.class);
            List<PersonCityReview> personCityReview = JsonUtils.JsonToBean(request.getParameter("cities"),new TypeReference<List<PersonCityReview>>(){});
            List<PersonBrankReview> personBrandReview = JsonUtils.JsonToBean(request.getParameter("brands"),new TypeReference<List<PersonBrankReview>>(){});*/
            logger.info("新增销售人员上行参数："+JSONArray.fromObject(personDetail));
            personMainReviewService.insert(personDetail);
            return new ResultMsg<PersonDetail>(Const.MSG_ADD_SUCCESS, Const.MSG_ADD_SUCCESS+"!,您的人员代码为："+personDetail.getPersonCode(),Const.SUCCESS,  personDetail);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonDetail>( Const.MSG_ADD_FAILURE, "提交失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonDetail>( Const.MSG_ADD_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    //审核中
    @ApiOperation(value = "修改记录为审核中", tags = "")
    @RequestMapping(value = "/reviewing", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonMainReviewVo> reviewIng( @RequestParam(value = "personCode") String personCode,
                                                     @RequestParam(value = "workFlowId") Long workFlowId,
                                                    @RequestParam(value = "reviewType") String reviewType) {
        try{
            PersonMainReviewVo personMainReviewVo = personMainReviewService.reviewIng(personCode,workFlowId,reviewType);
            return new ResultMsg<PersonMainReviewVo>(Const.MSG_PUT_SUCCESS, null,Const.SUCCESS,  personMainReviewVo);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    /**
     * 销售人员审核
     * @param request
     * @param model
     * @return
     */
    @RequestMapping(value = "/submit", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonMainReview> audit(HttpServletRequest request, Model model) {
        try{
            String personCode=request.getParameter("personCode");
            String workid=request.getParameter("workid");
            String reviewStatus=request.getParameter("reviewStatus");
            String opinion=request.getParameter("opinion");
            logger.info("审核销售人员上行参数："+personCode+","+workid+","+reviewStatus+","+opinion);
            personMainReviewService.personAudit(personCode,workid,reviewStatus,opinion);
            return new ResultMsg<PersonMainReview>(Const.MSG_PUT_SUCCESS, "审核成功",Const.SUCCESS,  null);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReview>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReview>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    @RequestMapping(value = "/update",method = RequestMethod.POST)
    public ResultMsg<PersonMainReview> update(@RequestParam(value = "personCode") String personCode){
        try{
            //设置修改人
            personMainReviewService.update(personCode);
            return new ResultMsg<PersonMainReview>(Const.MSG_PUT_SUCCESS, "",Const.SUCCESS,  null);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReview>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReview>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }
    /**
     * 销售人员审核
     * @param request
     * @param model
     * @return
     */
    @RequestMapping(value = "/modifysubmit", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonMainReview> modifysubmit(HttpServletRequest request, Model model) {
        try{
            String personCode=request.getParameter("personCode");
            String workid=request.getParameter("workid");
            String reviewStatus=request.getParameter("reviewStatus");
            String opinion=request.getParameter("opinion");
            personMainReviewService.personReviewModify(personCode,workid,reviewStatus,opinion);
            return new ResultMsg<PersonMainReview>(Const.MSG_CHECK_FAILURE, "审核成功",Const.SUCCESS,  null);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReview>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReview>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    @ApiOperation(value = "查看审核中数据", tags = "")
    @RequestMapping(value = "/viewing", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonMainReviewVo> viewIng( @RequestParam(value = "personCode") String personCode) {
        try{
            PersonMainReviewVo personMainReviewVo = personMainReviewService.viewIng(personCode);
            return new ResultMsg<PersonMainReviewVo>(Const.MSG_CHECK_SUCCESS, null,Const.SUCCESS,  personMainReviewVo);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }


    //endregion

//    @ApiOperation(value = "分页查询销售人员基本信息审核表信息（参数：实体对象属性、pageNum、pageSize）", tags = "销售人员基本信息审核表信息：PersonMainReviewRest")
//    @ApiImplicitParams({
//            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
//            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
//    })
    @RequestMapping(value = "/processPageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<PersonMainReviewProcessVo> processPageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            PersonWorkCondition condition) {


      /*******
         * 加入登录用户限制,区域，公司
         * **/
        UserContext uc= SessionHolder.getUserContext();
        condition.setCreator(uc.getId());
        //   List<PersonMainReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        List<PersonMainReviewProcessVo> list = personMainReviewService.selectPersonReviewProcessList(condition,PageBounds.of(pageNum, pageSize));
        PageInfo<PersonMainReviewProcessVo> pageList = new PageInfo<>(list);
        JQGridJsonResult<PersonMainReviewProcessVo> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);
        return jqGridJson;
    }

    //审核进度处理查看审核
    @ApiOperation(value = "审核进度处理查看审核", tags = "")
    @RequestMapping(value = "/reviewwatch", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<PersonMainReviewVo> reviewWatch( @RequestParam(value = "personCode") String personCode) {
        try{
            List<PersonMainReviewVo> personMainReviewVos = personMainReviewService.reviewWatch(personCode);
            return new ResultMsg<PersonMainReviewVo>(Const.MSG_CHECK_SUCCESS, null,Const.SUCCESS,  personMainReviewVos.get(0));
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<PersonMainReviewVo>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    //人员审核进度修改
    @RequestMapping(value = "/processmodifysubmit", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg<Integer> processModifySubmit(@RequestBody PersonMainAndTeamReviewCondition personMainAndTeamReviewCondition){
       try{
            logger.info("object"+personMainAndTeamReviewCondition);
            Integer count = 0;
            if (personMainAndTeamReviewCondition != null){
                count = personMainReviewService.updatePersonMainAndTeam(personMainAndTeamReviewCondition);
            }
            String str = null;
            if (count == 1){
                str = "修改成功";
            }else {
                str = "修改失败";
            }
            return new ResultMsg<Integer>(Const.MSG_PUT_SUCCESS, str ,Const.SUCCESS, count);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<Integer>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
           logger.error("Exception异常", e);
            return new ResultMsg<Integer>( Const.MSG_PUT_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    /**
     * 团队新增页面团队名称唯一性校验
     * @param searchPerson  用户名称
     * @return
     * creat by liufang 2018/05/29
     * 通过登录名带回人员信息
     * update   by  lzc  2018/6/6
     */
    @RequestMapping(value = "/selectByCheckUniquen",method = RequestMethod.GET)
    public ResultMsg<PersonDetail> selectByCheckUniquen(@RequestBody @RequestParam(value = "searchPerson") String searchPerson){
         try{
            /*String teamCode = personTeamService.selectByCheckUniquen(searchPerson);
            if(teamCode!=null){
                return ObjectResultResponse.createByError();
            }*/
            PersonDetail personDetail = new PersonDetail();
            List<PersonTeamReview>  list= new ArrayList<>();
            //用户信息是否存在
            personDetail=personMainReviewService.getPersonMainByLoginName(searchPerson);
            if (personDetail!=null){
                //用户信息是否引入本系统
                list=personTeamReviewService.getPersonTeamReviewByPersonCode(searchPerson);
            }
            if (personDetail== null){
                return new ResultMsg<PersonDetail>(Const.MSG_ADD_FAILURE, Const.MSG_NOT_EXIST,Const.FAILURE,  personDetail);
            }else if(list != null&&list.size()>0){
                return new ResultMsg<PersonDetail>(Const.MSG_ADD_FAILURE, Const.MSG_REPEATED_IMPORT,Const.FAILURE,  personDetail);
            }else {
                return new ResultMsg<PersonDetail>(Const.MSG_ADD_SUCCESS, "",Const.SUCCESS,  personDetail);
            }
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<PersonDetail>( Const.MSG_ADD_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
             logger.error("Exception异常", e);
            return new ResultMsg<PersonDetail>( Const.MSG_ADD_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

}