package com.yqjr.fin.mkmm.sales.rest;

import java.text.SimpleDateFormat;
import java.util.*;
import javax.validation.Valid;

import com.yqjr.fin.mkmm.sales.common.ResultMsg;
import com.yqjr.fin.mkmm.sales.common.UserRoleHelp;
import com.yqjr.fin.mkmm.sales.condition.TeamMainCondition;
import com.yqjr.fin.mkmm.sales.entity.TeamHis;
import com.yqjr.fin.mkmm.sales.entity.TeamMain;
import com.yqjr.fin.mkmm.sales.mapper.EventTeamMapper;
import com.yqjr.fin.mkmm.sales.services.TeamMainService;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.EventTeam;
import com.yqjr.fin.mkmm.sales.condition.EventTeamCondition;
import com.yqjr.fin.mkmm.sales.services.EventTeamService;



@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "eventTeams")
@RestController
@RequestMapping(value = "/eventTeams")
public class EventTeamRest extends BaseRest<EventTeamService, EventTeam> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private TeamMainService teamMainService;

    @ApiOperation(value = "分页查询重大事件团队表（参数：实体对象属性、pageNum、pageSize）", tags = "重大事件团队表信息：EventTeamRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<EventTeam> page(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            EventTeamCondition condition) {

        List<EventTeam> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<EventTeam> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询重大事件团队表信息（参数：实体对象属性、pageNum、pageSize）", tags = "重大事件团队表信息：EventTeamRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<EventTeam> pageByJqGrid(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            EventTeamCondition condition) {

        UserContext context =SessionHolder.getUserContext();
        condition.setCompany(context.getComCode());
        if (UserRoleHelp.isAdmin()||UserRoleHelp.isMarketingManager()||UserRoleHelp.isMarketingWorkers()){
            condition.setAreaCode(null);
        }else {
            condition.setAreaCode(context.getAreaCode());
        }

        List<EventTeam> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<EventTeam> pageList = new PageInfo<>(list);
        JQGridJsonResult<EventTeam> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    @ApiOperation(value = "分页查询重大事件团队表信息（参数：实体对象属性、pageNum、pageSize）", tags = "重大事件团队表信息：EventTeamRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGridList", method = RequestMethod.GET)
    public JQGridJsonResult<EventTeam> pageByJqGridList(
            @RequestParam(value = "pageNo", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            //@RequestParam(value = "sord", required = true) String sord,
            EventTeamCondition condition) {

        UserContext context =SessionHolder.getUserContext();
        condition.setCompany(context.getComCode());
        if (UserRoleHelp.isAdmin()||UserRoleHelp.isMarketingManager()||UserRoleHelp.isMarketingWorkers()){
            condition.setAreaCode(null);
        }else {
            condition.setAreaCode(context.getAreaCode());
        }

        List<EventTeam> list = eventTeamService.queryEventTeam(condition,PageBounds.of(pageNum,pageSize));

        PageInfo<EventTeam> pageList = new PageInfo<EventTeam>(list);
        JQGridJsonResult<EventTeam> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }



    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private EventTeamService eventTeamService;

    //综合查询，查团队重大事件
    @ApiOperation(value = "根据teamCode查询重大事件", tags = "基础删改查：继承自BaseRest")
    @RequestMapping(value = "/queryTeamEvent", method = RequestMethod.GET)
    @ResponseBody
    public ResultMsg<List<EventTeam>> queryTeamEventByCode(@RequestParam(value = "teamCode") String teamCode) {
        try{
            List<EventTeam> eventTeams = eventTeamService.queryTeamEventByCode(teamCode);
            return new ResultMsg<>( Const.MSG_CHECK_SUCCESS, null ,Const.SUCCESS, eventTeams);
        }catch (ValidationException e){
            e.printStackTrace();
            return new ResultMsg<List<EventTeam>>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }catch (Exception e) {
            logger.error("Exception异常", e);
            return new ResultMsg<List<EventTeam>>( Const.MSG_CHECK_FAILURE, "操作失败" ,Const.FAILURE, null);
        }
    }

    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ResultMsg add(@RequestBody EventTeam eventTeam) {
        UserContext userContext=SessionHolder.getUserContext();
        String company = userContext.getComCode();
        TeamMainCondition teamMainCondition = new TeamMainCondition();
        teamMainCondition.setCompany(company);
        teamMainCondition.setTeamName(eventTeam.getTeamName());
        if (UserRoleHelp.isRegionalLeaders()||UserRoleHelp.isSalesManager()){
            teamMainCondition.setAreaCode(userContext.getAreaCode());
        }
        List<TeamMain> teamMains = teamMainService.selectList(teamMainCondition);
        if (teamMains == null || teamMains.isEmpty()){
            return new ResultMsg<EventTeam>( Const.MSG_ADD_FAILURE, "团队名称有误，请重新输入！" ,Const.FAILURE, null);
        }else {
            eventTeamService.insert(eventTeam);
            return new ResultMsg<EventTeam>( Const.MSG_ADD_SUCCESS, "保存成功" ,Const.SUCCESS, null);

        }
    }
}