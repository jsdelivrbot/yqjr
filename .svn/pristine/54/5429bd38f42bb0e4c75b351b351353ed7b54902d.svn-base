package com.yqjr.fin.risk.stat.services;

import com.yqjr.fin.risk.stat.condition.FctAltCustomCondition;
import com.yqjr.fin.risk.stat.entity.FctAltCustom;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import com.yqjr.fin.risk.stat.mapper.FctAltCustomMapper;
import com.yqjr.scfw.common.session.SessionHolder;
import com.yqjr.scfw.common.session.UserContext;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.yqjr.scfw.common.mapper.Mapper;

import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Transactional(readOnly = true)
public class FctAltCustomService extends BaseService<FctAltCustomMapper, FctAltCustom, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    @Autowired
    private  FctAltCustomMapper fctAltCustomMapper;
    public List<FctAltCustom> selectFctAltCustomFenYe(FctAltCustomCondition condition, PageBounds of){
        return fctAltCustomMapper.selectFctAltCustomFenYe(condition,of);
    }
    public List<FctAltCustom> chaXunFctAltCustomFenYe (FctAltCustomCondition condition, PageBounds of){
        if(condition.getStarDate()!=null&&condition.getStarDate()!="")
        {
           String [] strstar =  condition.getStarDate().split(" ");
           condition.setStarDate(strstar[0]);
           if(condition.getEndDate()!=null&& condition.getEndDate()!="")
           {
               String [] strend = condition.getEndDate().split(" ");
               condition.setEndDate(strend[0]);
           }
        }else
        {
            if(condition.getEndDate()!=null&& condition.getEndDate()!="")
            {
                String [] strend = condition.getEndDate().split(" ");
                condition.setEndDate(strend[0]);
            }
        }
        return fctAltCustomMapper.chaXunFctAltCustomFenYe(condition,of);
    }
     public  List<FctAltCustom> selectFctAltCustomByEventid (FctAltCustom fctAltCustom){
         return fctAltCustomMapper.selectFctAltCustomByEventid(fctAltCustom);
     }
    public void updateHandlestateByEventid(FctAltCustom fctAltCustom){
        fctAltCustomMapper.updateHandlestateByEventid(fctAltCustom);
    }

    public List<FctAltCustom> selectprov(FctAltCustom fctAltCustom){
        return  fctAltCustomMapper.selectprov(fctAltCustom);
    }
    //endregion
    public Map<String, List<FctAltCustom>> selMany() {
        Map<String, List<FctAltCustom>> map = new HashMap<>();
        map.put("provname", fctAltCustomMapper.selProvname());
        map.put("creator", fctAltCustomMapper.selCreator());
        map.put("areaname", fctAltCustomMapper.selAreaName());
        return map;
    }


    /***
     * 创建表头
     * @param sheet
     */
    private void createTitle(HSSFSheet sheet, String[] cellValues) {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for (int i = 0; i < cellValues.length; i++) {
            sheet.setColumnWidth(i, 15 * 256);
        }
        HSSFCell cell;
        for (int i = 0; i < cellValues.length; i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }

    public void fctAltCustomExport(FctAltCustomCondition condition, HttpServletResponse response) throws Exception {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("预警干预查询");
        String[] cellValues = {"指标名称", "预警日期", "管理中心", "区域", "客户名称", "操作时间", "预警信号", "操作人", "任务状态"};
        UserContext userContext = SessionHolder.getUserContext();
//        String company = userContext.getComCode();
//        condition.setCompany(company);
        List<FctAltCustom> list = mapper.selAll(condition);
        //创建表头
        createTitle(sheet, cellValues);
        //插入数据
        int i = 1;
        for (FctAltCustom vo : list) {
            HSSFRow row = sheet.createRow(i);
            row.createCell(0).setCellValue(vo.getIndicators().getIndicatorname());
            row.createCell(1).setCellValue(vo.getAlerttime());
            row.createCell(2).setCellValue(vo.getProvname());
            row.createCell(3).setCellValue(vo.getAreaname());
            row.createCell(4).setCellValue(vo.getCustomname());
            row.createCell(5).setCellValue(vo.getCreateTime());
            if(vo.getSignallamp().equals("1")){
                row.createCell(6).setCellValue("蓝");
            }else if(vo.getSignallamp().equals("2")){
                row.createCell(6).setCellValue("绿");
            }else if(vo.getSignallamp().equals("3")){
                row.createCell(6).setCellValue("黄");
            }else if(vo.getSignallamp().equals("4")){
                row.createCell(6).setCellValue("红");
            }
            row.createCell(7).setCellValue(vo.getCreator());
            row.createCell(8).setCellValue(vo.getEventstate());
            i++;
        }
        String fileName = "fctAltCustom.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());
    }
}