package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.condition.PersonPlanCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.PersonPlanMapper;
import com.yqjr.fin.mkmm.sales.vo.domin.PersonPlanVo;
import com.yqjr.scfw.common.exception.ValidationException;
import com.yqjr.scfw.common.pagination.model.PageList;
import com.yqjr.scfw.common.service.BaseService;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.*;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import static com.yqjr.fin.mkmm.sales.common.DateUtils.getDateNum;
import static com.yqjr.scfw.common.utils.BeanUtils.copyProperties;

@Service
@Transactional(readOnly = true)
public class PersonPlanService extends BaseService<PersonPlanMapper, PersonPlan, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion
    @Autowired
    private PersonPlanMapper personPlanMapper;
    @Autowired
    private PersonPlanHisService personPlanHisService;
    @Autowired
    private PlanTrackHisService planTrackHisService;
    @Autowired
    private ActiveMatchTaskService activeMatchTaskService;
    @Autowired
    private PlanTrackYearService planTrackYearService;
    @Autowired
    private PlanTrackYearHisService planTrackYearHisService;

    public void downloadExl(HttpServletResponse response) throws IOException {
        HSSFWorkbook workbook = new HSSFWorkbook();
        //表头
        String [] cellValues = {"姓名","人员代码","一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月" };
        String [] sheetNames = {"1马自达", "2大众","3红旗","4奥迪","5解放","6丰田","7夏利","8海马","9一汽吉林","10奔腾"};
        createSheet(workbook, cellValues, sheetNames);
        //拼装blobName
        String fileName = "template.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());

    }
    /***
     * 创建Sheet页
     * @param workbook
     * @param sheetNames sheet页名称
     * @param cellValues
     */
    private void createSheet(HSSFWorkbook workbook,String [] cellValues, String... sheetNames ) {
        for(int i= 0; i< sheetNames.length; i++) {
            HSSFSheet sheet = workbook.createSheet(sheetNames[i]);
            createTitle(sheet,cellValues);
        }
    }

    //读取excel
    @Transactional
    public void readPlanExl(InputStream inputStream,String company) throws Exception {
        //上传时间
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
        Date date = new Date();
        String year = sdf.format(date);
        //导入时的月份
        int nowMonth = getNowMonth();
        //生成导入识别码
        Long differentCode = Getnum();
        //判断是否是重新导入
        boolean flag = loadMore(year,nowMonth,company);
        //选择excel文件
        Workbook book = Workbook.getWorkbook(inputStream);
        //创建品牌list
        List<String> brandsList = createBrandsList();
        for (int i=0;i<book.getNumberOfSheets(); i++) {
            //指定下标方式
            Sheet sheet = book.getSheet(i);
            //读取行数
            int rows = sheet.getRows();
            //列数
            int clos = sheet.getColumns();
            if(clos !=14 ) {
                throw new Exception("导入数据有误！请检查！");
            }
            checkPersonCode(sheet, rows);//校验人员重复
            forEachRows( sheet, rows,  clos , brandsList, year, differentCode, i,company);
        }
        if(flag) {//更新其他表
            updatePlanTrackTable(year,nowMonth,company);
        } else {
            //首次导入，将当前时间至1月1日时间插入task表中
            insertIntoTask(year,company);
        }
    }

    public boolean loadMore(String year,int nowMonth,String company) {
        //判断是否是重新导入
        List<PersonPlan> personPlans = personPlanMapper.selectPersonPlanByYear(year,company);
        boolean flag = false;
        if (personPlans.size()>0) {//存在
            //删除当前月及之后数据
            personPlanMapper.deletePersonPlanByYear(year,company,nowMonth);
            flag = true;
        }
        return flag;
    }

    public void forEachRows(Sheet sheet,int rows, int clos ,List<String> brandsList,String year,Long differentCode,int i,String company) throws ParseException {
        for (int j = 1; j < rows; j++) {
            if(!"".equals(sheet.getCell(0, j).getContents()) && null != sheet.getCell(0, j).getContents()) {
                //月份
                Long month = (long)1;
                PersonPlan personPlan = new PersonPlan();
                String personCode = sheet.getCell(1, j).getContents();
                personPlan.setPersonName(sheet.getCell(0, j).getContents());
                personPlan.setPersonCode(personCode);
                personPlan.setCompany(company);
                foreachCel( clos, j, sheet, personPlan, month, year,  brandsList, i, differentCode, personCode, company);
            }
        }
    }

    public void foreachCel(int clos,int j,Sheet sheet,PersonPlan personPlan,Long month,String year, List<String> brandsList,int i,Long differentCode,String personCode,String company) throws ParseException {
        for(int k=2;k<clos;k++) {
            if(!"".equals(sheet.getCell(k,j).getContents()) && null != sheet.getCell(k,j).getContents()) {
                personPlan.setYear(year);
                personPlan.setMonth(month.toString());
                personPlan.setBrands(brandsList.get(i));
                personPlan.setAmount(Long.valueOf(sheet.getCell(k,j).getContents()));
                personPlan.setDifferentCode(differentCode);
                //判断是否已存在
                List<PersonPlan> pps = queryPersonPlanExist(year,month.toString(),brandsList.get(i),personCode,company);
                if(pps.size()<1) {//不存在，插入新记录  存在则不动
                    super.insert(personPlan);
                }
                PersonPlanHis his = exchangePersonPlanHis(personPlan);
                //同时进入轨迹表
                personPlanHisService.insert(his);
                month ++;
            }
        }
    }

    //判断是否已存在
    public List<PersonPlan> queryPersonPlanExist(String year, String month ,String brands,String personCode,String company){
        PersonPlan plan = new PersonPlan();
        plan.setPersonCode(personCode);
        plan.setYear(year);
        plan.setMonth(month);
        plan.setBrands(brands);
        plan.setCompany(company);
        List<PersonPlan> pps = personPlanMapper.selectPlans(plan);
        return pps;
    }

    //更新数据进入历史表
    public void updatePersonPlan(PersonPlan personPlan){
        //字段转换
        PersonPlanHis personPlanHis = exchangePersonPlan(personPlan);
        //插入历史表
        personPlanHisService.insert(personPlanHis);

    }

    //更新计划跟踪表
    public void updatePlanTrackTable(String year, int nowMonth,String company) throws ParseException {
        //更新匹配任务表
        //删除月跟踪表中当月数据， 进入轨迹表
        List<PlanTrack> pts = personPlanMapper.selectMonthPlanTrack(year,nowMonth,company);
        for(int i=0;i<pts.size();i++) {
            PlanTrackHis pth = new PlanTrackHis();
            PlanTrack pt = pts.get(i);
            copyProperties(pth,pt);
            planTrackHisService.insert(pth);
        }
        //删除当月数据
        personPlanMapper.deletePlanTrack(year,nowMonth,company);
        //插入任务表
        insertTaskTable(company);
        //更新计划跟踪年表
        updatePlanTrackYearTable(year,nowMonth,company);
    }

    //首次插入处理
    public void insertIntoTask(String year,String company) throws ParseException {
        String startTime = year+"-01-01 00:00:00";//当前年初
        Date start = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(startTime);//起始时间
        Date end = DateUtils.getDateUtil(-1);//结束时间
        List<Date> list = new ArrayList<>();
        long s = start.getTime();
        long e = end.getTime();
        Long oneDay = 1000 * 60 * 60 * 24l;
        while (s <= e) {
            start = new Date(s);
            list.add(start);
            s += oneDay;
        }
        //插入task
        insertInto(list,company);

    }

    public void insertTaskTable(String company) throws ParseException {
        //获取当前日期
        Calendar calSelected = Calendar.getInstance();
        int now = calSelected.get(Calendar.DAY_OF_MONTH); //获取当前天数
        for(int i=1;i< now;i++) {
            String monthFirst = getFirstTime(i);
            ActiveMatchTask amt = new ActiveMatchTask();
            amt.setIsExecute("0");
            amt.setFlag("1");
            amt.setType((long)1);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            amt.setTaskDate(sdf.parse(monthFirst));
            amt.setCompany(company);
            //检查任务表是否重复插入
            boolean ff = checkActiveMatchTask(amt);
            if(!ff) {
                activeMatchTaskService.insert(amt);
            }
        }
    }

    //插入task
    public void insertInto(List<Date> list,String company){
        for (int i=0;i<list.size();i++) {
            Date iDate = list.get(i);
            ActiveMatchTask amtr = new ActiveMatchTask();
            amtr.setTaskDate(iDate);
            amtr.setCompany(company);
            amtr.setIsExecute("0");
            amtr.setFlag("1");
            amtr.setType((long)1);
            activeMatchTaskService.insert(amtr);
        }
    }

    //检查任务表是否重复插入
    public boolean checkActiveMatchTask(ActiveMatchTask amt){
        boolean fflag = false;
        List<ActiveMatchTask> taskList = activeMatchTaskService.selectActiveMatchMain(amt);
        if(taskList.size()>0) {
            fflag = true;
        }
        return fflag;
    }


    public static String getFirstTime(int i){
        Calendar calendar = Calendar.getInstance();// 获取当前日期
        calendar.add(Calendar.MONTH, 0);
        calendar.set(Calendar.DAY_OF_MONTH, i);// 设置为1号,当前日期既为本月第一天
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        Long time = calendar.getTimeInMillis();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String monthFirst = format.format(time);
        return monthFirst;
    }

    //更新跟踪年表
    public void updatePlanTrackYearTable(String year, int nowMonth,String company) throws ParseException {
        //计算当前年前所有数据
        //当前年数据数据进入轨迹表
        List<PlanTrackYear> planTrackYears = planTrackYearService.selectPlanTrackYear(year,company);
        for(int i=0;i<planTrackYears.size();i++){
            PlanTrackYearHis planTrackYearHis = new PlanTrackYearHis();
            PlanTrackYear planTrackYear = planTrackYears.get(i);
            //字段转换
            copyProperties(planTrackYearHis,planTrackYear);
            planTrackYearHisService.insert(planTrackYearHis);
        }
        //删除数据
        planTrackYearService.deletePlanTrackYear(year,company);
        //重新计算
        calPlanTrackYear(year,company);
    }

    //重新计算
    public void calPlanTrackYear(String year,String company) throws ParseException {
        //先获取有多少人
        List<String> persons = personPlanMapper.selectPersonByYear(year,company);
        for(int i=0;i<persons.size();i++) {
            String personCode = persons.get(i);
            //获得一个品牌的List
            List<String> brandsList = createBrandsList();
            updateTables( personCode, brandsList, i, year,company);
        }
    }


    public void updateTables(String personCode,List<String> brandsList,int i,String year,String company) throws ParseException {
        DecimalFormat df = new DecimalFormat("0.##");
        for(int j=0;j<brandsList.size();j++) {
            String brands = brandsList.get(j);
            //每个人/每个品牌的年实际达成合计数
            Long actAmount = personPlanMapper.sumPersonSales(year,personCode,brands,company);
            //每个人/每个品牌的年计划合计数
            Long planAmount = personPlanMapper.sumPersonPlan(year,personCode,brands,company);
            //年序时进度
            Double yearRate = DateUtils.queryRate();
            //达成率
            Double planRate = calRate(actAmount, planAmount);
            //差值
            Double rateCal = planRate-yearRate;
            //人的区域和人类别
            PlanTrackYear ptr = new PlanTrackYear();
            //查这个人的性质和区域
            List<PersonTeam> personTeams = personPlanMapper.selectPersonTeam(personCode,company);
            if (personTeams.size()>0) {
                String areaCode = personTeams.get(0).getAreaCode();
                String areaName = personTeams.get(0).getAreaName();
                String personNature = personTeams.get(0).getPersonNature();
                ptr.setAreaCode(areaCode);
                ptr.setAreaName(areaName);
                ptr.setPersonType(personNature);
            }
            ptr.setYear(year);
            ptr.setYearActualNum(actAmount);
            ptr.setYearPlanRate(df.format(planRate)+"%");
            ptr.setYearPlanNum(planAmount);
            ptr.setYearRate(df.format(yearRate)+"%");
            ptr.setYearRateCal(df.format(rateCal)+"%");
            ptr.setCompany(company);
            planTrackYearService.insert(ptr);
        }
    }

    public Double calRate(Long actAmount,Long planAmount) {
        Double planRate;
        if(null == actAmount  && null == planAmount ) {//都等于0
            planRate = 0.0;
        } else if(null == planAmount ) {//分母为0
            planRate = 1.0;
        }  else if(null == actAmount ) {//分母为0
            planRate = 0.0;
        } else {
            planRate = actAmount / planAmount * 100.00;
        }
        return planRate;
    }

    /**
     * 创建表头
     * @param sheet
     * @param cellValues
     */
    private void createTitle(HSSFSheet sheet, String [] cellValues) {
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 10*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }

    //查询年计划
    @Transactional
    public List<PersonPlanVo> queryPersonPlan(PersonPlanCondition condition){
        //查询条件年份
        String year = condition.getYear();
        //查询条件品牌
        String brands = condition.getBrands();
        if("".equals(year) || null ==year || "".equals(brands) || null==brands){
            return null;
        }
        List<PersonPlanVo> voList = new ArrayList<>();
        //公司
        String company = condition.getCompany();
        //set值
        saveData(year,brands,voList,company);
        return voList;
    }

    //set值
    public void saveData(String year,String brands,List<PersonPlanVo> voList,String company){
        //查人的集合,去重
        List<PersonPlan> personPlans = personPlanMapper.selectPersonPlan(year, brands,company);
        for (int i=0;i<personPlans.size();i++) {
            String personCode = personPlans.get(i).getPersonCode();//编号
            String personName = personPlans.get(i).getPersonName();//姓名
            //查每个人每个月任务
            PersonPlanVo personPlanVo = new PersonPlanVo();
            personPlanVo.setPersonCode(personCode);
            personPlanVo.setPersonName(personName);
            personPlanVo.setCompany(company);
            updateJanuaryData(year, brands, personCode,company,personPlanVo);//存一月数据
            updateFebruaryData(year, brands, personCode,company,personPlanVo);//存二月数据
            updateMarchData(year, brands, personCode,company,personPlanVo);//存三月数据
            updateAprilData(year, brands, personCode,company,personPlanVo);//存四月数据
            updateMayData(year, brands, personCode,company,personPlanVo);//存五月数据
            updateJuneData(year, brands, personCode,company,personPlanVo);//存六月数据
            updateJuleData(year, brands, personCode,company,personPlanVo);//存七月数据
            updateAugustData(year, brands, personCode,company,personPlanVo);//存八月数据
            updateSeptemberData(year, brands, personCode,company,personPlanVo);//存九月数据
            updateOctoberData(year, brands, personCode,company,personPlanVo);//存十月数据
            updateNovemberData(year, brands, personCode,company,personPlanVo);//存十一月数据
            updateDecemberData(year, brands, personCode,company,personPlanVo); //存十二月数据

            voList.add(personPlanVo);

        }
    }

    //导出计划
    @Transactional
    public void exportPlan(HttpServletResponse response, String year,String company) throws Exception {
        HSSFWorkbook workbook = new HSSFWorkbook();
        String [] cellValues = {"姓名","人员代码","一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月" };
        String [] sheetNames = {"1马自达", "2大众","3红旗","4奥迪","5解放","6丰田","7夏利","8海马","9一汽吉林","10奔腾"};
        String [] brandNames = {"624", "621","629","622","625","623","626","3461","3401","11453"};
        //插入数据
        queryPlan(year,brandNames,workbook,cellValues,sheetNames,company);
        String fileName = "PersonPlan.xls";
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());

    }

    //插入数据
    public void queryPlan(String year,String[] brandNames,HSSFWorkbook workbook,String [] cellValues,String [] sheetNames,String  company){
        for(int i=0;i<brandNames.length;i++) {
            HSSFSheet sheet = workbook.createSheet(sheetNames[i]);
            String brands = brandNames[i];
            //写title
            createTitle(sheet,cellValues);
            //查人
            List<PersonPlan> personPlans = personPlanMapper.selectPersonPlan(year,brands,company);
            //写计划
            writePlans(personPlans,year,brands,sheet,company);
        }
    }

    //写计划
    public void writePlans(List<PersonPlan> personPlans,String year,String brands,HSSFSheet sheet,String  company){
        //行
        int rows = 1;
        for(int j=0;j<personPlans.size();j++) {

            PersonPlan personPlan = personPlans.get(j);
            String personCode = personPlan.getPersonCode();//姓名
            String personName = personPlan.getPersonName();//代码
            //写入excel
            wirteExcel(sheet,personCode,personName,company,rows,year,brands);
            rows++;
        }
    }

    //写入excel
    public void wirteExcel(HSSFSheet sheet, String personCode,String personName,String company,int rows,String year,String brands){
        HSSFRow row =  sheet.createRow(rows);
        row.createCell(0).setCellValue(personName);//姓名
        row.createCell(1).setCellValue(personCode);//编号
        writeJanuary(year, brands, personCode,company,row);//一月
        writeFebruary(year, brands, personCode,company,row);//二月
        writeMarch(year, brands, personCode,company,row);//三月
        writeApril(year, brands, personCode,company,row);//四月
        writeMay(year, brands, personCode,company,row);//五月
        writeJune(year, brands, personCode,company,row);//六月
        writeJule(year, brands, personCode,company,row);//七月
        writeAugust(year, brands, personCode,company,row);//八月
        writeSeptember(year, brands, personCode,company,row);//九月
        writeOctober(year, brands, personCode,company,row);//十月
        writeNovember(year, brands, personCode,company,row);//十一月
        writeDecember(year, brands, personCode,company,row);//十二月
    }

    //一月
    public void writeJanuary(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"1");
        if(pp.size()>0) {
            row.createCell(2).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(2).setCellValue(0);
        }
    }

    //二月
    public void writeFebruary(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"2");
        if(pp.size()>0) {
            row.createCell(3).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(3).setCellValue(0);
        }
    }

    //三月
    public void writeMarch(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"3");
        if(pp.size()>0) {
            row.createCell(4).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(4).setCellValue(0);
        }
    }

    //四月
    public void writeApril(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"4");
        if(pp.size()>0) {
            row.createCell(5).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(5).setCellValue(0);
        }
    }

    //五月
    public void writeMay(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"5");
        if(pp.size()>0) {
            row.createCell(6).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(6).setCellValue(0);
        }
    }

    //六月
    public void writeJune(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"6");
        if(pp.size()>0) {
            row.createCell(7).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(7).setCellValue(0);
        }
    }

    //七月
    public void writeJule(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"7");
        if(pp.size()>0) {
            row.createCell(8).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(8).setCellValue(0);
        }
    }

    //八月
    public void writeAugust(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"8");
        if(pp.size()>0) {
            row.createCell(9).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(9).setCellValue(0);
        }
    }

    //九月
    public void writeSeptember(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"9");
        if(pp.size()>0) {
            row.createCell(10).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(10).setCellValue(0);
        }
    }

    //十月
    public void writeOctober(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"10");
        if(pp.size()>0) {
            row.createCell(11).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(11).setCellValue(0);
        }
    }

    //十一月
    public void writeNovember(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"11");
        if(pp.size()>0) {
            row.createCell(12).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(12).setCellValue(0);
        }
    }

    //十二月
    public void writeDecember(String year, String brands, String personCode,String company,HSSFRow row){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"12");
        if(pp.size()>0) {
            row.createCell(13).setCellValue(pp.get(0).getAmount());
        } else {
            row.createCell(13).setCellValue(0);
        }
    }

    //字段转换
    public PersonPlanHis  exchangePersonPlan(PersonPlan personPlan){
        PersonPlanHis personPlanHis = new PersonPlanHis();
        personPlanHis.setPersonName(personPlan.getPersonName());
        personPlanHis.setPersonNo(personPlan.getPersonCode());
        personPlanHis.setYear(personPlan.getYear());
        personPlanHis.setMonth(personPlan.getMonth());
        personPlanHis.setBrands(personPlan.getBrands());
        personPlanHis.setCompany(personPlan.getCompany());
        personPlanHis.setAmount(personPlan.getAmount());
        return personPlanHis;
    }

    //创建品牌
    public List<String> createBrandsList(){
        List<String> list = new ArrayList<>();
        //马自达
        list.add("624");
        //大众
        list.add("621");
        //红旗
        list.add("629");
        //奥迪
        list.add("622");
        //解放
        list.add("625");
        //丰田
        list.add("623");
        //夏利
        list.add("626");
        //海马
        list.add("3461");
        //一汽吉林
        list.add("3401");
        //奔腾
        list.add("11453");
        return list;
    }

    //创建表头
    public void createPlanTitle(List<String> headList){
        headList.add("姓名");
        headList.add("人员编号");
        headList.add("所属公司");
        headList.add("一月");
        headList.add("二月");
        headList.add("三月");
        headList.add("四月");
        headList.add("五月");
        headList.add("六月");
        headList.add("七月");
        headList.add("八月");
        headList.add("九月");
        headList.add("十月");
        headList.add("十一月");
        headList.add("十二月");
    }

    //根据月查询每个人的计划
    public Long queryMonthPersonPlan(String personCode, int year, int month, String brands){
        PersonPlan personPlan = new PersonPlan();
        personPlan.setPersonCode(personCode);
        personPlan.setYear(year+"");
        personPlan.setMonth(month+"");
        personPlan.setBrands(brands);
        Long amount = personPlanMapper.queryOldPersonPlan(personPlan);
        return amount;

    }

    //年台数预算数
    public Long queryYearPersonPlan(String personCode, String brands, int year){
        PersonPlan personPlan = new PersonPlan();
        personPlan.setPersonCode(personCode);
        personPlan.setYear(year+"");
        personPlan.setBrands(brands);
        Long amount = personPlanMapper.queryOldPersonPlan(personPlan);
        return amount;
    }

    //查人的月计划合计
    public Long selectPlanByMonth(PersonPlan personPlan){
        Long amount = personPlanMapper.selectPlanByMonth(personPlan);
        return amount;
    }

    public int getNowMonth() {
        Calendar calendar=Calendar.getInstance();
        //获得当前时间的月份
        int month=calendar.get(Calendar.MONTH)+1;
        return month;
    }

    //存一月数据
    public void updateJanuaryData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"1");
        if(pp.size()>0) {
            personPlanVo.setJanuary(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setJanuary("0");
        }
    }

    //存二月数据
    public void updateFebruaryData(String year, String brands, String personCode,String company ,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"2");
        if(pp.size()>0) {
            personPlanVo.setFebruary(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setFebruary("0");
        }
    }

    //存三月数据
    public void updateMarchData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"3");
        if(pp.size()>0) {
            personPlanVo.setMarch(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setMarch("0");
        }
    }

    //存四月数据
    public void updateAprilData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"4");
        if(pp.size()>0) {
            personPlanVo.setApril(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setApril("0");
        }
    }
    //存五月数据
    public void updateMayData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"5");
        if(pp.size()>0) {
            personPlanVo.setMay(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setMay("0");
        }
    }
    //存六月数据
    public void updateJuneData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"6");
        if(pp.size()>0) {
            personPlanVo.setJune(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setJune("0");
        }
    }
    //存七月数据
    public void updateJuleData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"7");
        if(pp.size()>0) {
            personPlanVo.setJule(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setJule("0");
        }
    }
    //存八月数据
    public void updateAugustData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"8");
        if(pp.size()>0) {
            personPlanVo.setAugust(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setAugust("0");
        }
    }
    //存九月数据
    public void updateSeptemberData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"9");
        if(pp.size()>0) {
            personPlanVo.setSeptember(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setSeptember("0");
        }
    }
    //存十月数据
    public void updateOctoberData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"10");
        if(pp.size()>0) {
            personPlanVo.setOctober(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setOctober("0");
        }
    }
    //存十一月数据
    public void updateNovemberData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"11");
        if(pp.size()>0) {
            personPlanVo.setNovember(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setNovember("0");
        }
    }
    //存十二月数据
    public void updateDecemberData(String year, String brands, String personCode,String company,PersonPlanVo personPlanVo){
        List<PersonPlan> pp = personPlanMapper.selectPersonMonthPlan(year, brands, personCode,company,"12");
        if(pp.size()>0) {
            personPlanVo.setDecember(pp.get(0).getAmount()+"");
        } else {
            personPlanVo.setDecember("0");
        }
    }

    //校验人员重复
    public void checkPersonCode(Sheet sheet,int rows){
        Map<String,Object> personMap = new HashMap<>();
        for(int i=1;i<rows;i++) {
            String personCode = sheet.getCell(1, i).getContents();
            if(!"".equals(personCode) && null != personCode) {
                if(personMap.containsKey(personCode.trim())){//如果人编码重复了抛异常
                    throw new ValidationException("导入数据有误，请检查数据！");
                } else {
                    personMap.put(personCode.trim(),personCode.trim());
                }
            }


        }


    }

    /**
     *
     * 生成导入识别码流水号
     * @return
     */
    public Long Getnum(){
        Date currentTime = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
        String dateString = formatter.format(currentTime);

        int x=(int)(Math.random()*900)+100;
        Long serial = Long.parseLong(dateString + x);
        return serial;
    }

    public PersonPlanHis exchangePersonPlanHis(PersonPlan plan){
        PersonPlanHis planHis = new PersonPlanHis();
        planHis.setPersonNo(plan.getPersonCode());
        planHis.setPersonName(plan.getPersonName());
        planHis.setYear(plan.getYear());
        planHis.setMonth(plan.getMonth());
        planHis.setBrands(plan.getBrands());
        planHis.setAmount(plan.getAmount());
        planHis.setCompany(plan.getCompany());
        planHis.setDifferentCode(plan.getDifferentCode());

        return planHis;

    }


}