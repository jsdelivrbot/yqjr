package com.yqjr.fin.mkmm.sales.rest;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import com.yqjr.fin.mkmm.sales.common.ExcelUtils;
import com.yqjr.scfw.common.results.ListResultResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.model.pagination.PageInfo;
import com.yqjr.scfw.common.Const;
import com.yqjr.scfw.common.rest.BaseRest;
import com.yqjr.scfw.common.results.ObjectResultResponse;
import com.yqjr.scfw.common.results.PageResultResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.yqjr.fin.mkmm.sales.common.JQGridJsonResult;
import com.yqjr.fin.mkmm.sales.entity.ActiveDealerReview;
import com.yqjr.fin.mkmm.sales.condition.ActiveDealerReviewCondition;
import com.yqjr.fin.mkmm.sales.services.ActiveDealerReviewService;
import org.springframework.web.multipart.MultipartFile;


@Api(consumes = "application/json",
        produces = "application/json",
        protocols = "http",
        basePath = "activeDealerReviews")
@RestController
@RequestMapping(value = "/activeDealerReviews")
public class ActiveDealerReviewRest extends BaseRest<ActiveDealerReviewService, ActiveDealerReview> {

    //region generated by CodeRobot

    private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private ActiveDealerReviewService activeDealerReviewService;

    @ApiOperation(value = "分页查询活动经销商审核表（参数：实体对象属性、pageNum、pageSize）", tags = "活动经销商审核表信息：ActiveDealerReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public PageResultResponse<ActiveDealerReview> page(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
            ActiveDealerReviewCondition condition) {

        List<ActiveDealerReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));
        PageInfo<ActiveDealerReview> p = new PageInfo<>(list);
        return this.getPageResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, p);

    }

    @ApiOperation(value = "分页查询活动经销商审核表信息（参数：实体对象属性、pageNum、pageSize）", tags = "活动经销商审核表信息：ActiveDealerReviewRest")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "页数", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageSize", value = "每页记录数", required = true, dataType = "Integer")
    })
    @RequestMapping(value = "/pageByJqGrid", method = RequestMethod.GET)
    public JQGridJsonResult<ActiveDealerReview> pageByJqGrid(
            @RequestParam(value = "pageNum", required = true, defaultValue = "1") Integer pageNum,
            @RequestParam(value = "pageSize", required = true, defaultValue = "10") Integer pageSize,
            @RequestParam(value = "sord", required = true) String sord,
            ActiveDealerReviewCondition condition) {
        List<ActiveDealerReview> list = baseService.selectList(condition, PageBounds.of(pageNum, pageSize));

        PageInfo<ActiveDealerReview> pageList = new PageInfo<>(list);
        JQGridJsonResult<ActiveDealerReview> jqGridJson = new JQGridJsonResult<>();
        jqGridJson.setPage(pageList.getPageNum());
        jqGridJson.setTotal(pageList.getPages());
        jqGridJson.setRecords(pageList.getTotal());
        jqGridJson.setRows(list);

        return jqGridJson;
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    @RequestMapping(value = "/fileUpLoad", method = RequestMethod.POST)
    public ListResultResponse<ActiveDealerReview> fileUpload(@RequestParam("file") MultipartFile uploadfile){
        List<ActiveDealerReview> activeDealerReviews=new ArrayList<ActiveDealerReview>();

        InputStream inputStream= null;
        try {
            inputStream = uploadfile.getInputStream();
            activeDealerReviews=activeDealerReviewService.analysisExecL(inputStream);
        } catch (Exception e) {
            logger.error("Exception异常", e);
        }finally {
            if(inputStream!=null){
                try {
                    inputStream.close();
                } catch (IOException e) {
                    logger.error("IO异常", e);
                }
            }
        }

        return this.getListResultResponse(Const.SUCCESS, Const.CODE_SUCCESS, null, activeDealerReviews);
    }
    //下载模板
    @RequestMapping(value="/downloadTemplate", method = RequestMethod.GET)
    public void createTemplate(HttpServletResponse response) throws IOException {
        //ecxel路径
//        System.out.println("getServletPath:"+req.getServletPath());
//        System.out.println("getRequestURI:"+req.getRequestURI());
//        System.out.println("getRequestURL:"+req.getRequestURL());
//        String path=getClass().getResource("/excel/dealerTemplate.xls").getPath();
//        //ecxel名称
//        String fileName = "dealerTemplate.xls";
//        ExcelUtils.excelDownLoad(path,fileName,response);
        activeDealerReviewService.dealerTempletDownload(response);
    }
}