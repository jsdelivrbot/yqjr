package com.yqjr.fin.mkmm.sales.services;

import com.yqjr.fin.mkmm.sales.common.DateUtils;
import com.yqjr.fin.mkmm.sales.condition.PlanTrackCondition;
import com.yqjr.fin.mkmm.sales.entity.*;
import com.yqjr.fin.mkmm.sales.mapper.PlanTrackMapper;
import com.yqjr.fin.mkmm.sales.model.PlanTrackVo;
import com.yqjr.fin.mkmm.sales.vo.domin.TeamTrackVo;
import com.yqjr.scfw.common.pagination.model.PageBounds;
import com.yqjr.scfw.common.service.BaseService;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.*;


@Service
@Transactional
public class PlanTrackService extends BaseService<PlanTrackMapper, PlanTrack, Long> {

    //region generated by CodeRobot

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ~此线上方代码自动生成，在此下方编写自定义代码。
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //endregion

    @Autowired
    private PlanTrackMapper planTrackMapper;
    @Autowired
    private PersonPlanService personPlanService;
    @Autowired
    private PersonSaleService personSaleService;


    //导出计划跟踪查询结果
    public void  createTrackExl(PlanTrackCondition planTrackCondition,  HttpServletResponse response) throws IOException, WriteException {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("销售计划跟踪");
        String [] cellValues1 = {"人员信息","当前月度","当前年度"};
        String [] cellValues2 = {"归属区域名称","人员姓名","人员类别","台数实际达成量","台数预算","台数预算达成率","序时进度","达成率与序时进度差值","台数实际达成量","台数预算数","台数预算数达成率","序时进度","达成率与序时进度差值"};
        List<PlanTrackVo> list =  sumPlanTracks(planTrackCondition);
        createTitle1(sheet,cellValues1);
        //创建表头
        createTitle2(sheet,cellValues2);
        //写数据
        writeDate(sheet,list);
        String fileName = "PlanTrack.xls";
        //新增数据行，并且设置单元格数据
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);
        response.flushBuffer();
        workbook.write(response.getOutputStream());

    }

    //写数据
    public void writeDate(HSSFSheet sheet,List<PlanTrackVo> vos){
        int i = 2;
        for(PlanTrackVo vo :vos) {
            HSSFRow row =  sheet.createRow(i);
            row.createCell(0).setCellValue(vo.getAreaName());
            row.createCell(1).setCellValue(vo.getPersonName());
            String personType ;
            if("0".equals(vo.getPersonType())) {
                personType = "团队负责人";
            } else if("1".equals(vo.getPersonType())){
                personType = "销售经理";
            } else {
                personType = "";
            }
            row.createCell(2).setCellValue(personType);
            row.createCell(3).setCellValue(vo.getMonthActualNum());
            row.createCell(4).setCellValue(vo.getMonthPlanNum());
            row.createCell(5).setCellValue(vo.getMonthPlanRate());
            row.createCell(6).setCellValue(vo.getMonthRate());
            row.createCell(7).setCellValue(vo.getMonthRateCal());
            row.createCell(8).setCellValue(vo.getYearActualNum());
            row.createCell(9).setCellValue(vo.getYearPlanNum());
            row.createCell(10).setCellValue(vo.getYearPlanRate());
            row.createCell(11).setCellValue(vo.getYearRate());
            row.createCell(12).setCellValue(vo.getYearRateCal());
            i++;
        }
    }

    /***
     * 创建表头2
     * @param sheet
     */
    private void createTitle1(HSSFSheet sheet, String [] cellValues){
        HSSFRow row = sheet.createRow(0);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 10*256);
        }
        //合并单元格
        sheet.addMergedRegion(new CellRangeAddress(0,0,0,2));
        sheet.addMergedRegion(new CellRangeAddress(0,0,3,7));
        sheet.addMergedRegion(new CellRangeAddress(0,0,8,12));

        row.createCell(0).setCellValue(cellValues[0]);
        row.createCell(3).setCellValue(cellValues[1]);
        row.createCell(8).setCellValue(cellValues[2]);


    }

    /***
     * 创建表头2
     * @param sheet
     */
    private void createTitle2(HSSFSheet sheet, String [] cellValues) {
        HSSFRow row = sheet.createRow(1);
        //设置列宽
        for(int i = 0; i<cellValues.length ;i++) {
            sheet.setColumnWidth(i, 10*256);
        }
        HSSFCell cell;
        for(int i = 0; i<cellValues.length ;i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellValues[i]);
        }
    }

    //计算计划跟踪
    public List<PlanTrackVo> sumPlanTrack(PlanTrackCondition planTrackCondition, PageBounds... pageBounds) {
        List<PlanTrackVo> tracks = planTrackMapper.sumPlanTrack(planTrackCondition,pageBounds);

        List<PlanTrackVo> planTrackVos = new ArrayList<>();
        //计算查询结果的合计
        sumPlanTrackAll(tracks,planTrackVos);
        return planTrackVos;
    }

    public List<PlanTrackVo> sumPlanTracks(PlanTrackCondition planTrackCondition){
        List<PlanTrackVo> tracks = planTrackMapper.sumPlanTrack(planTrackCondition);

        List<PlanTrackVo> planTrackVos = new ArrayList<>();
        //计算查询结果的合计
        sumPlanTrackAll(tracks,planTrackVos);
        return planTrackVos;
    }

    public void sumPlanTrackAll(List<PlanTrackVo> tracks, List<PlanTrackVo> planTrackVos){
        Long yearActualNumSum = (long)0;
        Long yearPlanNumSum = (long)0;
        Long monthPlanNumSum = (long)0;
        Long monthActualNumSum = (long)0;
        for(int i=0;i<tracks.size();i++) {
            PlanTrackVo planTrackVo = tracks.get(i);
            Long yearPlanNum = planTrackVo.getYearPlanNum();//年计划
            Long yearActualNum = planTrackVo.getYearActualNum();//年达成
            Double yearPlanRate = yearActualNum/yearPlanNum*100.00;//年完成率
            String yearRate = planTrackVo.getYearRate();//年序时进度
            Double yearRateCal = yearPlanRate-new Double(yearRate.substring(0,yearRate.indexOf("%")));//年进度差值

            Long monthPlanNum  = planTrackVo.getMonthPlanNum();//月计划
            Long monthActualNum = planTrackVo.getMonthActualNum();//月达成
            Double monthPlanRate = monthActualNum/monthPlanNum*100.00;//月完成率
            String monthRate = planTrackVo.getMonthRate();//月序时进度
            Double monthRateCal = monthPlanRate-new Double(monthRate.substring(0,monthRate.indexOf("%")));//月进度差值

            planTrackVo.setYearPlanRate(yearPlanRate+"%");
            planTrackVo.setYearRateCal(yearRateCal+"%");
            planTrackVo.setMonthPlanRate(monthPlanRate+"%");
            planTrackVo.setMonthRateCal(monthRateCal+"%");
            planTrackVos.add(planTrackVo);
            //合计累加
            yearActualNumSum += yearActualNum;
            yearPlanNumSum += yearPlanNum;
            monthPlanNumSum += monthPlanNum;
            monthActualNumSum += monthActualNum;
        }
        //计算合计
        addSum(tracks, planTrackVos, yearActualNumSum, yearPlanNumSum, monthPlanNumSum,  monthActualNumSum);
    }

    //计算合计
    public void addSum(List<PlanTrackVo> tracks,List<PlanTrackVo> planTrackVos,Long yearActualNumSum,Long yearPlanNumSum,Long monthPlanNumSum, Long monthActualNumSum) {
        if(tracks.size()>0) {
            PlanTrackVo ptv = new PlanTrackVo();
            ptv.setAreaName("合计");
            String mr = tracks.get(0).getMonthRate();//月序时进度
            String yr = tracks.get(0).getYearRate();//年序时进度
            ptv.setYearActualNum(yearActualNumSum);
            ptv.setYearPlanNum(yearPlanNumSum);
            ptv.setYearPlanRate((yearActualNumSum/yearPlanNumSum*100.00) + "%");
            ptv.setYearRate(yr);
            ptv.setYearRateCal((yearActualNumSum/yearPlanNumSum*100.00-new Double(yr.substring(0,yr.indexOf("%"))))+"%");

            ptv.setMonthPlanNum(monthPlanNumSum);
            ptv.setMonthActualNum(monthActualNumSum);
            ptv.setMonthPlanRate((monthActualNumSum/monthPlanNumSum*100.0) + "%");
            ptv.setMonthRate(mr);
            ptv.setMonthRateCal((monthActualNumSum/monthPlanNumSum*100.00-new Double(mr.substring(0,mr.indexOf("%"))))+"%");
            planTrackVos.add(ptv);
        }
    }



}






